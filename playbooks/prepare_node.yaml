- hosts: selection:!nas:!nodes
  vars:
    metadata:
      description: Prepare node
      playbook_types:
      - inventory
      confirm: true
      allow_on_control_plane: never
      requires_cluster_info: true
      query:
        string: sudo password
        variable: ansible_become_pass
        function: string
      category: Setup
  gather_subset:
  - '!min'
  - '!all'
  - distribution
  become: true
  become_user: root
  tasks:
  - name: "Adding {{ ansible_user }} to sudoers"
    lineinfile:
      path: "/etc/sudoers.d/{{ ansible_user }}"
      regex: "^{{ ansible_user }}"
      line: "{{ ansible_user }} ALL=(ALL) NOPASSWD: ALL"
      state: present
      mode: "0660"
      create: true
      validate: "visudo -cf %s"
  - name: "Adding public keys to authorized_keys"
    ansible.posix.authorized_key:
      user: "{{ ansible_user }}"
      state: present
      key: "{{ item }}"
    loop: "{{ authorized_keys }}"
  - name: Updating package cache
    ansible.builtin.apt: update_cache=yes force_apt_get=yes
    when: ansible_os_family == 'Debian'
  - name: Gathering package facts
    package_facts:
      manager: apt
    when: ansible_os_family == 'Debian'
  - name: Installing Docker
    ansible.builtin.apt:
      name: docker.io
      state: present
      force_apt_get: true
    when: ("'docker-ce' not in ansible_facts.packages") and (ansible_os_family == 'Debian')
  - name: Adding Docker repo
    shell: |
      cat <<EOF | tee /etc/yum.repos.d/docker.repo > /dev/null
      [docker]
      baseurl=https://download.docker.com/linux/centos/8/x86_64/stable/
      gpgcheck=0
      EOF
      if [ -n "{{ https_proxy }}" ]; then
        echo "proxy={{ https_proxy }}" | tee -a /etc/yum.repos.d/docker.repo > /dev/null
      fi
    when: ansible_os_family == 'RedHat'
  - name: Updating package cache
    ansible.builtin.dnf: update_cache=yes
    when: ansible_os_family == 'RedHat'
  - name: Gathering package facts
    package_facts:
      manager: rpm
    when: ansible_os_family == 'RedHat'
  - name: Removing runc and containers-common (Due to Docker conflict)
    ansible.builtin.dnf:
      pkg:
      - runc
      - containers-common
      state: absent
    when: ansible_os_family == 'RedHat'
  - name: Installing Docker
    ansible.builtin.dnf:
      name: docker-ce
      state: present
    when: ansible_os_family == 'RedHat'
  - name: Creating /etc/docker
    file:
      path: /etc/docker
      state: directory
      mode: "0755"
  - name: Configuring Docker daemon
    template:
      dest: /etc/docker/daemon.json
      src: templates/etc/docker/daemon.json.j2
      mode: "0644"
      force: true
  - name: Creating /etc/systemd/system/docker.service.d
    file:
      path: /etc/systemd/system/docker.service.d
      state: directory
      mode: "0755"
  - name: Configuring docker/http-proxy.conf
    template:
      dest: /etc/systemd/system/docker.service.d/http-proxy.conf
      src: templates/etc/systemd/system/docker.service.d/http-proxy.conf.j2
      mode: "0644"
      force: true
  - name: Restarting Docker
    ansible.builtin.systemd:
      name: docker
      enabled: true
      daemon_reload: true
      state: restarted
  - name: Disabling swap
    shell: |
      # Disable swap during this boot
      swapoff -a
      # Disable swap entries in /etc/fstab
      sed -i -e 's,^/swapfile,#&,;s,^/swap.img,#&,;s,^UUID=[a-f0-9]*-[a-f0-9]*-[a-f0-9]*-[a-f0-9]*-[a-f0-9]* *none *swap.*,#&,' /etc/fstab
      # Disable swap units
      swapunits="$(systemctl --type swap -o json-pretty)"
      if [ $(echo "${swapunits}" | grep -c "0 loaded units listed") -eq 0 ]; then
        for swap in $(systemctl --type swap -o json-pretty | grep "unit" | sed -e 's/.*"unit" : "//;s/",$//'); do
          systemctl mask "${swap}"
        done
      fi
    changed_when: false
  - name: Setting SELinux to permissive mode
    shell: |
      setenforce 0
      sed -i -e 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
    when: ansible_os_family == 'RedHat'
