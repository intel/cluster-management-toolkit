- hosts: selection:&controlplane:!nas:!nodes
  vars:
    metadata:
      description: Prepare control plane
      playbook_types:
      - internal
  gather_subset:
  - '!min'
  - '!all'
  - distribution
  become: true
  become_user: root
  tasks:
  - name: Updating package cache
    apt: update_cache=yes force_apt_get=yes
    when: ansible_os_family == 'Debian'
  - name: Installing docker.io
    apt:
      name: docker.io
      state: latest
      force_apt_get: true
    when: ansible_os_family == 'Debian'
  - name: Creating /etc/docker
    file:
      path: /etc/docker
      state: directory
      mode: "0755"
  - name: Configuring Docker daemon
    template:
      dest: /etc/docker/daemon.json
      src: templates/etc/docker/daemon.json.j2
      mode: "0644"
      force: true
  - name: Creating /etc/systemd/system/docker.service.d
    file:
      path: /etc/systemd/system/docker.service.d
      state: directory
      mode: "0755"
  - name: Configuring docker/http-proxy.conf
    template:
      dest: /etc/systemd/system/docker.service.d/http-proxy.conf
      src: templates/etc/systemd/system/docker.service.d/http-proxy.conf.j2
      mode: "0644"
      force: true
  - name: Restarting Docker
    ansible.builtin.systemd:
      name: docker
      enabled: true
      daemon_reload: true
      state: restarted
  - name: Installing containerd
    apt:
      name: containerd
      state: latest
      force_apt_get: true
    when: (ansible_os_family == 'Debian') and (cri == 'containerd')
  - name: Installing runc
    apt:
      name: runc
      state: latest
      force_apt_get: true
    when: (ansible_os_family == 'Debian') and (cri == 'containerd')
  - name: Configuring crictl
    template:
      dest: /etc/crictl.yaml
      src: templates/etc/crictl.yaml.j2
      mode: "0644"
      force: true
    when: cri == 'containerd'
  - name: Creating /etc/containerd
    file:
      path: /etc/containerd
      state: directory
      mode: "0755"
    when: cri == 'containerd'
  - name: Configuring containerd
    template:
      dest: /etc/containerd/config.toml
      src: templates/etc/containerd/config.toml.j2
      mode: "0644"
    when: cri == 'containerd'
  - name: Creating /etc/systemd/system/kubelet.service.d
    file:
      path: /etc/systemd/system/kubelet.service.d
      state: directory
      mode: "0755"
    when: cri == 'containerd'
  - name: Configuring containerd-cri
    template:
      dest: /etc/systemd/system/kubelet.service.d/containerd-cri.conf
      src: templates/etc/systemd/system/kubelet.service.d/containerd-cri.conf.j2
      mode: "0644"
      force: true
    when: cri == 'containerd'
  - name: Creating /etc/systemd/system/containerd.service.d
    file:
      path: /etc/systemd/system/containerd.service.d
      state: directory
      mode: "0755"
    when: cri == 'containerd'
  - name: Configuring containerd/http-proxy.conf
    template:
      dest: /etc/systemd/system/containerd.service.d/http-proxy.conf
      src: templates/etc/systemd/system/containerd.service.d/http-proxy.conf.j2
      mode: "0644"
      force: true
    when: cri == 'containerd'
  - name: Configuring containerd/ip_forward.conf
    template:
      dest: /etc/systemd/system/containerd.service.d/ip-forward.conf
      src: templates/etc/systemd/system/containerd.service.d/ip-forward.conf.j2
      mode: "0644"
      force: true
    when: cri == 'containerd'
  - name: Restarting Containerd
    ansible.builtin.systemd:
      name: containerd
      daemon_reload: true
      state: restarted
    when: cri == 'containerd'
  - name: Disabling swap
    shell: |
      # Disable swap during this boot
      swapoff -a
      # Disable swap entries in /etc/fstab
      sed -i -e 's,^/swapfile,#&,;s,^/swap.img,#&,;s,^UUID=[a-f0-9]*-[a-f0-9]*-[a-f0-9]*-[a-f0-9]*-[a-f0-9]* *none *swap.*,#&,' /etc/fstab
      # Disable swap units
      swapunits="$(systemctl --type swap -o json-pretty)"
      if [ $(echo "${swapunits}" | grep -c "0 loaded units listed") -eq 0 ]; then
        for swap in $(systemctl --type swap -o json-pretty | grep "unit" | sed -e 's/.*"unit" : "//;s/",$//'); do
          systemctl mask "${swap}"
        done
      fi
