---
# yamllint disable rule:line-length
- name: "Upgrade a Kubernetes control plane using kubeadm"
  hosts: "selection"
  vars:
    metadata:
      description: "Upgrade a Kubernetes control plane using kubeadm"
      summary:
        "Kubernetes actions":
          - description: "Upgrades Kubernetes control plane"
        "Other actions":
          - description: "Removes deprecated config flags"
          - description: "Updates package cache"
            conditions:
              - "Debian and derivatives || Red Hat and derivatives"
        "Restarted services":
          - description: "kubelet"
        "Upgraded packages":
          - description: "kubeadm"
          - description: "kubectl"
          - description: "kubelet"
      time_consumption: "Slow"
      playbook_types:
        - "internal"
      category: "Administration"
  gather_subset:
    - "!min"
    - "!all"
    - "distribution"
  become: true
  become_user: "root"
  tasks:
    - name: "Updating package cache"
      ansible.builtin.apt:
        update_cache: true
        force_apt_get: true
      when: "ansible_os_family == 'Debian'"
    - name: "Unmarking packages as held"
      ansible.builtin.shell: |
        apt-mark unhold kubeadm kubelet kubectl || true
      when: "ansible_os_family == 'Debian'"
      changed_when: true
    - name: "Removing deprecated config flags"
      ansible.builtin.shell: |
        set -o pipefail
        major_version=$(echo {{ requested_control_plane_k8s_version }} | sed -e 's/^\([0-9]*\)\.[0-9]*.*/\1/')
        minor_version=$(echo {{ requested_control_plane_k8s_version }} | sed -e 's/^[0-9]*\.\([0-9]*\).*/\1/')
        if [ $major_version -ge 1 ] && [ $minor_version -ge 24 ]; then
          if [ -e /var/lib/kubelet/kubeadm-flags.env ]; then
            sed -i -e 's/--network-plugin=cni//' /var/lib/kubelet/kubeadm-flags.env
          fi
          if [ -e /etc/systemd/system/kubelet.service.d/10-kubeadm.conf ]; then
            sed -i -e 's/--network-plugin=cni//' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
          fi
        fi
        if [ $major_version -ge 1 ] && [ $minor_version -ge 27 ]; then
          if [ -e /var/lib/kubelet/kubeadm-flags.env ]; then
            sed -i -e 's/--container-runtime=\(docker\|remote\)//' /var/lib/kubelet/kubeadm-flags.env
            sed -i -e 's/--pod-infra-container-image=[^ ]*//' /var/lib/kubelet/kubeadm-flags.env
          fi
          if [ -e /etc/systemd/system/kubelet.service.d/10-kubeadm.conf ]; then
            sed -i -e 's/--container-runtime=\(docker\|remote\)//' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
            sed -i -e 's/--pod-infra-container-image=[^ ]*//' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
          fi
        fi
      changed_when: false
    - name: "Installing new versions of kubeadm, kubelet and kubectl"
      ansible.builtin.apt:
        pkg:
          - "kubeadm={{ requested_control_plane_k8s_version }}"
          - "kubelet={{ requested_control_plane_k8s_version }}"
          - "kubectl={{ requested_control_plane_k8s_version }}"
        force_apt_get: true
      when: "ansible_os_family == 'Debian'"
    - name: "Restarting kubelet"
      ansible.builtin.systemd:
        name: "kubelet"
        daemon_reload: true
        state: "restarted"
    - name: "Marking packages as held"
      ansible.builtin.shell: |
        apt-mark hold kubeadm kubelet kubectl || true
      when: "ansible_os_family == 'Debian'"
      changed_when: true
    - name: "Updating package cache"
      ansible.builtin.dnf:
        update_cache: true
      when: "ansible_os_family == 'RedHat'"
    - name: "Unmarking packages as held"
      ansible.builtin.shell: |
        dnf versionlock delete kubeadm kubelet kubectl || true
      when: "ansible_os_family == 'RedHat'"
      changed_when: true
    - name: "Installing new versions of kubeadm, kubelet and kubectl"
      ansible.builtin.dnf:
        pkg:
          - "kubeadm-{{ requested_control_plane_k8s_version }}"
          - "kubelet-{{ requested_control_plane_k8s_version }}"
          - "kubectl-{{ requested_control_plane_k8s_version }}"
        disable_excludes: "kubernetes"
      when: "ansible_os_family == 'RedHat'"
    - name: "Marking packages as held"
      ansible.builtin.shell: |
        dnf versionlock add kubeadm kubelet kubectl || true
      when: "ansible_os_family == 'RedHat'"
      changed_when: true
    - name: "Creating temporary file for cluster configuration"
      ansible.builtin.tempfile:
        state: "file"
        suffix: "temp"
      register: "cluster_config"
    - name: "Creating cluster configuration"
      ansible.builtin.template:
        dest: "{{ cluster_config.path }}"
        src: "templates/config/initconfig.yaml.j2"
        mode: "0640"
    - name: "The following cluster configuration will be used"
      ansible.builtin.command: "cat {{ cluster_config.path }}"
      changed_when: false
    - name: "Planning upgrade"
      ansible.builtin.shell: |
        if [ -r /etc/kubernetes/super-admin.conf ]; then
          kubeadm --kubeconfig /etc/kubernetes/super-admin.conf upgrade plan --ignore-preflight-errors=CreateJob --config {{ cluster_config.path }} {{ requested_control_plane_k8s_version.split('-')[0] }}
        elif [ -r /etc/kubernetes/admin.conf ]; then
          kubeadm --kubeconfig /etc/kubernetes/admin.conf upgrade plan --ignore-preflight-errors=CreateJob --config {{ cluster_config.path }} {{ requested_control_plane_k8s_version.split('-')[0] }}
        else
          kubeadm upgrade plan --ignore-preflight-errors=CreateJob --config {{ cluster_config.path }} {{ requested_control_plane_k8s_version.split('-')[0] }}
        fi
      changed_when: false
    - name: "Pulling Kubernetes images"
      ansible.builtin.shell: |
        if [ -n "{{ https_proxy }}" ]; then
          export https_proxy={{ https_proxy }}
        else
          export https_proxy=
        fi
        kubeadm config images pull --config {{ cluster_config.path }}
      changed_when: false
    - name: "Upgrading control plane"
      ansible.builtin.shell: |
        if [ -r /etc/kubernetes/super-admin.conf ]; then
          kubeadm --kubeconfig /etc/kubernetes/super-admin.conf upgrade apply --ignore-preflight-errors=CreateJob -f {{ requested_control_plane_k8s_version.split("-")[0] }}
        elif [ -r /etc/kubernetes/admin.conf ]; then
          kubeadm --kubeconfig /etc/kubernetes/admin.conf upgrade apply --ignore-preflight-errors=CreateJob -f {{ requested_control_plane_k8s_version.split("-")[0] }}
        fi
      changed_when: false
    - name: "Remove temporary cluster configuration file"
      ansible.builtin.file:
        path: "{{ cluster_config.path }}"
        state: "absent"
      when: "cluster_config.path is defined"
    - name: "Restarting kubelet"
      ansible.builtin.systemd:
        name: "kubelet"
        daemon_reload: true
        state: "restarted"
