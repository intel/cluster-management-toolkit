- hosts: "selection"
  name: "Instantiate Virtual Machines"
  vars:
    metadata:
      description: "Instantiate Virtual Machines"
      time_consumption: "Potentially slow"
      playbook_types:
        - "internal"
      category: "Setup"
      summary:
        "Created files":
          - description: "/var/lib/libvirt/images/meta-data.{{ item.0 }}"
          - description: "/var/lib/libvirt/images/user-data.{{ item.0 }}"
        "Other actions":
          - description: "Instantiates VMs"
          - description: "Adds DHCP entries for the VM instances"
          - description: "Adds /etc/hosts entries for the VM instances"
  gather_subset:
    - "!min"
    - "!all"
    - "user_dir"
  tasks:
    - name: "Create meta-data for the VM image instances"
      ansible.builtin.template:
        dest: "/var/lib/libvirt/images/meta-data.{{ item.0 }}"
        src: "templates/vmimages/meta-data.yaml.j2"
        mode: "0640"
        owner: "{{ ansible_user }}"
        group: "libvirt-qemu"
      loop: "{{ instances }}"
      become: true
      become_user: "root"
    - name: "Create user-data for the VM image instances"
      ansible.builtin.template:
        dest: "/var/lib/libvirt/images/user-data.{{ item.0 }}"
        src: "templates/vmimages/user-data.template.yaml.j2"
        mode: "0640"
        owner: "{{ ansible_user }}"
        group: "libvirt-qemu"
      loop: "{{ instances }}"
      become: true
      become_user: "root"
    - name: "Creating temporary directory for net-cmt.xml"
      ansible.builtin.tempfile:
        state: "directory"
        suffix: "temp"
      register: "tempdir"
    - name: "Copy net-cmt.yaml to the vmhost"
      ansible.builtin.copy:
        src: "templates/vmimages/net-cmt.xml.j2"
        dest: "{{ tempdir.path }}"
        mode: "0640"
    - name: "Create and start the cmt network"  # noqa risky-shell-pipe
      ansible.builtin.shell: |
        if ! $( virsh --connect qemu:///system net-list | grep cmt ); then
            virsh --connect qemu:///system net-define {{ tempdir.path }}/net-cmt.xml
            virsh --connect qemu:///system net-autostart cmt
        fi
        virsh --connect qemu:///system net-destroy cmt 2> /dev/null || /bin/true
        virsh --connect qemu:///system net-start cmt
      changed_when: true
    - name: "Create DHCP entries for all instances"
      ansible.builtin.shell: |
        echo virsh --connect qemu:///system net-update cmt add ip-dhcp-host "<host mac='{{ item.2 }}' name='{{ item.0 }}' ip='{{ item.1 }}'/>" --live --config || /bin/true
        virsh --connect qemu:///system net-update cmt add ip-dhcp-host "<host mac='{{ item.2 }}' name='{{ item.0 }}' ip='{{ item.1 }}'/>" --live --config || /bin/true
      loop: "{{ instances }}"
      changed_when: true
    - name: "Instantiate the VMs"
      ansible.builtin.shell: |
        echo virt-install --connect qemu:///system \
            --cloud-init meta-data=/var/lib/libvirt/images/meta-data.{{ item.0 }},user-data=/var/lib/libvirt/images/user-data.{{ item.0 }} \
            --virt-type kvm \
            --name {{ item.0 }} \
            --ram {{ vmram }} \
            --vcpus={{ vcpus }} \
            --os-variant {{ os_variant }} \
            --disk path=/var/lib/libvirt/images/{{ item.0 }}.qcow2,format=qcow2 \
            --import \
            --network network=cmt,mac={{ item.2 }} \
            --noautoconsole
        virt-install --connect qemu:///system \
            --cloud-init meta-data=/var/lib/libvirt/images/meta-data.{{ item.0 }},user-data=/var/lib/libvirt/images/user-data.{{ item.0 }} \
            --virt-type kvm \
            --name {{ item.0 }} \
            --ram {{ vmram }} \
            --vcpus={{ vcpus }} \
            --os-variant {{ os_variant }} \
            --disk path=/var/lib/libvirt/images/{{ item.0 }}.qcow2,format=qcow2 \
            --import \
            --network network=cmt,mac={{ item.2 }} \
            --noautoconsole
      loop: "{{ instances }}"
      changed_when: true
    - name: "Create /etc/hosts entries for all instances"
      ansible.builtin.shell: |
        grep -q "{{ item.0 }}" /etc/hosts || printf -- "{{ item.1 }} {{item.0 }}  # VM instance created by CMT\n" >> /etc/hosts
      loop: "{{ instances }}"
      become: true
      become_user: "root"
      changed_when: true
    - name: "Wait a reasonable time for the VMs to start"
      ansible.builtin.shell: |
        count=0
        until timeout 0.2 ping -c 1 {{ item.0 }} > /dev/null; do
            count=$(( count + 1 ))
            if [ ${count} -gt 60 ]; then
                printf -- "VMs failed to start within 60 seconds; giving up.\n"
                exit 1
            fi
            sleep 1
        done
        sleep 1
      loop: "{{ instances }}"
      changed_when: false
