# Note: while you can do all configuration here, the recommended
# way to change the configuration options is to put your changes
# in cmt.yaml.d, split into separate files for each category.
# This way you can keep the default configuration as a reference.
# This also simplifies a workflow where site-local configurations
# can be imported without having to touch the distributed version
# of cmt.yaml.
#
# Using cmt.yaml.d also makes it easier to debug configuration
# issues.
#
# Using this configuration file you can change the defaults
# for various options; note that a bit of sanity checking
# will occur. Too insane values will be silently overriden.
# Incorrect syntax and non-existing keys will cause exceptions.
#
# Some views have multiple different sets of defaults;
# there may be "Wide", "Normal", and in some case also "Narrow".
# To change the sortcolumn for one of these you can use:
#
# {VIEW,kind.api_version}:
#   listview:
#    field_indexes:
#      {Wide,Normal,Narrow}:
#        sortcolumn: SORTCOLUMN
#        sortorder_reverse: {true,false}
#
# You can also add a custom view (that will be used as default):
#
# {VIEW,kind.api_version}:
#   listview:
#    field_indexes:
#      Custom:
#        sortcolumn: SORTCOLUMN
#        sortorder_reverse: {true,false}
#
# With a few exceptions, all fields valid for the view are
# also valid sortcolumns.
#
# The list of valid fields for each view is available using
# cmu list-views; it will list all VIEWs, their default
# sortcolumn, and all fields in the order they will be shown
# by default.
#
# Note that the defaults are shown; the list does NOT take
# into account customisations that have been made in this file.
#
# Also note that unless you set "hide_unavailable_api: false",
# the list is likely to contain a lot more VIEWs than you will
# see when using the program.
#
# Finally, "name" and "namespace" will *always* be included
# in the list, even if excluded (if not included they will be
# prepended to the list, meaning that if a custom order is
# preferred you should make sure to include them).
#
# Other configuration options are described below

# Global configuration options
Global:
  # The theme to use; if no suffix is used, the program will
  # try to load THEME.yaml if loading THEME fails
  # theme: "default"

  # Default indentation level when dumping YAML
  # indent: 2

  # The default view to use when calling cmu without
  # arguments; to get the selector either use "Selector"
  # or comment this out
  # defaultview: ""

Selector:
  # Hide unavailable APIs in the selector menu
  # the list of available APIs can be updated by accessing the selection
  # menu using F3 instead of F2
  # If this option is set to false, unavailable APIs will be listed
  # but dimmed out and unselectable instead
  # hide_unavailable_apis: true
  #
  # The primary sort column (valid options: name, family)
  # sortcolumn: "family"
  #
  # Categorise the views
  # categorise: true

# Networking:
# These settings are for the system, not internal to Kubernetes.
# They are used for communicating with other computers outside the context
# of Kubernetes network, for instance when fetching updates.
Network:
  http_proxy:
  https_proxy:
  no_proxy:
  # Adding a host to this list enables use of less secure protocols
  # when connecting to that host; all known flawed protocols
  # remains disabled though.
  # This might be necessary for compatibility with older systems.
  # If ["ALL"] (uppercase only) is specified, relaxed SSH is used for all hosts
  relaxed_ssh_hosts: []

Ansible:
  # This determines the parallelism of the commands being executed;
  # the default used by ansible is 5, which makes things slow in any
  # reasonably sized Kubernetes cluster
  # forks: 10

  # User for ansible connections
  # Unless the user you are running cmu as is the same as the user to login as on nodes
  # you probably want to specify this either here or in the inventory
  #
  # This user will also be used when ssh:ing to nodes
  # ansible_user:

  # Password for users
  # If you use a password here you should use an ansible vault!
  # but the safest way is to only provide your password while running
  # "cmtadm prepare <host>" and "cmt prepare <host>";
  # cmt will keep the password in memory until hosts have been prepared,
  # but after that it will rely on ssh host keys and passwordless sudo.
  # ansible_password:

  # If this is set to true all logs are saved whenever you execute ansible actions;
  # these logs can later be accessed per host (via the node/host view)
  # or per action (in the logs view)
  # save_logs: true

  # Path to directories with locally installed playbooks; this can also be used to override
  # the default playbooks--any playbook with the same name as one of the system playbooks
  # will override the system playbook; prioritised by the order of directories,
  # where a playbook in the first listed directory would override a playbook in the second,
  # etc.
  #
  # Playbook paths must be quoted. To reference playbook directories relative to the user's home directory
  # you can use "{HOME}/", so for instance:
  # local_playbooks:
  # - "{HOME}/local_playbooks"
  # - "/opt/cmt/playbooks"
  # - ...

# Settings to use when configuring docker
Docker:
  # insecure_registries:

Containerd:
  # Registry mirrors for containerd; format:
  # [ mirror, endpoint ]
  # registry_mirrors:

Mouse:
  # Enable or disable mouse support by default (can still be toggled on/off in the program as needed)
  # enable: true

  # If your mouse has a scrollwheel or physical up and down buttons
  # you can add their bitpatterns for up and down below and enable this;
  # there seem to be no established standards for this
  # (at least not in python curses),
  # so the defaults here is what worked with the setup this is tested on.
  # enablescroll: true

  # This seems to work with at least some Logitech mice:
  # - 0b10000000000000000000
  # - 0b10000000000000000
  # scrollup: 0b10000000000000000000

  # At least two different possible values have been identified for down so far:
  # - 0b1000000000000000000000000000
  # - 0b1000000000000000000000
  # scrolldown: 0b1000000000000000000000000000

Nodes:
  # If you *really* like to play Russian roulette
  # with five bullets in the chamber, you can disable
  # strict host key checking. This makes ssh accept
  # unknown and modified host keys.
  #
  # This opens you up to Man in the Middle (MITM) attacks,
  # and is, again, NOT for use on production systems.
  # For test setups it can, however, be convenient.
  # disablestricthostkeychecking: false

Pods:
  # For the "Controller" field this specifies whether the format should be along the lines of
  # mixed: "<kind>.<api_family>/<source>" (for core APIs this is equivalent to "kind") (default)
  # kind: "<kind>/<source>"
  # or
  # skip: "<source>"
  # kind_format: "mixed"

  # Filter out successfully completed pods in Pod List
  # filter_succeeded: false

  # Merge repeated messages; this will display the first occurence
  # and then a count of how many times the message is repeated
  # merge_repeated_messages: false

  # Resources to filter out on the Pod Info page;
  # filtering out resources will impair the navigation
  # between pages and makes it harder to see logical
  # connections between resources
  #
  # This needs to be specified as a list;
  # containers and init_containers cannot be filtered
  # out since there's no way to get to these resources
  # without going through the Pod Info page
  #
  # filter_resources:
  # - "antrea_agent"
  # - "antrea_controller"
  # - "cilium_endpoint"
  # - "config_map"
  # - "controller"
  # - "cronjob"
  # - "event"
  # - "node"
  # - "owner_reference"
  # - "persistent_volume_claim"
  # - "pod_disruption_budget"
  # - "pod_metrics"
  # - "priority_class"
  # - "secret"
  # - "service_account"

  # The number of container log lines shown by default
  # logsize: 4000

  # Default loglevel:
  # - "Emergency"
  # - "Alert"
  # - "Critical"
  # - "Error"
  # - "Warning"
  # - "Notice"
  # - "Info"
  # - "Debug"
  # loglevel: "Info"

  # Fold log messages by default;
  # choosing false here will (try)
  # to expand lines that are valid JSON, YAML, or Python dicts,
  # as well as lines that contain multiple key=value pairs
  # fold_msg: true

  # How to show the log facility:
  # Full -- For files, show the full path (default)
  # Short -- For files, only show the filename and the line#
  # None -- Do not show the facility at all
  # show_facility: "Full"

  # Show timestamps
  # show_timestamps: true

  # Prefix all messages with the severity
  # By default all identifiable severity markers are stripped; severity is instead
  # visualised by log message colour.  From an accessibility point of view this
  # can be suboptimal, so optionally a severity prefix can be used.
  # The prefix is configured through a list of options (with the empty list to disable)
  # severity_prefix: ["PREFIX", "severity_type", "SUFFIX"]
  # Options for severity_type are:
  # "letter" -- A one-letter severity ("W" for warning)
  # "4letter" -- A 4-letter severity ("WARN" for warning)
  # "full" -- Full word severity ("WARNING" for warning)
  # The options are case sensitive:
  # "LETTER" yields upper-case severity
  # "Letter" yields capitalised severity
  # "letter" yields lower-case severity
  # (and no, leTtER or similar will NOT yield random capitalisation)
  #
  # Examples:
  # ["", "Letter", ":"] -- "W:<message>"
  # ["[", "4Letter", "] "] -- "[Warn] <message>"
  # ["[", "FULL", "]"] -- "[WARNING]<message>"
  # severity_prefix: []

  # Show borders and scrollbars
  # show_borders: true

  # Path to directories with locally installed parser files; this can also be used to override
  # the default parsers--any locally provided match rules will apply be applied before
  # the default parsers; prioritised by the order of directories,
  # where a parser rule in the first listed directory would override a playbook in the second,
  # etc.
  #
  # Parser paths must be quoted. To reference parser directories relative to the user's home directory
  # you can use "{HOME}/", so for instance:
  # local_parsers:
  # - "{HOME}/local_parsers"
  # - "/opt/cmt/parsers"
  # - ...

Debug:
  # The image to use when creating ephemeral containers
  # Good choices are, for instance, busybox (simple)
  # or debian (powerful)
  # ephemeral_image: "busybox"

  # The image to use when debugging networking issues
  # Good choices are, for instance, dnsutils (simple)
  # or debian (powerful)
  # network_image: "registry.k8s.io/e2e-test-images/jessie-dnsutils:1.3"

Inventory:
  # Mountpoints to skip in the list of mounts for a host;
  # virtual file systems such as /proc, /sys, etc are always skipped.
  # You can use * as a prefix or suffix (but not infix) to do partial matches
  # mountpoint_skiplist:
  # - "/boot/efi"
  # - "/var/lib/origin/*"
  # - "/run/*"
  # - "*@docker*"

  # Devices to skip in the list of mounts for a host; devices that have no
  # corresponding ansible_device are skipped unless they are NFS mounts
  # (support other network filesystems will be added later)
  # You can use * as a prefix or suffix or both to do partial matches,
  # but infix ("a*b") is not supported
  # device_skiplist:
  # - "loop*"

  # Pinging the hosts to get their status is done using ansible
  # and can thus be a slow operation (roughly 3 seconds!);
  # configure the ping behaviour using this option:
  # "Never" -- Do not ping nodes
  # "Lazy" -- Only ping nodes on refresh
  # "Always" -- Ping nodes on start and on refresh
  # ping_hosts: "Lazy"

Endpoints:
  # By default all addresses and ports are joined
  # into two categories; ready and not ready.
  # When there are a lot of services running on one node,
  # or multiple nodes supporting one service,
  # or even multiple nodes all running multiple services,
  # this can result in extremely long lines.
  #
  # Using this option you can split the subsets into multiple entries.
  # Valid options:
  # "None" -- No expansion occurs (default)
  # "Address" -- Each address gets its own entry
  # "Port" -- Each service gets its own entry
  # "Both" -- Each adress/service combination gets its own entry
  # expand_subsets: "None"

# Use this section to specify preferred versions of packages to install
# using playbooks; having the information here is preferred over hardcoding
# the versions in the playbooks.
Packages:
# - "<package name>":
#     suffix: "-<suffix>"
#     version: "<debian package version>"

Events:
  # For the "regarding" field this specifies whether the format should be along the lines of
  # mixed: "<kind>.<api_family>/<source>" (for core APIs this is equivalent to "kind") (default)
  # kind: "<kind>/<source>"
  # or
  # skip: "<source>"
  # kind_format: "mixed"
