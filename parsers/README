This directory holds parser rules

Every file is a list of rules; even files with only one rule must be a list.
If a parser rule should be applied multiple times, such as when filtering out
timestamps, just specify the same rule again.

If you need multiple different rules for a resource depending on the pod/container
combination, but want them all listed as the same parser you can specify the
same name multiple times. Note, however, that such rules cannot be shown
in the selector.

Note that if image_name starts with "/" the match will first strip the server
from the path to the image. This should be the typical case, since other behaviour
won't allow for images fetched from mirrors. In cases where you want to be able
to treat images from different servers differently you simply match against the full URL.

- name: name of the parser (displayed as parser name)
  show_in_selector: Should the parser be shown in the override selector?
    (default: false; Unless the parser is very generic you always want to set this to false)
  matchkeys:
  - pod_name: (matches using startswith)
    container_name: (matches using startswith)
    image_name: (matches using startswith)
    container_type: (either container or init_container)
  parser_rules:
  - rule
    ...
    ...

Some possible parser rules:
* ts_8601:
  this rule strips timestamps in ISO-8601 *order* (YYYY MM DD HH MM SS); it's flexible
  when it comes to separators, milliseconds, timezones, etc. The timestamps are stripped,
  NOT extracted for later use.
* custom_splitter:
  this rule allows you to split a line into (facility, severity, message) and strip
  away unused parts; facility and severity are optional
* key_value / key_value_with_leading_message:
  these rules allows you to format messages of the form:
  key=value key=value key=value
  and
  message key=value key=value
  respectively
* json:
  this rule (tries to) format messages where the an entire line is a JSON expression
* json_line:
  this rule (tries to) format messages where a JSON expression is spread over multiple lines;
  there's some heuristics involved, and you might need to provide extra information
* glog:
  this rule extracts severity and facility from GLOG style log entries
* override_severity:
  this rule allows you to match by startswith/endswith/regex and override severity
  based on message content; this is useful if you, for instance,
  want to highlight software versions, errors that do not have a useful severity tag, etc.

This is not meant to be a complete list. The best way to figure this out is to look at
the other files in this directory and see how they are structured.
