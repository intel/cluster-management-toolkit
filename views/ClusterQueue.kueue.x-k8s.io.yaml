---
kind: "ClusterQueue"
api_family: "kueue.x-k8s.io"
default_command: "clusterqueues"
command:
- "clusterqs"
- "clusterq"
listview:
  name: "Cluster Queues"
  group: "Batch Scheduling"
  field_indexes:
    Normal:
      fields: ["name", "cohort", "strategy", "admitted_workloads", "pending_workloads", "active", "age"]
  fields:
    active:
      header: "Active:"
      paths:
      - path: "status#conditions"
        pathtype: "items"
        subpath: "status"
        when:
        - key: "type"
          eq: "Active"
      type: "str"
      formatter: "value_mapper"
      formatting:
        mapping:
          mappings:
            "True":
              field_colors:
              - context: "main"
                type: "status_ok"
            "False":
              field_colors:
              - context: "main"
                type: "status_not_ok"
    admitted_workloads:
      header: "Admitted Workloads:"
      path: "status#admittedWorkloads"
      type: "int"
      formatting:
        field_colors:
        - type: "numerical"
      align: "right"
    cohort:
      header: "Cohort:"
      path: "spec#cohort"
      type: "raw"
      default: "<unset>"
      formatter: "value_mapper"
      formatting:
        mapping:
          mappings:
            "<unset>":
              field_colors:
              - context: "types"
                type: "unset"
            __default:
              field_colors:
              - context: "types"
                type: "generic"
    pending_workloads:
      header: "Pending Workloads:"
      path: "status#pendingWorkloads"
      type: "int"
      formatting:
        field_colors:
        - type: "numerical"
      align: "right"
    strategy:
      header: "Strategy:"
      path: "spec#queueingStrategy"
      type: "str"
infoview:
  name: "Cluster Queue Info"
  infopad:
    row_indexes:
      Normal:
        fields: ["namespace_selector", "cohort", "strategy", "flavor_fungibility_header", "flavor_fungibility_when_can_borrow", "flavor_fungibility_when_can_preempt", "preemption_header", "preemption_borrow_within_cohort_header", "preemption_borrow_within_cohort_policy", "preemption_borrow_within_cohort_max_priority_threshold", "preemption_reclaim_within_cohort", "preemption_within_cluster_queue", "stop_policy", "workloads_header", "workloads_admitted", "workloads_pending", "workloads_reserving", "active"]
    rows:
      active:
        header: [["Active:", ["main", "infoheader"]]]
        paths:
        - path: "status#conditions"
          pathtype: "items"
          subpath: "status"
          when:
          - key: "type"
            eq: "Active"
        type: "str"
        formatter: "value_mapper"
        formatting:
          mapping:
            mappings:
              "True":
                field_colors:
                - context: "main"
                  type: "status_ok"
              "False":
                field_colors:
                - context: "main"
                  type: "status_not_ok"
      cohort:
        header: [["Cohort:", ["main", "infoheader"]]]
        path: "spec#cohort"
        type: "raw"
        default: "<unset>"
        formatter: "value_mapper"
        formatting:
          mapping:
            mappings:
              "<unset>":
                field_colors:
                - context: "types"
                  type: "unset"
              __default:
                field_colors:
                - context: "types"
                  type: "generic"
      flavor_fungibility_header:
        header: [["Flavor Fungibility:", ["main", "infoheader"]]]
      flavor_fungibility_when_can_borrow:
        header: [["  When Can Borrow:", ["main", "infoheader"]]]
        path: "spec#flavorFungibility#whenCanBorrow"
        type: "str"
      flavor_fungibility_when_can_preempt:
        header: [["  When Can Preempt:", ["main", "infoheader"]]]
        path: "spec#flavorFungibility#whenCanPreempt"
        type: "str"
      namespace_selector:
        header: [["Namespace Selector:", ["main", "infoheader"]]]
        path: "spec#namespaceSelector#matchNames"
        default: ["<unset>"]
        type: "raw"
        formatter: "list"
      preemption_borrow_within_cohort_header:
        header: [["  Borrow Within Cohort:", ["main", "infoheader"]]]
      preemption_borrow_within_cohort_policy:
        header: [["    Policy:", ["main", "infoheader"]]]
        path: "spec#preemption#borrowWithinCohort#policy"
        type: "str"
      preemption_borrow_within_cohort_max_priority_threshold:
        header: [["    Max Priority Threshold:", ["main", "infoheader"]]]
        path: "spec#preemption#borrowWithinCohort#maxPriorityThreshold"
        default: "<unset>"
        type: "int"
        formatting:
          field_colors:
          - type: "numerical"
      preemption_header:
        header: [["Preemption:", ["main", "infoheader"]]]
      preemption_reclaim_within_cohort:
        header: [["  Reclaim Within Cohort:", ["main", "infoheader"]]]
        path: "spec#preemption#reclaimWithinCohort"
        type: "str"
      preemption_within_cluster_queue:
        header: [["  Within Cluster Queue:", ["main", "infoheader"]]]
        path: "spec#preemption#withinClusterQueue"
        type: "str"
      stop_policy:
        header: [["Stop Policy:", ["main", "infoheader"]]]
        path: "spec#stopPolicy"
        type: "str"
      strategy:
        header: [["Strategy:", ["main", "infoheader"]]]
        path: "spec#queueingStrategy"
        type: "str"
      workloads_header:
        header: [["Workloads:", ["main", "infoheader"]]]
      workloads_admitted:
        header: [["  Admitted:", ["main", "infoheader"]]]
        path: "status#admittedWorkloads"
        type: "int"
        formatting:
          field_colors:
          - type: "numerical"
      workloads_pending:
        header: [["  Pending:", ["main", "infoheader"]]]
        path: "status#pendingWorkloads"
        type: "int"
        formatting:
          field_colors:
          - type: "numerical"
      workloads_reserving:
        header: [["  Reserving:", ["main", "infoheader"]]]
        path: "status#reservingWorkloads"
        type: "int"
        formatting:
          field_colors:
          - type: "numerical"
  listpad:
    listgetter: "generic_listgetter"
    listgetter_args:
      _kind: "LocalQueue"
      _api_family: "kueue.x-k8s.io"
      _pass_obj: true
      filters:
        cluster_queue:
          enabled: true
          allow:
          - key: "spec#clusterQueue"
            values:
              source: "caller"
              path: "metadata#name"
    infogetter: "generic_infogetter"
    on_activation:
      call: "resourceinfodispatch"
      kind: "LocalQueue"
      api_family: "kueue.x-k8s.io"
    field_indexes:
      Normal:
        fields: ["namespace", "name", "cluster_queue", "pending_workloads", "admitted_workloads", "age"]
    fields:
      admitted_workloads:
        header: "Admitted Workloads:"
        path: "status#admittedWorkloads"
        type: "int"
        formatting:
          field_colors:
          - type: "numerical"
        align: "right"
      cluster_queue:
        header: "Cluster Queue:"
        path: "spec#clusterQueue"
        type: "str"
      pending_workloads:
        header: "Pending Workloads:"
        path: "status#pendingWorkloads"
        type: "int"
        formatting:
          field_colors:
          - type: "numerical"
        align: "right"
  shortcuts:
    "Flavors Reservations":
      key: "f"
      read_only: true
      helptext: "Show flavors reservations"
      action: "call"
      action_call: "view_yaml"
      action_args:
        title: "Flavors Reservations"
        _pass_obj: true
        path: "status#flavorsReservation"
        include_root: true
    "Flavors Usage":
      key: "f"
      modifier: "shift"
      read_only: true
      helptext: "Show flavors usage"
      action: "call"
      action_call: "view_yaml"
      action_args:
        title: "Flavors Usage"
        _pass_obj: true
        path: "status#flavorsUsage"
        include_root: true
    "Resource Groups":
      key: "r"
      modifier: "shift"
      read_only: true
      helptext: "Show resource groups"
      action: "call"
      action_call: "view_yaml"
      action_args:
        title: "Resource Groups"
        _pass_obj: true
        path: "spec#resourceGroups"
        include_root: true
