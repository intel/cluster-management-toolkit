#! /bin/sh
# vim: filetype=python
# pylint: disable-next=anomalous-backslash-in-string,line-too-long
''''eval version=$( ls /usr/bin | grep 'python3\.[0-9]*$' | sed -e 's/.*\.\([0-9]*\)$/\1/' | sort -nr | head -n1 ) && [ ${version} ] && [ ${version} -ge 8 ] && exec /usr/bin/python3.${version} "$0" "$@" || exec /usr/bin/env python3 "$0" "$@"' #'''
__doc__ = "The above hack is to handle distros that don't have /usr/bin/python3 point to the latest version of python3 they provide"
# Requires: python3 (>= 3.8)

"""
This program installs Cluster Management Toolkit for Kubernetes
(and optionally its dependencies)

For usage, see:
	./cmt-install help
"""

import errno
import os
from pathlib import Path
import re
import subprocess
from subprocess import PIPE, STDOUT
import sys
from typing import Dict, List, Set, Tuple, Union

from cmttypes import deep_get, DictPath, FilePath, SecurityPolicy
from cmtpaths import BASH_COMPLETION_BASE_DIR, BASH_COMPLETION_DIR, BASH_COMPLETION_DIRNAME, BINDIR, HOMEDIR, CMTDIR
from cmtpaths import CMT_LOGS_DIR, DEPLOYMENT_DIR, ANSIBLE_DIR, ANSIBLE_LOG_DIR, CMT_CONFIG_FILE_DIR, CMT_HOOKS_DIR
from cmtpaths import ANSIBLE_PLAYBOOK_DIR, CMT_CONFIG_FILE, PARSER_DIR, THEME_DIR, VIEW_DIR
from cmtpaths import ANSIBLE_PLAYBOOK_DIRNAME, CMT_CONFIG_FILENAME, PARSER_DIRNAME, THEME_DIRNAME, VIEW_DIRNAME

from cmtio import execute_command_with_response, secure_copy, secure_mkdir, secure_symlink, secure_which

from commandparser import parse_commandline
from ansithemeprint import ANSIThemeString, ansithemeprint, ansithemeinput

import about
PROGRAMDESCRIPTION = f"Setup {about.PROGRAM_SUITE_FULL_NAME}"
PROGRAMAUTHORS = "Written by David Weinehall."

DIRECTORIES = [
	(BINDIR, 0o755),
	(CMTDIR, 0o755),
	(CMT_LOGS_DIR, 0o700),
	(DEPLOYMENT_DIR, 0o755),
	(ANSIBLE_DIR, 0o755),
	(ANSIBLE_LOG_DIR, 0o700),
	(CMT_CONFIG_FILE_DIR, 0o755),
	(CMT_HOOKS_DIR, 0o755),
	(FilePath(os.path.join(CMT_HOOKS_DIR, "pre-upgrade.d")), 0o755),
	(FilePath(os.path.join(CMT_HOOKS_DIR, "post-upgrade.d")), 0o755),
	(BASH_COMPLETION_BASE_DIR, 0o755),
	(BASH_COMPLETION_DIR, 0o755),
]

EXECUTABLE_SYMLINKS = [
	# These are Python scripts
	(FilePath(os.path.join(os.getcwd(), "cmtadm")), FilePath(os.path.join(BINDIR, "cmtadm"))),
	(FilePath(os.path.join(os.getcwd(), "cmtinv")), FilePath(os.path.join(BINDIR, "cmtinv"))),
	(FilePath(os.path.join(os.getcwd(), "cmt")), FilePath(os.path.join(BINDIR, "cmt"))),
	(FilePath(os.path.join(os.getcwd(), "cmu")), FilePath(os.path.join(BINDIR, "cmu"))),
]

MISC_SYMLINKS = [
	(FilePath(os.path.join(os.getcwd(), ANSIBLE_PLAYBOOK_DIRNAME)), ANSIBLE_PLAYBOOK_DIR),
	(FilePath(os.path.join(os.getcwd(), PARSER_DIRNAME)), PARSER_DIR),
	(FilePath(os.path.join(os.getcwd(), THEME_DIRNAME)), THEME_DIR),
	(FilePath(os.path.join(os.getcwd(), VIEW_DIRNAME)), VIEW_DIR),
	(FilePath(os.path.join(os.getcwd(), BASH_COMPLETION_DIRNAME, "cmt")), FilePath(os.path.join(BASH_COMPLETION_DIR, "cmt"))),
	(FilePath(os.path.join(os.getcwd(), BASH_COMPLETION_DIRNAME, "cmtadm")), FilePath(os.path.join(BASH_COMPLETION_DIR, "cmtadm"))),
	(FilePath(os.path.join(os.getcwd(), BASH_COMPLETION_DIRNAME, "cmtinv")), FilePath(os.path.join(BASH_COMPLETION_DIR, "cmtinv"))),
	(FilePath(os.path.join(os.getcwd(), BASH_COMPLETION_DIRNAME, "cmu")), FilePath(os.path.join(BASH_COMPLETION_DIR, "cmu"))),
]

# Distros in always-fallback-distros will always use pip
# Distros in never-fallback-distros will never use pip
PACKAGES_WITH_PIP_FALLBACK = {
	"python3-ansible-runner": {
		"fallback": "ansible-runner",
		"always-fallback-distros": [
			"suse",
			"fedora",
			"rhel",
		],
	},
	"python3-cryptography": {
		"fallback": "cryptography",
		"always-fallback-distros": [
			"suse",
			# Until RHEL 9
			"fedora",
			"rhel",
		],
		"never-fallback-distros": [
			"debian",
		],
	},
	"python3-natsort": {
		"fallback": "natsort",
		"always-fallback-distros": [
			"suse",
			"fedora",
			"rhel",
		],
		"never-fallback-distros": [
			"debian",
		],
	},
	"python3-paramiko": {
		"fallback": "paramiko",
		"always-fallback-distros": [
			"suse",
			"fedora",
			"rhel",
		],
		"never-fallback-distros": [
			"debian",
		],
	},
	"python3-pyyaml": {
		"fallback": "PyYAML",
		"distros": [
			# Until RHEL 9
			"fedora",
			"rhel",
		],
		"always-fallback-distros": [
			# Until RHEL 9
			"fedora",
			"rhel",
		],
	},
	"python3-ujson": {
		"fallback": "ujson",
		"always-fallback-distros": [
			"suse",
			"fedora",
			"rhel",
		],
		"never-fallback-distros": [
			"debian",
		],
	},
	"python3-urllib3": {
		"recommended minimum": "1.26.0",
		"reason": "TLSv1.1 is still enabled in older versions",
		"fallback": "urllib3",
		"always-fallback-distros": [
			"suse",
			# Until RHEL 9
			"fedora",
			"rhel",
		],
		"never-fallback-distros": [
			"debian",
		],
	},
	"python3-validators": {
		"fallback": "validators",
		"always-fallback-distros": [
			"fedora",
			"rhel",
		],
		"never-fallback-distros": [
			"debian",
		],
	},
	"python3-yaml": {
		"fallback": "PyYAML",
		"distros": [
			"debian",
			"suse",
		],
		"always-fallback-distros": [
			"suse",
		],
		"never-fallback-distros": [
			"debian",
		],
	},
}

PACKAGES_WITHOUT_FALLBACK = {
	"ansible": {
		"distros": [
			"debian",
			"suse",
		],
	},
	"ansible-core": {
		"distros": [
			"fedora",
			"rhel",
		],
	},
	"python3-pip": {
		"distros": [
			"debian",
		],
	},
	"sshpass": {},
}

CONFIGURATION_FILES = [
	(FilePath(os.path.join(os.getcwd(), CMT_CONFIG_FILENAME)), CMT_CONFIG_FILE, 0o644)
]

def create_directories(directories: List[Tuple[FilePath, int]], verbose: bool = False) -> None:
	"""
	Batch create directories
	If a directory already exists it is silently ignored

		Parameters:
			directories (list[(FilePath, int)]): A list of directories (path, permissions) to create
			verbose (bool): Be more verbose
	"""

	for directory, permissions in directories:
		secure_mkdir(directory, permissions = permissions, verbose = verbose)

def create_symlinks(symlinks: List[Tuple[FilePath, FilePath]], verbose: bool = False) -> None:
	"""
	Batch create symlinks
	If a symlink already exists it is *replaced*

		Parameters:
			symlinks (list[(FilePath, FilePath)]): A list of symlinks (full path) to create; (src, dst)
			verbose (bool): Be more verbose
	"""

	for src, dst in symlinks:
		_violations = secure_symlink(src, dst, verbose = verbose, replace_existing = True)

def copy_files(files: List[Tuple[FilePath, FilePath, int]], verbose: bool = False) -> None:
	"""
	Batch copy files
	If a file already exists it is silently ignored

		Parameters:
			files (list[(FilePath, FilePath, int)]): A list of files (full path) to copy; (src, dst, permissions)
			verbose (bool): Be more verbose
	"""

	for src, dst, permissions in files:
		_violations = secure_copy(src, dst, verbose = verbose, permissions = permissions)

# pylint: disable-next=unused-argument
def install_software_suse(packages: Union[Dict, Set], verbose: bool = False) -> None:
	"""
	Batch install SUSE packages

		Parameters:
			packages (union(dict, set)): A dict or set of packages to install
			verbose (bool): Unused
	"""

	try:
		sudo_path = secure_which(FilePath("/usr/bin/sudo"), fallback_allowlist = [],
					 security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("sudo", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	try:
		zypper_path = secure_which(FilePath("/usr/bin/zypper"), fallback_allowlist = [],
					   security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("zypper", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	if isinstance(packages, set):
		packages = dict.fromkeys(packages, {})
	args = [sudo_path, zypper_path, "-n", "install", "-y"] + list(packages.keys())

	_retval = subprocess.run(args, check = False).returncode

	# Check if the installed versions are new enough
	for pkg, data in packages.items():
		recommended_minimum = deep_get(data, DictPath("recommended minimum"), "")
		reason = deep_get(data, DictPath("reason"), "")
		if len(recommended_minimum) == 0:
			continue

		args = [zypper_path, "info"] + [pkg]
		result = subprocess.run(args, stdout = PIPE, stderr = STDOUT, check = False)
		pkg_version = None
		compiled_regex = re.compile(r"^.*Version: (.+?)")
		for line in result.stdout.decode("utf-8").splitlines():
			tmp = compiled_regex.match(line)
			if tmp is None:
				continue

			pkg_version = tmp[1]
			break
		if pkg_version is not None:
			args = [zypper_path, "versioncmp", pkg_version, recommended_minimum]
			result = subprocess.run(args, stdout = PIPE, stderr = STDOUT, check = False)
			if "older" in result.stdout.decode("utf-8").splitlines():
				ansithemeprint([ANSIThemeString("\nWarning:", "warning"),
						ANSIThemeString(" The installed version of package ", "default"),
						ANSIThemeString(f"{pkg}", "path"),
						ANSIThemeString(" (", "default"),
						ANSIThemeString(f"{pkg_version}", "version"),
						ANSIThemeString(") is older than the recommended minimum version: ", "default"),
						ANSIThemeString(f"{recommended_minimum}", "version")], stderr = True)
				ansithemeprint([ANSIThemeString("   Risk:", "emphasis"),
						ANSIThemeString(f" {reason}\n", "default")], stderr = True)

# pylint: disable-next=unused-argument
def install_software_fedora(packages: Union[Dict, Set], verbose: bool = False) -> None:
	"""
	Batch install Red Hat (Fedora) packages

		Parameters:
			packages (union(dict, set)): A dict or set of packages to install
			verbose (bool): Unused
	"""

	try:
		sudo_path = secure_which(FilePath("/usr/bin/sudo"), fallback_allowlist = [],
					 security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("sudo", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	try:
		yum_path = secure_which(FilePath("/usr/bin/yum"), fallback_allowlist = ["/usr/bin"],
					security_policy = SecurityPolicy.ALLOWLIST_RELAXED)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("yum", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	rpmdev_vercmp_path = None

	try:
		rpmdev_vercmp_path = secure_which(FilePath("/usr/bin/rpmdev-vercmp"), fallback_allowlist = [],
						  security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Warning", "warning"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("rpmdev-vercmp", "path"),
				ANSIThemeString("; will not be able to compare package versions.", "default")], stderr = True)

	if isinstance(packages, set):
		packages = dict.fromkeys(packages, {})
	args = [sudo_path, yum_path, "-y", "install"] + list(packages.keys())

	_retval = subprocess.run(args, check = False).returncode

	# Check if the installed versions are new enough
	for pkg, data in packages.items():
		recommended_minimum = deep_get(data, DictPath("recommended minimum"), "")
		reason = deep_get(data, DictPath("reason"), "")
		if len(recommended_minimum) == 0:
			continue

		args = [yum_path, "info"] + [pkg]
		result = subprocess.run(args, stdout = PIPE, stderr = STDOUT, check = False)
		pkg_version = None
		compiled_regex = re.compile(r"^.*Version: (.+?)")
		for line in result.stdout.decode("utf-8").splitlines():
			tmp = compiled_regex.match(line)
			if tmp is None:
				continue

			pkg_version = tmp[1]
			break

		if pkg_version is not None and rpmdev_vercmp_path is not None:
			args = [yum_path, "versioncmp", pkg_version, recommended_minimum]
			result = subprocess.run(args, stdout = PIPE, stderr = STDOUT, check = False)
			if "older" in result.stdout.decode("utf-8").splitlines():
				ansithemeprint([ANSIThemeString("\nWarning:", "warning"),
						ANSIThemeString(" The installed version of package ", "default"),
						ANSIThemeString(f"{pkg}", "path"),
						ANSIThemeString(" (", "default"),
						ANSIThemeString(f"{pkg_version}", "version"),
						ANSIThemeString(") is older than the recommended minimum version: ", "default"),
						ANSIThemeString(f"{recommended_minimum}", "version")], stderr = True)
				ansithemeprint([ANSIThemeString("   Risk:", "emphasis"),
						ANSIThemeString(f" {reason}\n", "default")], stderr = True)

# pylint: disable-next=unused-argument
def install_software_deb(packages: Dict, verbose: bool = False) -> None:
	"""
	Batch install Debian packages

		Parameters:
			packages (union(dict, set)): A dict or set of packages to install
			verbose (bool): Unused
	"""

	try:
		sudo_path = secure_which(FilePath("/usr/bin/sudo"), fallback_allowlist = [],
					 security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("sudo", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	try:
		apt_get_path = secure_which(FilePath("/usr/bin/apt-get"), fallback_allowlist = [],
					    security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("apt-get", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	args = [sudo_path, apt_get_path, "install"] + list(packages.keys())

	_retval = subprocess.run(args, check = False).returncode

	try:
		apt_cache_path = secure_which(FilePath("/usr/bin/apt-cache"), fallback_allowlist = [],
					      security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("apt-cache", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	try:
		dpkg_path = secure_which(FilePath("/usr/bin/dpkg"), fallback_allowlist = [],
					 security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("dpkg", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	# Check if the installed versions are new enough
	for pkg, data in packages.items():
		recommended_minimum = deep_get(data, DictPath("recommended minimum"), "")
		reason = deep_get(data, DictPath("reason"), "")
		if len(recommended_minimum) == 0:
			continue
		args = [apt_cache_path, "policy"] + [pkg]
		result = subprocess.run(args, stdout = PIPE, stderr = STDOUT, check = False)
		pkg_version = None
		compiled_regex = re.compile(r"^  Installed: (.+)")
		for line in result.stdout.decode("utf-8").splitlines():
			tmp = compiled_regex.match(line)
			if tmp is None:
				continue

			pkg_version = tmp[1]
			break
		if pkg_version is not None:
			args = [dpkg_path, "--compare-versions", recommended_minimum, "lt", pkg_version]
			retval = subprocess.run(args, check = False).returncode
			if retval == 1:
				ansithemeprint([ANSIThemeString("\nWarning:", "warning"),
						ANSIThemeString(" The installed version of package ", "default"),
						ANSIThemeString(f"{pkg}", "path"),
						ANSIThemeString(" (", "default"),
						ANSIThemeString(f"{pkg_version}", "version"),
						ANSIThemeString(") is older than the recommended minimum version: ", "default"),
						ANSIThemeString(f"{recommended_minimum}", "version")], stderr = True)
				ansithemeprint([ANSIThemeString("   Risk:", "emphasis"),
						ANSIThemeString(f" {reason}\n", "default")], stderr = True)

def trim_package_list(packages: Dict, distro: str = "", fallback: bool = False) -> Dict:
	"""
	Given a dict of packages, remove any that shouldn't be installed

		Parameters:
			packages (union(dict, set)): A dict of packages to install
			distro (str): Supported options "debian", "fedora" "rhel", "suse"
			fallback (bool): Is a package list with fallbacks being processed
		Returns:
			trimmed_packages (dict): The trimmed dict of packages
	"""

	trimmed_packages: Dict = {}

	for pkg, data in packages.items():
		distros = deep_get(data, DictPath("distros"), [])
		# pylint: disable-next=unused-variable
		always_fallback_distros = deep_get(data, DictPath("always-fallback-distros"), [])
		never_fallback_distros = deep_get(data, DictPath("never-fallback-distros"), [])

		if len(distros) > 0 and distro not in distros:
			continue
		trimmed_packages[pkg] = data
		if len(never_fallback_distros) > 0 and distro in never_fallback_distros and fallback:
			trimmed_packages[pkg].pop("fallback")

	return trimmed_packages

# pylint: disable-next=unused-argument
def install_software(packages: Dict, verbose: bool = False, distro: str = "") -> None:
	"""
	Batch install packages

		Parameters:
			packages (union(dict, set)): A dict of packages to install
			verbose (bool): Unused
			distro (str): Supported options "debian", "suse"
	"""

	if distro == "debian":
		install_software_deb(packages = packages, verbose = verbose)
	elif distro == "suse":
		install_software_suse(packages = packages, verbose = verbose)
	elif distro in ("fedora", "rhel"):
		install_software_fedora(packages = packages, verbose = verbose)

# pylint: disable-next=unused-argument
def install_software_with_pip(packages: List[str], pip_proxy: str = "", verbose: bool = False) -> None:
	"""
	Installs Python modules using pip

		Parameters:
			packages (list[str]): A list of packages to install
			pip_proxy (str): A proxy to use when installing packages
			verbose (bool): Unused
	"""

	try:
		pip3_path = secure_which(FilePath("pip3"), fallback_allowlist = ["/bin", "/usr/bin"],
					 security_policy = SecurityPolicy.ALLOWLIST_RELAXED)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("pip3", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)
	args = [pip3_path, "install"]
	if len(pip_proxy) > 0:
		args += ["--proxy", pip_proxy]
	args += list(packages)
	_retval = subprocess.run(args, check = False).returncode

# pylint: disable-next=unused-argument
def install_software_with_pip_fallback(packages: Dict, pip_proxy: str = "",
						verbose: bool = False, dryrun: bool = False, distro: str = "") -> Tuple[List[str], List[str]]:
	"""
	Batch install packages with pip fallback
	This function tries to install a Python module from a package;
	if that package does not exist it installs the pip version of the module instead

		Parameters:
			packages (union(dict, set)): A dict of packages to install
			pip_proxy (str): A proxy to use when installing packages
			verbose (bool): Unused
			dryrun (bool): Simulate a run without installing packages
			distro (str): Supported options "debian", "suse"
		Returns:
			(pkgs, fallbacks):
				pkgs (list[str]): Packages that were, or would be, installed as packages
				fallbacks (list[str]): Packages that were, or would be, installed using pip
	"""

	pkgs: Dict = {}
	fallbacks: Set[str] = set()

	if distro == "debian":
		try:
			apt_cache_path = secure_which(FilePath("/usr/bin/apt-cache"), fallback_allowlist = [],
						      security_policy = SecurityPolicy.STRICT)
		except FileNotFoundError:
			ansithemeprint([ANSIThemeString("Critical", "critical"),
					ANSIThemeString(": Could not find ", "default"),
					ANSIThemeString("apt-cache", "path"),
					ANSIThemeString("; aborting.", "default")], stderr = True)
			sys.exit(errno.ENOENT)

		args = [apt_cache_path, "madison"] + list(packages.keys())
		response = execute_command_with_response(args)
		split_response = response.splitlines()

		for line in split_response:
			_pkg = line.split(' ', 1)
			# If we explicitly specify distros there are different names
			# for the same package in different distros, so skip if irrelevant
			if "distros" in deep_get(packages, DictPath(f"{_pkg[0]}"), {}) and distro not in deep_get(packages, DictPath(f"{_pkg[0]}#distros"), []):
				continue
			if distro not in deep_get(packages, DictPath(f"{_pkg[0]}#always-fallback-distros"), []):
				if _pkg[0] in packages.keys() and _pkg[0] not in pkgs:
					pkgs[_pkg[0]] = packages[_pkg[0]]

		for pkg in packages:
			if pkg not in pkgs:
				fallbacks.add(deep_get(packages, DictPath(f"{pkg}#fallback")))
	elif distro == "suse":
		try:
			zypper_path = secure_which(FilePath("/usr/bin/zypper"), fallback_allowlist = [],
						   security_policy = SecurityPolicy.STRICT)
		except FileNotFoundError:
			ansithemeprint([ANSIThemeString("Critical", "critical"),
					ANSIThemeString(": Could not find ", "default"),
					ANSIThemeString("zypper", "path"),
					ANSIThemeString("; aborting.", "default")], stderr = True)
			sys.exit(errno.ENOENT)

		args = [zypper_path, "info"] + list(packages.keys())
		response = execute_command_with_response(args)
		split_response = response.splitlines()

		information_for_regex = re.compile(r"^Information for package (.+):$")
		not_found_regex = re.compile(r"^package '([^']+)' not found\.$")

		for line in split_response:
			tmp = information_for_regex.match(line)
			if tmp is not None:
				if distro not in deep_get(packages[tmp[1]], DictPath("always-fallback-distros"), []):
					if tmp[1] not in pkgs:
						pkgs[tmp[1]] = packages[tmp[1]]
					continue
				fallbacks.add(deep_get(packages[tmp[1]], DictPath("fallback")))
				continue
			tmp = not_found_regex.match(line)
			if tmp is not None:
				fallbacks.add(deep_get(packages[tmp[1]], DictPath("fallback")))
	elif distro in ("fedora", "rhel"):
		try:
			yum_path = secure_which(FilePath("/usr/bin/yum"), fallback_allowlist = ["/usr/bin"],
						security_policy = SecurityPolicy.ALLOWLIST_RELAXED)
		except FileNotFoundError:
			ansithemeprint([ANSIThemeString("Critical", "critical"),
					ANSIThemeString(": Could not find ", "default"),
					ANSIThemeString("yum", "path"),
					ANSIThemeString("; aborting.", "default")], stderr = True)
			sys.exit(errno.ENOENT)

		args = [yum_path, "list", "-q"] + list(packages.keys())
		response = execute_command_with_response(args)
		split_response = response.splitlines()

		information_for_regex = re.compile(r"^([^.]+).+$")
		not_found_regex = re.compile(r"^Error: No matching Packages to list$")

		all_packages = set(packages.keys())
		found_packages = set()

		if split_response[0] != "Error: No matching Packages to list":
			for line in split_response:
				if line.startswith("Installed Packages"):
					continue
				tmp = information_for_regex.match(line)

				if tmp is not None:
					if distro not in deep_get(packages[tmp[1]], DictPath("always-fallback-distros"), []):
						if tmp[1] not in pkgs:
							pkgs[tmp[1]] = packages[tmp[1]]
						continue
					fallbacks.add(deep_get(packages[tmp[1]], DictPath("fallback")))
					found_packages.add(tmp[1])
					continue
		for missing in all_packages.difference(found_packages):
			fallbacks.add(deep_get(packages[missing], DictPath("fallback")))

	if len(pkgs) > 0 and not dryrun:
		install_software(pkgs, verbose = verbose, distro = distro)

	if len(fallbacks) > 0 and not dryrun:
		install_software_with_pip(list(fallbacks), pip_proxy = pip_proxy, verbose = verbose)

	return list(pkgs), list(fallbacks)

# pylint: disable-next=unused-argument
def install(options: List[Tuple[str, str]], args: List[str]) -> int:
	"""
	Create directories, install configuration files, create symlinks,
	and optionally install packages necessary to run CMT

		Parameters:
			options (list[(opt, optarg)]): Options to use when executing this action
			args (list[str]): Options to use when executing this action
		Returns:
			status (int): 0 on success, errno on failure
	"""

	verbose: bool = False
	install_dependencies: bool = True
	confirm: bool = True
	allow_fallback: bool = True
	pip_proxy = ""

	bindir_exists = Path(BINDIR).is_dir()

	for opt, optarg in options:
		if opt == "--verbose":
			verbose = True
		elif opt == "--no-dependencies":
			install_dependencies = False
		elif opt == "--no-fallback":
			allow_fallback = False
		elif opt == "--pip-proxy":
			pip_proxy = optarg
		elif opt == "-Y":
			confirm = False

	# Find out what distro this is run on
	try:
		distro_path = secure_which(FilePath("/etc/os-release"), fallback_allowlist = ["/usr/lib", "/lib"],
					   security_policy = SecurityPolicy.ALLOWLIST_STRICT, executable = False)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Error:", "error"),
				ANSIThemeString(" Cannot find an “", "default"),
				ANSIThemeString("os-release", "path"),
				ANSIThemeString("“ file to determine OS distribution; aborting.", "default")])
		sys.exit(errno.ENOENT)

	distro = None

	distro_id_like = ""
	distro_id = ""

	with open(distro_path, "r", encoding = "utf-8") as f:
		lines = f.readlines()
		for line in lines:
			line = line.strip()
			key, value = line.split("=")
			value = value.strip("\"'")
			if key == "ID_LIKE":
				distro_id_like = value
				# If there's an ID_LIKE in the file we're done
				break
			if key == "ID":
				distro_id = value
				# But if we've only found an ID we cannot be sure
				# that there won't be an ID_LIKE later on

	if len(distro_id_like) > 0:
		distro = distro_id_like
	else:
		distro = distro_id

	if distro is None or len(distro) == 0:
		ansithemeprint([ANSIThemeString("Error:", "error"),
				ANSIThemeString(" Cannot read ID_LIKE from “", "default"),
				ANSIThemeString("os-release", "path"),
				ANSIThemeString("“ file to determine OS distribution; aborting.", "default")])
		sys.exit(errno.ENOENT)

	if distro == "suse opensuse":
		distro = "suse"

	if distro not in ("debian", "suse", "rhel", "fedora"):
		ansithemeprint([ANSIThemeString("Error:", "error"),
				ANSIThemeString(" distro “", "default"),
				ANSIThemeString(f"{distro}", "path"),
				ANSIThemeString("“ is not supported.", "default")])
		ansithemeprint([ANSIThemeString("Currently only distros based on ", "default"),
				ANSIThemeString("Debian", "programname"),
				ANSIThemeString(", ", "default"),
				ANSIThemeString("Red Hat", "programname"),
				ANSIThemeString(", or ", "default"),
				ANSIThemeString("SUSE", "programname"),
				ANSIThemeString(" are supported.", "default")])
		sys.exit(errno.ENOTSUP)

	if distro == "suse":
		ansithemeprint([ANSIThemeString("Note:", "note"),
				ANSIThemeString(" on SUSE distros older than OpenSUSE 16 you need to install “", "default"),
				ANSIThemeString("pip", "programname"),
				ANSIThemeString("“ manually;", "default")])
		ansithemeprint([ANSIThemeString("depending on your SP-level this may be, for instance, “", "default"),
				ANSIThemeString("python310-pip", "programname"),
				ANSIThemeString("“.\n", "default")])
	elif distro in ("fedora", "rhel"):
		ansithemeprint([ANSIThemeString("Note:", "note"),
				ANSIThemeString(" on Red Hat distros older than RHEL 9 you need to install a newer version", "default")])
		ansithemeprint([ANSIThemeString("of python3 and set it as the default version (using ", "default"),
				ANSIThemeString("update-alternatives", "programname"),
				ANSIThemeString(").\n", "default")])

	pkgs_without_fallback: Dict = trim_package_list(packages = PACKAGES_WITHOUT_FALLBACK, distro = distro)
	pkgs_with_pip_fallback: Dict = trim_package_list(packages = PACKAGES_WITH_PIP_FALLBACK, distro = distro, fallback = True)

	if confirm:
		ansithemeprint([ANSIThemeString("Important:", "warning"),
				ANSIThemeString(" The following actions will be taken that will modify the system:", "default")])
		pkgs: List[str] = []
		pkgs_fallback: List[str] = []

		if install_dependencies:
			pkgs, pkgs_fallback = install_software_with_pip_fallback(pkgs_with_pip_fallback, dryrun = True, distro = distro)
			ansithemeprint([ANSIThemeString("\n• ", "separator"),
					ANSIThemeString("Install the following system software (+ any dependencies):", "action")])
			ansithemeprint([ANSIThemeString("  Note", "warning"),
					ANSIThemeString(": This requires sudo permissions", "emphasis")])
			for pkg in pkgs_without_fallback:
				ansithemeprint([ANSIThemeString(f"    {pkg}", "path")])
			for pkg in pkgs:
				ansithemeprint([ANSIThemeString(f"    {pkg}", "path")])
			for pkg in pkgs_fallback:
				ansithemeprint([ANSIThemeString(f"    {pkg}", "path"),
						ANSIThemeString(" (Using package from PIP)", "emphasis")])

		ansithemeprint([ANSIThemeString("\n• ", "separator"),
				ANSIThemeString("Create the following new directories:", "action")])
		for name, _permissions in DIRECTORIES:
			ansithemeprint([ANSIThemeString(f"    {name}", "path")])
		ansithemeprint([ANSIThemeString("\n• ", "separator"),
				ANSIThemeString("Install the following configuration files:", "action")])
		for src, dst, _permissions in CONFIGURATION_FILES:
			ansithemeprint([ANSIThemeString(f"     {dst}", "path")])
		ansithemeprint([ANSIThemeString("\n• ", "separator"),
				ANSIThemeString("Create the following symlinks:", "action")])
		for src, dst in MISC_SYMLINKS:
			ansithemeprint([ANSIThemeString(f"    {src}", "path"),
					ANSIThemeString(" ⇨ ", "emphasis"),
					ANSIThemeString(f"{dst}", "path")])
		for src, dst in EXECUTABLE_SYMLINKS:
			ansithemeprint([ANSIThemeString(f"    {src}", "path"),
					ANSIThemeString(" ⇨ ", "emphasis"),
					ANSIThemeString(f"{dst}", "path")])

		if install_dependencies and not allow_fallback and len(pkgs_fallback) > 0:
			ansithemeprint([ANSIThemeString("\n", "default"),
					ANSIThemeString("Error", "error"),
					ANSIThemeString(": Installation would require fallback to PIP, but “", "default"),
					ANSIThemeString("--no-fallback", "option"),
					ANSIThemeString("“ was specified; aborting.", "default")], stderr = True)
			sys.exit(errno.EINVAL)

		retval = ansithemeinput([ANSIThemeString("\nInstall ", "default"),
					 ANSIThemeString(about.PROGRAM_SUITE_NAME, "programname"),
					 ANSIThemeString("? [y/", "default"),
					 ANSIThemeString("N", "emphasis"),
					 ANSIThemeString("]: ", "default")])
		if retval.lower() not in ("y", "yes"):
			ansithemeprint([ANSIThemeString("\nAborting:", "error"),
					ANSIThemeString(" User stopped installation.", "default")], stderr = True)
			sys.exit(errno.EINTR)

	if install_dependencies:
		install_software(pkgs_without_fallback, verbose = verbose, distro = distro)
		install_software_with_pip_fallback(pkgs_with_pip_fallback, verbose = verbose, pip_proxy = pip_proxy, distro = distro)

	create_directories(directories = DIRECTORIES, verbose = verbose)
	copy_files(files = CONFIGURATION_FILES, verbose = verbose)
	create_symlinks(symlinks = MISC_SYMLINKS + EXECUTABLE_SYMLINKS, verbose = verbose)

	if not bindir_exists:
		ansithemeprint([ANSIThemeString("\nWarning", "warning"),
				ANSIThemeString(": ", "default"),
				ANSIThemeString(f"{BINDIR}", "path"),
				ANSIThemeString(" did not exist before installation; you will most likely need to ", "default"),
				ANSIThemeString("logout and login again (or spawn a new shell/terminal) to have it added to ", "default"),
				ANSIThemeString("$PATH", "argument"),
				ANSIThemeString(".", "default")])

	return 0

COMMANDLINE = {
	# Default command
	"__global_options": {
		"command": ["__global_options"],
		"description": [ANSIThemeString("", "")],
		"options": {
			"--no-dependencies": {
				"description": [ANSIThemeString("Do not install dependencies", "description")],
			},
			"--no-fallback": {
				"description": [ANSIThemeString("Do not fallback to Python packages from PIP", "description")],
				"extended_description": [
					[ANSIThemeString("If a distribution package cannot be found", "description")],
					[ANSIThemeString("cmt-install", "programname"),
					 ANSIThemeString(" will, by default, install packages", "description")],
					[ANSIThemeString("using PIP.", "description")],
					[ANSIThemeString("This option can be used to disable that behaviour", "description")],
				],
			},
			"--pip-proxy": {
				"values": [ANSIThemeString("PROXY", "argument")],
				"description": [ANSIThemeString("Proxy to use for PIP", "description")],
				"extended_description": [
					[ANSIThemeString("HTTPS proxy to use if fallback packages are", "description")],
					[ANSIThemeString("installed from PIP. Format:", "description")],
					[ANSIThemeString("[user:passwd@]proxy:port", "argument")],
				],
				"requires_arg": True,
			},
			"--verbose": {
				"description": [ANSIThemeString("Be more verbose", "description")],
			},
			"-Y": {
				"description": [ANSIThemeString("Do not ask for confirmation", "description")],
			},
		},
	},
	"__default": {
		"command": ["__default"],
		"description": [ANSIThemeString("", "")],
		"callback": install,
	},
	"spacer1": {
		"command": [""],
		"description": [ANSIThemeString("", "")],
	},
}

def main() -> int:
	"""
	Main function for the program
	"""

	# Before doing anything else, make sure that the user is not running as root
	if os.geteuid() == 0:
		sys.exit("CRITICAL: This program should not be run as the root user; aborting.")

	homepath = Path(HOMEDIR)
	path_stat = homepath.stat()
	path_permissions = path_stat.st_mode & 0o777

	if path_permissions & 0o002:
		sys.exit(f"CRITICAL: The destination directory {HOMEDIR} is world-writable; aborting.")

	command, options, args = parse_commandline(about.INSTALL_PROGRAM_NAME, about.INSTALL_PROGRAM_VERSION, PROGRAMDESCRIPTION, PROGRAMAUTHORS, sys.argv,
						   COMMANDLINE, default_command = "__default", theme = FilePath(os.path.join(os.getcwd(), "themes", "default.yaml")))

	return command(options, args)

if __name__ == "__main__":
	main()
