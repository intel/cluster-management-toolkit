#! /usr/bin/env python3
# Requires: python3 (>= 3.8)

"""
This program installs Cluster Management Toolkit for Kubernetes
(and optionally its dependencies)

For usage, see:
	./cmt-install help
"""

import errno
import os
from pathlib import Path
import re
import subprocess
from subprocess import PIPE, STDOUT
import sys
from typing import Dict, List, Set, Tuple

from cmttypes import deep_get, DictPath, FilePath, LogLevel, SecurityPolicy
from cmtpaths import BINDIR, HOMEDIR, CMTDIR, CMT_LOGS_DIR, DEPLOYMENT_DIR, ANSIBLE_DIR, ANSIBLE_LOG_DIR, CMT_CONFIG_FILE_DIR, CMT_HOOKS_DIR
from cmtpaths import ANSIBLE_PLAYBOOK_DIR, CMT_CONFIG_FILE, PARSER_DIR, THEME_DIR, VIEW_DIR
from cmtpaths import ANSIBLE_PLAYBOOK_DIRNAME, CMT_CONFIG_FILENAME, PARSER_DIRNAME, THEME_DIRNAME, VIEW_DIRNAME

from cmtio import execute_command_with_response, secure_copy, secure_mkdir, secure_symlink, secure_which

from commandparser import parse_commandline
from ansithemeprint import ANSIThemeString, ansithemeprint, ansithemeinput

import about
PROGRAMDESCRIPTION = f"Setup {about.PROGRAM_SUITE_FULL_NAME}"
PROGRAMAUTHORS = "Written by David Weinehall."

DIRECTORIES = [
	(BINDIR, 0o755),
	(CMTDIR, 0o755),
	(CMT_LOGS_DIR, 0o750),
	(DEPLOYMENT_DIR, 0o755),
	(ANSIBLE_DIR, 0o755),
	(ANSIBLE_LOG_DIR, 0o755),
	(CMT_CONFIG_FILE_DIR, 0o755),
	(CMT_HOOKS_DIR, 0o755),
	(FilePath(os.path.join(CMT_HOOKS_DIR, "pre-upgrade.d")), 0o755),
	(FilePath(os.path.join(CMT_HOOKS_DIR, "post-upgrade.d")), 0o755),
]

EXECUTABLE_SYMLINKS = [
	# These are Python scripts
	(FilePath(os.path.join(os.getcwd(), "cmtadm")), FilePath(os.path.join(BINDIR, "cmtadm"))),
	(FilePath(os.path.join(os.getcwd(), "cmtinv")), FilePath(os.path.join(BINDIR, "cmtinv"))),
	(FilePath(os.path.join(os.getcwd(), "cmt")), FilePath(os.path.join(BINDIR, "cmt"))),
	(FilePath(os.path.join(os.getcwd(), "cmu")), FilePath(os.path.join(BINDIR, "cmu"))),
]

MISC_SYMLINKS = [
	(FilePath(os.path.join(os.getcwd(), ANSIBLE_PLAYBOOK_DIRNAME)), ANSIBLE_PLAYBOOK_DIR),
	(FilePath(os.path.join(os.getcwd(), THEME_DIRNAME)), THEME_DIR),
	(FilePath(os.path.join(os.getcwd(), PARSER_DIRNAME)), PARSER_DIR),
	(FilePath(os.path.join(os.getcwd(), VIEW_DIRNAME)), VIEW_DIR)
]

PACKAGES_WITH_PIP_FALLBACK = {
	"python3-ansible-runner": "ansible-runner",
	"python3-validators": "validators",
}

PACKAGES_WITHOUT_FALLBACK = {
	"ansible": {},
	"python3-cryptography": {},
	"python3-natsort": {},
	"python3-paramiko": {},
	"python3-pip": {},
	"python3-ujson": {},
	"python3-urllib3": {
		"recommended minimum": "1.26.0",
		"reason": "TLSv1.1 is still enabled in older versions",
	},
	"sshpass": {},
}

CONFIGURATION_FILES = [
	(FilePath(os.path.join(os.getcwd(), CMT_CONFIG_FILENAME)), CMT_CONFIG_FILE, 0o644)
]

def create_directories(directories: List[Tuple[FilePath, int]], verbose: bool = False) -> None:
	"""
	Batch create directories
	If a directory already exists it is silently ignored

		Parameters:
			directories (list[(FilePath, int)]): A list of directories (path, permissions) to create
			verbose (bool): Be more verbose
	"""

	for directory, permissions in directories:
		secure_mkdir(directory, permissions = permissions, verbose = verbose)

def create_symlinks(symlinks: List[Tuple[FilePath, FilePath]], verbose: bool = False) -> None:
	"""
	Batch create symlinks
	If a symlink already exists it is *replaced*

		Parameters:
			symlinks (list[(FilePath, FilePath)]): A list of symlinks (full path) to create; (src, dst)
			verbose (bool): Be more verbose
	"""

	for src, dst in symlinks:
		_violations = secure_symlink(src, dst, verbose = verbose, replace_existing = True)

def copy_files(files: List[Tuple[FilePath, FilePath, int]], verbose: bool = False) -> None:
	"""
	Batch copy files
	If a file already exists it is silently ignored

		Parameters:
			files (list[(FilePath, FilePath, int)]): A list of files (full path) to copy; (src, dst, permissions)
			verbose (bool): Be more verbose
	"""

	for src, dst, permissions in files:
		_violations = secure_copy(src, dst, verbose = verbose, permissions = permissions)

# pylint: disable-next=unused-argument
def install_software(packages: Dict, verbose: bool = False) -> None:
	"""
	Batch install Debian packages

		Parameters:
			packages (list[str]): A list of packages to install
			verbose (bool): Unused
	"""

	try:
		sudo_path = secure_which(FilePath("/usr/bin/sudo"), fallback_allowlist = [], security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("sudo", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	try:
		apt_get_path = secure_which(FilePath("/usr/bin/apt-get"), fallback_allowlist = [], security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("apt-get", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	args = [sudo_path, apt_get_path, "install"] + list(packages.keys())

	_retval = subprocess.run(args, check = False).returncode

	try:
		apt_cache_path = secure_which(FilePath("/usr/bin/apt-cache"), fallback_allowlist = [], security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("apt-cache", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	try:
		dpkg_path = secure_which(FilePath("/usr/bin/dpkg"), fallback_allowlist = [], security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("dpkg", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	# Check if the installed versions are new enough
	for pkg, data in packages.items():
		recommended_minimum = deep_get(data, DictPath("recommended minimum"), "")
		reason = deep_get(data, DictPath("reason"), "")
		severity = deep_get(data, DictPath("severity"), LogLevel.ERR)
		if len(recommended_minimum) == 0:
			continue
		args = [apt_cache_path, "policy"] + [pkg]
		result = subprocess.run(args, stdout = PIPE, stderr = STDOUT, check = False)
		pkg_version = None
		compiled_regex = re.compile(r".*Installed: (.*)")
		for line in result.stdout.decode("utf-8").splitlines():
			tmp = compiled_regex.match(line)
			if tmp is None:
				continue

			pkg_version = tmp[1]
			break
		if pkg_version is not None:
			args = [dpkg_path, "--compare-versions", recommended_minimum, "lt", pkg_version]
			retval = subprocess.run(args, check = False).returncode
			if retval == 1:
				ansithemeprint([ANSIThemeString("\nWarning:", "warning"),
						ANSIThemeString(" The installed version of package ", "default"),
						ANSIThemeString(f"{pkg}", "path"),
						ANSIThemeString(" (", "default"),
						ANSIThemeString(f"{pkg_version}", "version"),
						ANSIThemeString(") is older than the recommended minimum version: ", "default"),
						ANSIThemeString(f"{recommended_minimum}", "version")], stderr = True)
				ansithemeprint([ANSIThemeString("   Risk:", "emphasis"),
						ANSIThemeString(f" {reason}\n", "default")], stderr = True)

# pylint: disable-next=unused-argument
def install_software_with_pip_fallback(packages: Dict, pip_proxy: str = "", verbose: bool = False, dryrun: bool = False) -> Tuple[List[str], List[str]]:
	"""
	Batch install Debian packages with pip fallback
	This function tries to install a Python module from a Debian package;
	if that package does not exist it installs the pip version of the module instead

		Parameters:
			packages (dict): A dict of packages to install (pkg, fallback)
			pip_proxy (str): A proxy to use when installing packages
			verbose (bool): Unused
			dryrun (bool): Simulate a run without installing packages
		Returns:
			(pkgs, fallbacks):
				pkgs (list[str]): Packages that were, or would be, installed as Debian packages
				fallbacks (list[str]): Packages that were, or would be, installed using pip
	"""

	pkgs: Set[str] = set()
	fallbacks: Set[str] = set()

	try:
		apt_cache_path = secure_which(FilePath("/usr/bin/apt-cache"), fallback_allowlist = [], security_policy = SecurityPolicy.STRICT)
	except FileNotFoundError:
		ansithemeprint([ANSIThemeString("Critical", "critical"),
				ANSIThemeString(": Could not find ", "default"),
				ANSIThemeString("apt-cache", "path"),
				ANSIThemeString("; aborting.", "default")], stderr = True)
		sys.exit(errno.ENOENT)

	args = [apt_cache_path, "madison"] + list(packages.keys())
	response = execute_command_with_response(args)
	split_response = response.splitlines()

	for line in split_response:
		_pkg = line.split(' ', 1)
		if _pkg[0] in packages.keys() and _pkg[0] not in pkgs:
			pkgs.add(_pkg[0])

	for pkg, fallback in packages.items():
		if pkg not in pkgs:
			fallbacks.add(fallback)

	if len(pkgs) > 0 and dryrun == False:
		try:
			sudo_path = secure_which(FilePath("/usr/bin/sudo"), fallback_allowlist = [], security_policy = SecurityPolicy.STRICT)
		except FileNotFoundError:
			ansithemeprint([ANSIThemeString("Critical", "critical"),
					ANSIThemeString(": Could not find ", "default"),
					ANSIThemeString("sudo", "path"),
					ANSIThemeString("; aborting.", "default")], stderr = True)
			sys.exit(errno.ENOENT)

		try:
			apt_get_path = secure_which(FilePath("/usr/bin/apt-get"), fallback_allowlist = [], security_policy = SecurityPolicy.STRICT)
		except FileNotFoundError:
			ansithemeprint([ANSIThemeString("Critical", "critical"),
					ANSIThemeString(": Could not find ", "default"),
					ANSIThemeString("apt-get", "path"),
					ANSIThemeString("; aborting.", "default")], stderr = True)
			sys.exit(errno.ENOENT)

		args = [sudo_path, apt_get_path, "install"] + list(pkgs)
		_retval = subprocess.run(args, check = False).returncode

	if len(fallbacks) > 0 and dryrun == False:
		try:
			pip3_path = secure_which(FilePath("pip3"), fallback_allowlist = ["/bin", "/usr/bin"], security_policy = SecurityPolicy.ALLOWLIST_STRICT)
		except FileNotFoundError:
			ansithemeprint([ANSIThemeString("Critical", "critical"),
					ANSIThemeString(": Could not find ", "default"),
					ANSIThemeString("pip3", "path"),
					ANSIThemeString("; aborting.", "default")], stderr = True)
			sys.exit(errno.ENOENT)
		args = [pip3_path, "install"]
		if len(pip_proxy) > 0:
			args += ["--proxy", pip_proxy]
		args += list(fallbacks)
		_retval = subprocess.run(args, check = False).returncode

	return list(pkgs), list(fallbacks)

# pylint: disable-next=unused-argument
def install(options: List[Tuple[str, str]], args: List[str]) -> int:
	"""
	Create directories, install configuration files, create symlinks,
	and optionally install packages necessary to run CMT

		Parameters:
			options (list[(opt, optarg)]): Options to use when executing this action
			args (list[str]): Options to use when executing this action
		Returns:
			status (int): 0 on success, errno on failure
	"""

	verbose: bool = False
	install_dependencies: bool = True
	confirm: bool = True
	allow_fallback: bool = True
	pip_proxy = ""

	bindir_exists = Path(BINDIR).is_dir()

	for opt, optarg in options:
		if opt == "--verbose":
			verbose = True
		elif opt == "--no-dependencies":
			install_dependencies = False
		elif opt == "--no-fallback":
			allow_fallback = False
		elif opt == "--pip-proxy":
			pip_proxy = optarg
		elif opt == "-Y":
			confirm = False
		else:
			raise Exception(f"Programming error; invalid option {opt}")

	if confirm == True:
		ansithemeprint([ANSIThemeString("Important:", "warning"),
				ANSIThemeString(" The following actions will be taken that will modify the system:", "default")])
		pkgs: List[str] = []
		pkgs_without_fallback: Dict = {}
		pkgs_fallback: List[str] = []

		if install_dependencies == True:
			pkgs, pkgs_fallback = install_software_with_pip_fallback(PACKAGES_WITH_PIP_FALLBACK, dryrun = True)
			pkgs_without_fallback = PACKAGES_WITHOUT_FALLBACK
			for pkg in pkgs:
				pkgs_without_fallback[pkg] = {}
			ansithemeprint([ANSIThemeString("\n• ", "separator"),
					ANSIThemeString("Install the following system software:", "action")])
			ansithemeprint([ANSIThemeString("  Note", "warning"),
					ANSIThemeString(": This requires sudo permissions", "emphasis")])
			for pkg in pkgs_without_fallback:
				ansithemeprint([ANSIThemeString(f"    {pkg}", "path")])
			for pkg in pkgs_fallback:
				ansithemeprint([ANSIThemeString(f"    {pkg}", "path"),
						ANSIThemeString(" (Using package from PIP)", "emphasis")])

		ansithemeprint([ANSIThemeString("\n• ", "separator"),
				ANSIThemeString("Create the following new directories:", "action")])
		for name, _permissions in DIRECTORIES:
			ansithemeprint([ANSIThemeString(f"    {name}", "path")])
		ansithemeprint([ANSIThemeString("\n• ", "separator"),
				ANSIThemeString("Install the following configuration files:", "action")])
		for src, dst, _permissions in CONFIGURATION_FILES:
			ansithemeprint([ANSIThemeString(f"     {dst}", "path")])
		ansithemeprint([ANSIThemeString("\n• ", "separator"),
				ANSIThemeString("Create the following symlinks:", "action")])
		for src, dst in MISC_SYMLINKS:
			ansithemeprint([ANSIThemeString(f"    {src}", "path"),
					ANSIThemeString(" ⇨ ", "emphasis"),
					ANSIThemeString(f"{dst}", "path")])
		for src, dst in EXECUTABLE_SYMLINKS:
			ansithemeprint([ANSIThemeString(f"    {src}", "path"),
					ANSIThemeString(" ⇨ ", "emphasis"),
					ANSIThemeString(f"{dst}", "path")])

		if install_dependencies == True and allow_fallback == False and len(pkgs_fallback) > 0:
			ansithemeprint([ANSIThemeString("\n", "default"),
					ANSIThemeString("Error", "error"),
					ANSIThemeString(": Installation would require fallback to PIP, but “", "default"),
					ANSIThemeString("--no-fallback", "option"),
					ANSIThemeString("“ was specified; aborting.", "default")], stderr = True)
			sys.exit(errno.EINVAL)

		retval = ansithemeinput([ANSIThemeString("\nInstall ", "default"),
					 ANSIThemeString(about.PROGRAM_SUITE_NAME, "programname"),
					 ANSIThemeString("? [y/", "default"),
					 ANSIThemeString("N", "emphasis"),
					 ANSIThemeString("]: ", "default")])
		if retval.lower() not in ("y", "yes"):
			ansithemeprint([ANSIThemeString("\nAborting:", "error"),
					ANSIThemeString(" User stopped installation.", "default")], stderr = True)
			sys.exit(errno.EINTR)

	if install_dependencies == True:
		install_software(PACKAGES_WITHOUT_FALLBACK, verbose = verbose)
		install_software_with_pip_fallback(PACKAGES_WITH_PIP_FALLBACK, verbose = verbose, pip_proxy = pip_proxy)

	create_directories(directories = DIRECTORIES, verbose = verbose)
	copy_files(files = CONFIGURATION_FILES, verbose = verbose)
	create_symlinks(symlinks = MISC_SYMLINKS + EXECUTABLE_SYMLINKS, verbose = verbose)

	if bindir_exists == False:
		ansithemeprint([ANSIThemeString("\nWarning", "warning"),
				ANSIThemeString(": ", "default"),
				ANSIThemeString(f"{BINDIR}", "path"),
				ANSIThemeString(" did not exist before installation; you will most likely need to ", "default"),
				ANSIThemeString("logout and login again (or spawn a new shell/terminal) to have it added to ", "default"),
				ANSIThemeString("$PATH", "argument"),
				ANSIThemeString(".", "default")])

	return 0

COMMANDLINE = {
	# Default command
	"__global_options": {
		"command": ["__global_options"],
		"description": [ANSIThemeString("", "")],
		"options": {
			"--no-dependencies": {
				"description": [ANSIThemeString("Do not install dependencies", "description")],
			},
			"--no-fallback": {
				"description": [ANSIThemeString("Do not fallback to Python packages from PIP", "description")],
				"extended_description": [
					[ANSIThemeString("If a distribution package cannot be found", "description")],
					[ANSIThemeString("cmt-install", "programname"),
					 ANSIThemeString(" will, by default, install packages using PIP.", "description")],
					[ANSIThemeString("This option can be used to disable that behaviour", "description")],
				],
			},
			"--pip-proxy": {
				"values": [ANSIThemeString("PROXY", "argument")],
				"description": [ANSIThemeString("Proxy to use for PIP", "description")],
				"extended_description": [
					[ANSIThemeString("HTTPS proxy to use if fallback packages are installed", "description")],
					[ANSIThemeString("from PIP. Format: ", "description"),
					 ANSIThemeString("[user:passwd@]proxy:port", "argument")],
				],
				"requires_arg": True,
				"validator": "url",
			},
			"--verbose": {
				"description": [ANSIThemeString("Be more verbose", "description")],
			},
			"-Y": {
				"description": [ANSIThemeString("Do not ask for confirmation before performing actions", "description")],
			},
		},
	},
	"__default": {
		"command": ["__default"],
		"description": [ANSIThemeString("", "")],
		"min_args": 0,
		"max_args": 0,
		"callback": install,
	},
	"spacer1": {
		"command": [""],
		"description": [ANSIThemeString("", "")],
	},
}

def main() -> int:
	"""
	Main function for the program
	"""

	# Before doing anything else, make sure that the user is not running as root
	if os.geteuid() == 0:
		sys.exit("CRITICAL: This program should not be run as the root user; aborting.")

	homepath = Path(HOMEDIR)
	path_stat = homepath.stat()
	path_permissions = path_stat.st_mode & 0o777

	if path_permissions & 0o002:
		sys.exit(f"CRITICAL: The destination directory {HOMEDIR} is world-writable; aborting.")

	command, options, args = parse_commandline(about.INSTALL_PROGRAM_NAME, about.INSTALL_PROGRAM_VERSION, PROGRAMDESCRIPTION, PROGRAMAUTHORS, sys.argv,
						   COMMANDLINE, default_command = "__default", theme = FilePath(os.path.join(os.getcwd(), "themes", "default.yaml")))

	return command(options, args)

if __name__ == "__main__":
	main()
