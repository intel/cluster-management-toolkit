#! /usr/bin/env python3

import json
try:
	import jsonschema
except ModuleNotFoundError:
	sys.exit("ModuleNotFoundError: you probably need to install python3-jsonschema")

try:
	from natsort import natsorted
except ModuleNotFoundError:
	sys.exit("ModuleNotFoundError: you probably need to install python3-natsort")

import os
import yaml
import sys

validate_yaml_version = "0.2"

verbose = 1
abort_on_fail = False
no_summary = None

failed_files = []

def usage():
	print("validate_yaml [ARGUMENTS]\n")
	print("Validate YAML files used by iKT\n")
	print("themes|views|parsers                 Validate all YAML-files in the default directory for the specified type")
	print("themes|views|parsers|SCHEMA PATH...  Validate all YAML-files at PATH for the specified type")
	print("                                     if PATH is a directory, or the specified file if PATH is a file")
	print("")
	print("If no arguments are specified all YAML-files will be validated")
	print("If the schema isn't one of themes|views|parsers it'll be expected to be a path to a valid JSON schema file")
	print("")
	print("Built-in paths are relative to the base directory of the iKT source code\n")
	print("Note: No schemas are available to validate playbooks; use ansible-playbook to validate playbooks")
	print("")
	print("-A,--abort-on-failure  Stop validation immediately if one file fails; normally all files are validated")
	print("-S,--summary           Show a summary even when using --quiet")
	print("-N,--no-summary        Don't show a summary even when using --verbose")
	print("-R,--resume-from PATH  After a failed validation run resume validation from this file")
	print("-q,--quiet             Be less verbose")
	print("-v,--verbose           Be more verbose")
	print("help|--help            Display this help and exit")
	print("version|--version      Output version information and exit")

def version():
	print(f"validate_yaml {validate_yaml_version}")

def validate_file(yaml_path, schema_path):
	if not yaml_path.endswith((".yaml", ".yml")):
		if verbose > 1:
			print(f"\n{yaml_path} does not end in .yaml or .yml; skipping.\n")
		return -1

	if not os.path.isfile(yaml_path):
		if verbose > 1:
			print(f"\n{yaml_path} is not a file; skipping.\n")
		return -1

	yaml_data = {}

	if not os.path.isfile(schema_path):
		sys.exit(f"schema {schema_path} does not exist or is not a file; aborting.")

	with open(schema_path, "r") as f:
		try:
			schema = json.load(f)
		except json.decoder.JSONDecodeError as e:
			print(f"\nThe schema file {schema_path} is not valid JSON:")
			sys.exit(f"\njson.decoder.JSONDecodeError: {e}")

	try:
		with open(yaml_path, "r") as f:
			yaml_data = yaml.safe_load(f)
	except yaml.scanner.ScannerError as e:
		sys.exit(f"ScannerError: {str(e)}\n\ninvalid YAML; aborting.")
	except yaml.parser.ParserError as e:
		sys.exit(f"ParserError: {str(e)}\n\ninvalid YAML; aborting.")

	if verbose > 0:
		print(f"Validating {yaml_path} with {schema_path}")

	fail = 0

	try:
		jsonschema.validate(schema = schema, instance = yaml_data)
	except jsonschema.exceptions.SchemaError as e:
		print(f"\nFailed to validate schema {schema_path}")
		sys.exit(f"\njsonschema.exceptions.SchemaError: {e}")
	except jsonschema.exceptions.ValidationError as e:
		print(f"\n  Failed to validate {yaml_path} using {schema_path}\n")
		if abort_on_fail == True:
			sys.exit(f"\njsonschema.exceptions.ValidationError: {e}")
		elif verbose > 2:
			print(f"\njsonschema.exceptions.ValidationError: {e}\n")
		failed_files.append(yaml_path)
		fail = 1

	return fail

def main():
	global no_summary
	global verbose
	global abort_on_fail

	i = 1
	schema = None
	schema_path = None
	yaml_paths = []
	resume_from = None

	while i < len(sys.argv):
		if sys.argv[i] in ["help","--help"]:
			usage()
			sys.exit(0)
		if sys.argv[i] in ["version","--version"]:
			version()
			sys.exit(0)
		elif sys.argv[i] in ["-q", "--quiet"]:
			if verbose > 0:
				verbose -= 1
		elif sys.argv[i] in ["-v", "--verbose"]:
			if verbose < 3:
				verbose += 1
		elif sys.argv[i] in ["-A", "--abort-on-failure"]:
			abort_on_fail = True
		elif sys.argv[i] in ["-S", "--summary"]:
			no_summary = False
		elif sys.argv[i] in ["-N", "--no-summary"]:
			no_summary = True
		elif sys.argv[i] in ["-R", "--resume-from"]:
			i += 1
			if i < len(sys.argv):
				resume_from = sys.argv[i]
				if not os.path.isfile(resume_from):
					sys.exit(f"The --resume-from PATH has to be a file")
			else:
				sys.exit(f"Too few arguments; --resume-from requires a PATH")
		else:
			# If schema hasn't been set this is the schema to use;
			# either an alias {views,themes,parsers} or a full path
			if schema is None:
				schema = sys.argv[i]
				if schema in ["themes", "views", "parsers"]:
					schema_path = f"tests/schemas/{schema}.json"
				else:
					schema_path = schema
					if not os.path.isfile(schema_path) or not schema_path.lower().endswith(".json"):
						sys.exit(f"SCHEMA has to be a path to a JSON schema file or one of {{parsers,themes,views}}")
			else:
				# This is a path to validate
				yaml_paths.append((sys.argv[i], schema_path))
		i += 1

	# This way it's possible to disable the summary even when verbose
	if no_summary is None:
		if verbose > 0:
			no_summary = False
		else:
			no_summary = True

	if len(yaml_paths) == 0:
		if schema in ["parsers", "themes", "views"]:
			yaml_paths += [(schema, schema_path)]
		else:
			yaml_paths = [
				("themes", "tests/schemas/themes.json"),
				("views", "tests/schemas/views.json"),
				("parsers", "tests/schemas/parsers.json"),
			]

	count = 0
	successful = 0
	fail = 0
	skip = 0

	_yaml_paths = []
	for yaml_path, schema in yaml_paths:
		if os.path.isfile(yaml_path):
			if resume_from is not None:
				if yaml_path == resume_from:
					_yaml_paths.append((yaml_path, schema))
					resume_from = None
			else:
				_yaml_paths.append((yaml_path, schema))
		elif os.path.isdir(yaml_path):
			for path in os.listdir(yaml_path):
				if resume_from is not None:
					if f"{yaml_path}/{path}" == resume_from:
						_yaml_paths.append((f"{yaml_path}/{path}", schema))
						resume_from = None
				else:
					_yaml_paths.append((f"{yaml_path}/{path}", schema))

	for yaml_path, schema in natsorted(_yaml_paths):
		try:
			retval = validate_file(yaml_path, schema)
		except KeyboardInterrupt:
			sys.exit()

		if retval == -1:
			skip += 1
		else:
			fail += retval
		count += 1

	if no_summary == False:
		print(f"\nSummary:")
		if abort_on_fail == False:
			print(f"     fail: {fail}")
		print(f"     skip: {skip}")
		print(f"  success: {count - fail - skip}")
		print(f"    total: {count}")

		if fail > 0:
			print("\n\nThe following files failed validation:")
			print("---")
			for file in failed_files:
				print(f"  {file}")

if __name__ == "__main__":
	main()
