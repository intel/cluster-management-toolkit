#! /bin/sh
# vim: ts=4 filetype=python expandtab shiftwidth=4 softtabstop=4 syntax=python
# pylint: disable-next=anomalous-backslash-in-string
''''eval version=$( ls /usr/bin/python3.* | \
    grep '.*[0-9]$' | sort -nr -k2 -t. | head -n1 ) && \
    version=${version##/usr/bin/python3.} && [ ${version} ] && \
    [ ${version} -ge 9 ] && exec /usr/bin/python3.${version} "$0" "$@" || \
    exec /usr/bin/env python3 "$0" "$@"' #'''
# The above hack is to handle distros where /usr/bin/python3
# doesn't point to the latest version of python3 they provide
# Requires: python3 (>= 3.9)
#
# Copyright the Cluster Management Toolkit for Kubernetes contributors.
# SPDX-License-Identifier: MIT

from pathlib import PurePath
from getpass import getuser
import sys
from typing import Any, Dict, Tuple
from unittest import mock
import yaml

from clustermanagementtoolkit.cmttypes import deep_get, DictPath, FilePath, ProgrammingError
from clustermanagementtoolkit.ansithemeprint import ANSIThemeStr
from clustermanagementtoolkit.ansithemeprint import ansithemeprint, init_ansithemeprint
from clustermanagementtoolkit import checks

TEST_DIR = FilePath(PurePath(__file__).parent).joinpath("testpaths")

# unit-tests for checks.py


def yaml_dump(data: Any, base_indent: int = 4) -> str:
    result = ""
    dump = yaml.dump(data)
    for line in dump.splitlines():
        result += f"{' '.ljust(base_indent)}{line}\n"
    return result


def test_check_disable_strict_host_key_checking(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = checks.check_disable_strict_host_key_checking

    if result:
        # Indata format:
        # (cmtconfig_dict, (abort, critical, error, warning, note), expected_exception)
        testdata: Tuple = (
            # disablestricthostkeychecking = False
            (
                {
                    "Nodes": {
                        "disablestricthostkeychecking": False,
                    }
                },
                (False, 0, 0, 0, 0),
                None,
            ),
            # disablestricthostkeychecking unset; default is False
            (
                {
                    "Nodes": {}
                },
                (False, 0, 0, 0, 0),
                None,
            ),
            # disablestricthostkeychecking = True
            (
                {
                    "Nodes": {
                        "disablestricthostkeychecking": True,
                    }
                },
                (False, 0, 1, 0, 0),
                None,
            ),
        )

        for cmtconfig_dict, expected_result, expected_exception in testdata:
            try:
                tmp = fun(cmtconfig_dict=cmtconfig_dict)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              " cmtconfig_dict:\n" \
                              f"{yaml_dump(cmtconfig_dict, base_indent=17)}\n" \
                              f"         result: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  " cmtconfig_dict:\n" \
                                  f"{yaml_dump(cmtconfig_dict, base_indent=17)}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              " cmtconfig_dict:\n" \
                              f"{yaml_dump(cmtconfig_dict, base_indent=17)}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_check_sudo_configuration(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = checks.check_sudo_configuration
    user = getuser()

    if result:
        # Indata format:
        # (kwargs, mock_response, expected_result)
        testdata = (
            # User can sudo without password; verbose
            (
                {
                    "user": user,
                    "verbose": True,
                    "quiet_on_ok": False,
                },
                "    (ALL) NOPASSWD: ALL",
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
                None,
            ),
            # User can sudo without password; quiet
            (
                {
                    "user": user,
                    "verbose": False,
                    "quiet_on_ok": True,
                },
                "    (ALL) NOPASSWD: ALL",
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
                None,
            ),
            # User can sudo with password; verbose
            (
                {
                    "user": user,
                    "verbose": True,
                    "quiet_on_ok": False,
                },
                "    (ALL : ALL) ALL",
                # We shouldn't exit; 1 new error
                (False, 0, 1, 0, 0),
                None,
            ),
            # User can sudo with password; quiet
            (
                {
                    "user": user,
                    "verbose": False,
                    "quiet_on_ok": True,
                },
                "    (ALL : ALL) ALL",
                # We shouldn't exit; 1 new error
                (False, 0, 1, 0, 0),
                None,
            ),
            # User cannot sudo at all; verbose
            (
                {
                    "user": user,
                    "verbose": True,
                    "quiet_on_ok": False,
                },
                "User foobar is not allowed to run sudo on baz",
                # We shouldn't exit; 1 new error
                (False, 0, 1, 0, 0),
                None,
            ),
            # User cannot sudo at all; quiet
            (
                {
                    "user": user,
                    "verbose": False,
                    "quiet_on_ok": True,
                },
                "User foobar is not allowed to run sudo on baz",
                # We shouldn't exit; 1 new error
                (False, 0, 1, 0, 0),
                None,
            ),
            # No user provided; verbose
            (
                {
                    "verbose": False,
                    "quiet_on_ok": True,
                },
                "",
                # We should get an Exception
                None,
                ProgrammingError,
            ),
        )

        for kwargs, mock_response, expected_result, expected_exception in testdata:
            try:
                with mock.patch("clustermanagementtoolkit.checks.execute_command_with_response",
                                return_value=mock_response):
                    tmp = fun(**kwargs)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           result: {tmp}\n" \
                              f"  expected result: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_check_ansible_dir_permissions(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = checks.check_ansible_dir_permissions
    user = getuser()

    if result:
        # Indata format:
        # (kwargs, mock_response, mock_exit, expected_result, expected_exception)
        testdata = (
            # Existing directory with correct permissions is OK; verbose
            (
                {
                    "verbose": True,
                    "user": user,
                },
                f"{TEST_DIR}/13-correct_directory",
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
                None,
                "",
            ),
            # Existing directory with correct permissions is OK; quiet
            (
                {
                    "verbose": False,
                    "user": user,
                    "quiet_on_ok": True,
                },
                f"{TEST_DIR}/13-correct_directory",
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
                None,
                "",
            ),
            # Non-existing directory is OK; verbose
            (
                {
                    "verbose": True,
                    "user": user,
                },
                f"{TEST_DIR}/nonexistingdir/testdir",
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
                None,
                "",
            ),
            # Non-existing directory is OK; quiet
            (
                {
                    "verbose": False,
                    "user": user,
                    "quiet_on_ok": True,
                },
                f"{TEST_DIR}/nonexistingdir/testdir",
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
                None,
                "",
            ),
            # Existing directory with incorrect permissions is not OK
            (
                {
                    "verbose": True,
                    "user": user,
                },
                f"{TEST_DIR}/16-dir_no_permissions",
                # We shouldn't exit; 1 new critical
                (False, 1, 0, 0, 0),
                None,
                "",
            ),
            # Existing directory with incorrect permissions is not OK; exit on error
            (
                {
                    "verbose": True,
                    "user": user,
                    "exit_on_error": True,
                },
                f"{TEST_DIR}/16-dir_no_permissions",
                # Exit
                (False, 1, 0, 0, 0),
                Exception,
                "errno.EPERM",
            ),
            # Directory owned by the incorrect user is not OK
            (
                {
                    "verbose": True,
                    "user": "NONEXISTINGUSER",
                },
                f"{TEST_DIR}/13-correct_directory",
                # We shouldn't exit; 1 new critical
                (False, 1, 0, 0, 0),
                None,
                "",
            ),
            # Directory owned by the incorrect user is not OK; exit on error
            (
                {
                    "verbose": True,
                    "user": "NONEXISTINGUSER",
                    "exit_on_error": True,
                },
                f"{TEST_DIR}/13-correct_directory",
                # Exit
                (False, 1, 0, 0, 0),
                Exception,
                "errno.EPERM",
            ),
            # No user provided; verbose
            (
                {
                    "verbose": True,
                    "exit_on_error": True,
                },
                f"{TEST_DIR}/13-correct_directory",
                # We should get an Exception
                None,
                ProgrammingError,
                None,
            ),
        )

        for kwargs, mock_response, \
                expected_result, expected_exception, expected_exception_msg in testdata:
            try:
                with mock.patch("clustermanagementtoolkit.checks.DOT_ANSIBLE_PATH",
                                mock_response), \
                     mock.patch("sys.exit", side_effect=Exception("errno.EPERM")):
                    tmp = fun(**kwargs)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           result: {tmp}\n" \
                              f"  expected result: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception) \
                            and expected_exception_msg is None or expected_exception_msg == str(e):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"        exception: {type(e)}\n" \
                                  f"          message: {str(e)}\n" \
                                  f"         expected: {expected_exception}" \
                                  f" expected message: {expected_exception_msg}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"        exception: {type(e)}\n" \
                              f"          message: {str(e)}\n" \
                              f"  expected result: {expected_result}"
                    result = False
                    break
    return message, result


def test_check_netrc_permissions(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = checks.check_netrc_permissions

    if result:
        # Indata format:
        # (kwargs, mock_response, mock_exit, expected_result, expected_exception)
        testdata = (
            # Existing file with correct permissions is OK; verbose
            (
                {
                    "verbose": True,
                },
                f"{TEST_DIR}/testfile.txt",
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
                None,
                "",
            ),
            # Existing file with correct permissions is OK; quiet
            (
                {
                    "verbose": False,
                    "quiet_on_ok": True,
                },
                f"{TEST_DIR}/testfile.txt",
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
                None,
                "",
            ),
            # Non-existing file is not OK; verbose
            (
                {
                    "verbose": True,
                },
                f"{TEST_DIR}/nonexistingdir/nonexistingentry",
                # We shouldn't exit; 1 new note
                (False, 0, 0, 0, 1),
                None,
                "",
            ),
            # Non-existing file is not OK; quiet
            (
                {
                    "verbose": False,
                },
                f"{TEST_DIR}/nonexistingdir/nonexistingentry",
                # We shouldn't exit; 1 new note
                (False, 0, 0, 0, 1),
                None,
                "",
            ),
            # Existing file with incorrect permissions is not OK
            (
                {
                    "verbose": True,
                },
                f"{TEST_DIR}/01-wrong_permissions",
                # We shouldn't exit; 1 new critical
                (False, 1, 0, 0, 0),
                None,
                "",
            ),
            # Existing file with incorrect permissions is not OK; exit on error
            (
                {
                    "verbose": True,
                    "exit_on_error": True,
                },
                f"{TEST_DIR}/01-wrong_permissions",
                # Exit
                (False, 1, 0, 0, 0),
                Exception,
                "errno.EPERM",
            ),
            # Directory owned by the incorrect user is not OK
            (
                {
                    "verbose": True,
                    "user": "NONEXISTINGUSER",
                },
                f"{TEST_DIR}/13-correct_directory",
                # We shouldn't exit; 1 new critical
                (False, 1, 0, 0, 0),
                None,
                "",
            ),
        )

        for kwargs, mock_response, \
                expected_result, expected_exception, expected_exception_msg in testdata:
            try:
                with mock.patch("clustermanagementtoolkit.checks.NETRC_PATH",
                                mock_response), \
                     mock.patch("sys.exit", side_effect=Exception("errno.EPERM")):
                    tmp = fun(**kwargs)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           result: {tmp}\n" \
                              f"  expected result: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception) \
                            and expected_exception_msg is None or expected_exception_msg == str(e):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"        exception: {type(e)}\n" \
                                  f"          message: {str(e)}\n" \
                                  f"         expected: {expected_exception}" \
                                  f" expected message: {expected_exception_msg}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"        exception: {type(e)}\n" \
                              f"          message: {str(e)}\n" \
                              f"  expected result: {expected_result}"
                    result = False
                    break
    return message, result


def test_check_insecure_kube_config_options(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = checks.check_insecure_kube_config_options

    if result:
        # Indata format:
        # (kwargs, expected_result)
        testdata = (
            # Insecure skip TLS verify is False; verbose
            (
                {
                    "cluster_name": "test",
                    "kubeconfig": {
                        "clusters": [
                            {
                                "name": "test",
                                "insecure-skip-tls-verify": False,
                            },
                        ]
                    },
                    "verbose": True,
                    "quiet_on_ok": False,
                },
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
            ),
            # Insecure skip TLS verify is False; quiet
            (
                {
                    "cluster_name": "test",
                    "kubeconfig": {
                        "clusters": [
                            {
                                "name": "test",
                                "insecure-skip-tls-verify": False,
                            },
                        ]
                    },
                    "verbose": False,
                    "quiet_on_ok": True,
                },
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
            ),
            # Insecure skip TLS verify is True; verbose
            (
                {
                    "cluster_name": "test",
                    "kubeconfig": {
                        "clusters": [
                            {
                                "name": "test",
                                "insecure-skip-tls-verify": True,
                            },
                        ]
                    },
                    "verbose": True,
                    "quiet_on_ok": False,
                },
                # We shouldn't exit; 1 new critical
                (False, 1, 0, 0, 0),
            ),
            # No matching cluster; quiet
            (
                {
                    "cluster_name": "test",
                    "kubeconfig": {
                        "clusters": [
                            {
                                "name": "test2",
                                "insecure-skip-tls-verify": True,
                            },
                        ]
                    },
                    "verbose": False,
                    "quiet_on_ok": True,
                },
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
            ),
            # No configured clusters; quiet
            (
                {
                    "cluster_name": "test",
                    "kubeconfig": {
                        "clusters": []
                    },
                    "verbose": False,
                    "quiet_on_ok": True,
                },
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
            ),
        )

        for kwargs, expected_result in testdata:
            tmp = fun(**kwargs)
            if tmp != expected_result:
                message = f"{fun.__name__}() did not yield expected result:\n" \
                          f"           result: {tmp}\n" \
                          f"  expected result: {expected_result}"
                result = False
                break
    return message, result


def test_check_known_hosts_hashing(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = checks.check_known_hosts_hashing

    if result:
        # Indata format:
        # (kwargs, mock_response, expected_result)
        testdata = (
            # Known hosts hashing disabled; verbose
            (
                {
                    "verbose": True,
                },
                "hashknownhosts no",
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
            ),
            # Known hosts hashing disabled; quiet
            (
                {
                    "verbose": False,
                },
                "hashknownhosts no",
                # We shouldn't exit and no new errors
                (False, 0, 0, 0, 0),
            ),
            # Known hosts hashing enabled
            (
                {},
                "hashknownhosts yes",
                # We shouldn't exit; 1 new warning
                (False, 0, 0, 1, 0),
            ),
        )

        for kwargs, mock_response, expected_result in testdata:
            with mock.patch("clustermanagementtoolkit.checks.execute_command_with_response",
                            return_value=mock_response):
                tmp = fun(**kwargs)
            if tmp != expected_result:
                message = f"{fun.__name__}() did not yield expected result:\n" \
                          f"           result: {tmp}\n" \
                          f"  expected result: {expected_result}"
                result = False
                break
    return message, result


tests: Dict = {
    ("check_disable_strict_host_key_checking()",): {
        "callable": test_check_disable_strict_host_key_checking,
        "result": None,
    },
    ("check_sudo_configuration()",): {
        "callable": test_check_sudo_configuration,
        "result": None,
    },
    ("check_ansible_dir_permissions()",): {
        "callable": test_check_ansible_dir_permissions,
        "result": None,
    },
    ("check_netrc_permissions()",): {
        "callable": test_check_netrc_permissions,
        "result": None,
    },
    ("check_known_hosts_hashing()",): {
        "callable": test_check_known_hosts_hashing,
        "result": None,
    },
    ("check_insecure_kube_config_options()",): {
        "callable": test_check_insecure_kube_config_options,
        "result": None,
    },
}


def main() -> int:
    fail = 0
    success = 0
    verbose = False
    failed_testcases = []

    init_ansithemeprint(themefile=None)

    # How many non-prepare testcases do we have?
    testcount = sum(1 for i in tests if not deep_get(tests[i], DictPath("prepare"), False))
    start_at_task = 0
    end_at_task = testcount

    i = 1

    while i < len(sys.argv):
        opt = sys.argv[i]
        optarg = None
        if i + 1 < len(sys.argv):
            optarg = sys.argv[i + 1]
        if opt == "--start-at":
            if not (isinstance(optarg, str) and optarg.isnumeric()):
                raise ValueError("--start-at TASK requires an integer "
                                 f"in the range [0,{testcount}]")
            start_at_task = int(optarg)
            i += 1
        elif opt == "--end-at":
            if not (isinstance(optarg, str) and optarg.isnumeric()):
                raise ValueError(f"--end-at TASK requires an integer in the range [0,{testcount}]")
            end_at_task = int(optarg)
            i += 1
        else:
            sys.exit(f"Unknown argument: {opt}")
        i += 1

    for i, test in enumerate(tests):
        if i < start_at_task:
            continue
        if i > end_at_task:
            break
        ansithemeprint([ANSIThemeStr(f"[{i:03}/{testcount - 1:03}]", "emphasis"),
                        ANSIThemeStr(f" {', '.join(test)}:", "default")])
        message, result = tests[test]["callable"](verbose=verbose)
        if message:
            ansithemeprint([ANSIThemeStr("  FAIL", "error"),
                            ANSIThemeStr(f": {message}", "default")])
        else:
            ansithemeprint([ANSIThemeStr("  PASS", "success")])
            success += 1
        tests[test]["result"] = result
        if not result:
            fail += 1
            failed_testcases.append(f"{i}: {', '.join(test)}")

    ansithemeprint([ANSIThemeStr("\nSummary:", "header")])
    if fail:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "error")])
    else:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "unknown")])
    ansithemeprint([ANSIThemeStr(f"  PASS: {success}", "success")])

    if fail:
        ansithemeprint([ANSIThemeStr("\nFailed testcases:", "header")])
        for testcase in failed_testcases:
            ansithemeprint([ANSIThemeStr("  • ", "separator"),
                            ANSIThemeStr(testcase, "default")], stderr=True)
        sys.exit(fail)

    return 0


if __name__ == "__main__":
    main()
