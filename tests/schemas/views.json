{
	"description": "A definition of a list and/or info view for iKT",
	"type": "object",
	"definitions": {
		"api_family": {
			"description": "A Kubernetes API family",
			"oneOf": [
				{
					"type": "string",
					"pattern": "^[a-z][a-z0-9.-]*[a-z0-9]$"
				}, {
					"description": "Needed to pass (kind, api_family) == ('', '') which is used to fetch (kind, api_family) from the source",
					"type": "string",
					"maxLength": 0
				}, {
					"description": "The API belongs to the core API",
					"type": "null"
				}
			]
		},
		"default": {
			"description": "The fallback to use if no data is available",
			"type": [ "number", "string", "boolean", "object", "array", "null" ]
		},
		"field": {
			"description": "A name of a field in a row or column",
			"type": "string",
			"pattern": "^[a-z][a-z0-9_]*[a-z0-9]$"
		},
		"field_colors": {
			"description": "Colours to use when outputting the field",
			"type": "array",
			"items": {
				"description": "[context]/type lookup to a fg/bg pair in the theme file",
				"type": "object",
				"properties": {
					"context": {
						"description": "The context for the the colour pair",
						"type": "string",
						"pattern": "^[a-z][a-z0-9_]*[a-z0-9]$"
					},
					"type": {
						"description": "The name of the colour pair",
						"type": "string",
						"pattern": "^[a-z][a-z0-9_]*[a-z0-9]$"
					}
				},
				"required": [ "type" ],
				"additionalProperties": false
			},
			"minItems": 1
		},
		"field_colors_mandatory_context": {
			"description": "Colours to use when outputting the field (No default context)",
			"type": "array",
			"items": {
				"description": "context/type lookup to a fg/bg pair in the theme file",
				"type": "object",
				"properties": {
					"context": {
						"description": "The context for the the colour pair",
						"type": "string",
						"pattern": "^[a-z][a-z0-9_]*[a-z0-9]$"
					},
					"type": {
						"description": "The name of the colour pair",
						"type": "string",
						"pattern": "^[a-z][a-z0-9_]*[a-z0-9]$"
					}
				},
				"required": [ "context", "type" ],
				"additionalProperties": false
			},
			"minItems": 1
		},
		"field_indexes": {
			"description": "A lookup index to the fields to display in the list",
			"type": "object",
			"patternProperties": {
				"^[A-Z][A-Za-z0-9_]*[A-Za-z0-9]$": {
					"$ref": "#/definitions/field_index"
				}
			},
			"additionalProperties": false,
			"minProperties": 1
		},
		"field_index": {
			"description": "An object that defines both sortcolumn and the list of fields",
			"type": "object",
			"properties": {
				"fields": {
					"description": "A list of fields to display",
					"type": "array",
					"items": {
						"$ref": "#/definitions/field"
					},
					"minItems": 1
				},
				"sortcolumn": {
					"description": "The field to use as sort key",
					"$ref": "#/definitions/field"
				},
				"sortorder_reverse": {
					"description": "Should the list default to reversed sort order",
					"type": "boolean"
				}
			},
			"required": [ "fields" ],
			"additionalProperties": false
		},
		"fields": {
			"description": "Declarations for fields that are used in the list",
			"type": "object",
			"patternProperties": {
				"^[a-z][a-z0-9_]*[a-z0-9]$": {
					"type": "object",
					"properties": {
						"align": {
							"description": "Align the field left or right in the column",
							"enum": [
								"left",
								"right"
							]
						},
						"datagetter":  {
							"description": "Custom function to use to get data from an object",
							"enum": [
								"datagetter_container_status",
								"datagetter_deprecated_api",
								"datagetter_metrics",
								"datagetter_endpoint_ips",
								"datagetter_eps_endpoints"
							]
						},
						"default": {
							"$ref": "#/definitions/default"
						},
						"formatter": {
							"$ref": "#/definitions/formatter"
						},
						"formatting": {
							"$ref": "#/definitions/formatting"
						},
						"generator": {
							"description": "Custom generator to use when formatting the data",
							"enum": [
								"generator_mem",
								"generator_status"
							]
						},
						"header": {
							"$ref": "#/definitions/header"
						},
						"path": {
							"$ref": "#/definitions/path"
						},
						"paths": {
							"$ref": "#/definitions/paths"
						},
						"type": {
							"$ref": "#/definitions/processed_data_type"
						}
					},
					"required": [ "header" ],
					"additionalProperties": false
				}
			},
			"additionalProperties": false
		},
		"field_separators": {
			"description": "Separators to use between items in a field",
			"type": "array",
			"items": {
				"description": "[context]/type lookup to a separator in the theme file",
				"type": "object",
				"properties": {
					"type": {
						"description": "The name of the separator",
						"type": "string",
						"pattern": "^[a-z][a-z0-9_]*[a-z0-9]$"
					},
					"context": {
						"description": "The context of the separator (default: 'separators'):",
						"type": "string",
						"pattern": "^[a-z][a-z0-9_]*[a-z0-9]$"
					}
				}
			}
		},
		"formatter": {
			"description": "Function to use to format the text before viewing it",
			"enum": [
				"address",
				"age",
				"float",
				"hex",
				"identify",
				"iktlib.format_ini",
				"list",
				"list_with_status",
				"mem",
				"numerical",
				"numerical_with_units",
				"timestamp",
				"timestamp_with_age",
				"value_mapper"
			]
		},
		"formatting": {
			"description": "Formatting to use when outputting a field",
			"type": "object",
			"properties": {
				"ellipsise": {
					"description": "Ellipsise the list after this many entries",
					"type": "integer"
				},
				"field_colors": {
					"$ref": "#/definitions/field_colors"
				},
				"field_separators": {
					"$ref": "#/definitions/field_separators"
				},
				"mapping": {
					"description": "Remap values",
					"type": "object",
					"properties": {
						"mappings": {
							"patternProperties": {
								"^.*$": {
									"type": "object",
									"properties": {
										"field_colors": {
											"$ref": "#/definitions/field_colors_mandatory_context"
										}
									},
									"additionalProperties": false
								},
								"^__default$": {
									"properties": {
										"field_colors": {
											"$ref": "#/definitions/field_colors_mandatory_context"
										}
									},
									"additionalProperties": false
								}
							},
							"additionalProperties": false
						},
						"ranges": {
							"description": "Format ranges of values",
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"default": {
										"description": "Is this the default entry",
										"type": "boolean"
									},
									"field_colors": {
										"$ref": "#/definitions/field_colors_mandatory_context"
									},
									"max": {
										"description": "Upper value in the range",
										"type": "integer"
									},
									"min": {
										"description": "Lower value in the range",
										"type": "integer"
									}
								},
								"additionalProperties": false
							},
							"minItems": 1
						},
						"substitutions": {
							"type": "object",
							"patternProperties": {
								"^.*$": {
									"anyOf": [
										{
											"description": "Substitute the value with a literal string",
											"type": "string"
										}, {
											"description": "A ThemeRef(context, type) or ThemeString(string, ThemeAttr(context, type))",
											"type": "object",
											"properties": {
												"context": {
													"type": "string"
												},
												"string": {
													"type": "string"
												},
												"type": {
													"type": "string"
												}
											},
											"required": [ "type" ],
											"additionalProperties": false
										}
									]
								}
							},
							"additionalProperties": false
						}
					},
					"additionalProperties": false
				}
			},
			"addititionalProperties": false
		},
		"header": {
			"description": "A header to use for fields",
			"type": "string",
			"pattern": "^[A-Za-z0-9#][A-Za-z0-9()#./ -]*:$"
		},
		"infogetter_args": {
			"description": "Arguments to pass to the infogetter",
			"type": "object",
			"properties": {
				"_extra_data": {
					"description": "Extra data to pass to the infogetter",
					"type": "object"
				},
				"path": {
					"description": "The path to get the information from",
					"$ref": "#/definitions/simple_path"
				}
			},
			"additionalProperties": false
		},
		"kind": {
			"description": "A Kubernetes or meta kind",
			"type": "string",
			"pattern": "^[_A-Z][_A-Za-z0-9]*$",
			"minLength": 1
		},
		"listgetter_args": {
			"description": "Arguments to pass to the listgetter",
			"type": "object"
		},
		"on_activation": {
			"description": "Action to perform when activating an entry",
			"type": "object",
			"properties": {
				"api_family": {
					"description": "The API family of the object (used with resourceinfodispatch and its variants)",
					"$ref": "#/definitions/api_family"
				},
				"api_family_path": {
					"description": "Path to get the API family of the object from (used with resourceinfodispatch and its variants)",
					"$ref": "#/definitions/path"
				},
				"call": {
					"oneOf": [
						{
							"description": "The function to call when activating the entry",
							"type": "string"
						}, {
							"description": "Used to disable the default activation action",
							"type": "null"
						}
					]
				},
				"kind": {
					"oneOf": [
						{
							"$ref": "#/definitions/kind"
						}, {
							"description": "Get the kind from the source object",
							"type": "string",
							"maxLength": 0
						}
					]
				},
				"kind_path": {
					"description": "Path to get the kind of the object from (used with resourceinfodispatch and its variants)",
					"$ref": "#/definitions/path"
				},
				"name_path": {
					"description": "Path to get the name of the object from (used with resourceinfodispatch and its variants)",
					"$ref": "#/definitions/path"
				},
				"namespace_path": {
					"description": "Path to get the namespace of the object from (used with resourceinfodispatch and its variants)",
					"$ref": "#/definitions/path"
				}
			}
		},
		"path": {
			"oneOf": [
				{
					"$ref": "#/definitions/simple_path"
				}, {
					"description": "A list of paths",
					"type": "array",
					"items": {
						"$ref": "#/definitions/path"
					}
				}
			]
		},
		"path_data_type": {
			"description": "A data type as used by path/paths",
			"enum": [
				"api_group",
				"bool",
				"cpu_usage",
				"cpu_usage_round",
				"int",
				"kind",
				"kind_api_group",
				"mem_usage",
				"name",
				"raw",
				"regex_to_tuples",
				"str",
				"timestamp"
			]
		},
		"paths": {
			"description": "An array of paths",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"action": {
						"description": "An action to perform on the list of output; 'sum' adds values (only works on type: [int, float]), 'earliest'/'latest' returns the newest/oldest timestamp (only works on type: timestamp)",
						"enum": [
							"earliest",
							"latest",
							"sum"
						]
					},
					"default": {
						"description": "The fallback value to use if no data is available",
						"type": [ "number", "string", "boolean", "object", "array", "null" ]
					},
					"else": {
						"description": "This value is used if a when-clause evaluates to false",
						"type": [ "number", "string", "boolean", "object", "array", "null" ]
					},
					"fallback_on_empty": {
						"description": "Normally an existing, but empty, field is treated as valid; this option allows for using the fallback path if the field is empty",
						"type": "boolean"
					},
					"key": {
						"description": "Used in conjunction with pathtype 'key_value' to transform the key of a key/value pairs",
						"type": "object",
						"properties": {
							"transform": {
								"type": "object",
								"patternProperties": {
									"^.*$": {
										"type": "string"
									}
								},
								"additionalProperties": false
							},
							"regex": {
								"description": "A list of regular expressions to match against when doing the substitution",
								"type": "array",
								"items": {
									"description": "A regular expression",
									"type": "string"
								},
								"minItems": 1
							}
						}
					},
					"limit": {
						"description": "Number of results to return from the path lookup",
						"type": "integer",
						"minimum": 1
					},
					"lookup": {
						"description": "Used to populate a status tuple by making a Kubernetes lookup",
						"type": "object",
						"properties": {
							"api_family": {
								"$ref": "#/definitions/api_family"
							},
							"kind": {
								"$ref": "#/definitions/kind"
							},
							"messages": {
								"type": "object",
								"properties": {
									"not_ok": {
										"description": "Used when the lookup fails",
										"type": "string"
									},
									"ok": {
										"description": "Used when the lookup is successful",
										"type": "string"
									}
								},
								"additionalProperties": false
							},
							"status": {
								"description": "highlight: (value, stgroup.OK/stgroup.NOT_OK), message: (message, stgroup.NEUTRAL)",
								"enum": [
									"highlight",
									"message"
								]
							}
						},
						"additionalProperties": {
						}
					},
					"none_str_as_none": {
						"description": "By default the string None is treated as any other string; if this is true it's instead treated as null",
						"type": "boolean"
					},
					"path": {
						"anyOf": [
							{
								"$ref": "#/definitions/path"
							}, {
								"type": "array",
								"items": {
									"anyOf": [
										{
											"type": "array",
											"items": {
												"$ref": "#/definitions/path"
											}
										}, {
											"description": "Literal string to return as if it were the result from a lookup",
											"type": "string"
										}
									]
								}
							}
						]
					},
					"paths": {
						"type": "array",
						"items": {
							"anyOf": [
								{
									"type": "array",
									"items": {
										"$ref": "#/definitions/path"
									}
								}, {
									"description": "Literal string to return as if it were the result from a lookup",
									"type": "string"
								}
							]
						}
					},
					"pathtype": {
						"$ref": "#/definitions/postprocessor"
					},
					"prefix": {
						"description": "A prefix or list of prefixes to add before the output",
						"anyOf": [
							{
								"type": "string"
							}, {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						]
					},
					"regex": {
						"description": "Regular expression to process data; used when pathtype is regex",
						"type": "string"
					},
					"replace_quotes": {
						"description": "How to handle quotes",
						"enum": [
							"pretty",
							"same"
						]
					},
					"subpath": {
						"$ref": "#/definitions/path"
					},
					"subpaths": {
						"description": "Fields to fetch within a dict path",
						"type": "array",
						"items": {
							"anyOf": [
								{
									"description": "A field name to fetch, or for dictfields a literal string",
									"type": "string"
								}, {
									"description": "For dictfields a field name to fetch",
									"type": "array"
								}, {
									"description": "A field object with post processing",
									"type": "object",
									"properties": {
										"subpath": {
											"description": "A field name",
											"type": "string"
										},
										"regex": {
											"description": "A list of regular expression filters",
											"type": "array",
											"items": {
												"description": "A regular expression filter",
												"type": "string"
											}
										}
									}
								}
							]
						}
					},
					"substitute": {
						"description": "Substitute the value of the output for this string; typically used with when-conditions",
						"type": [ "number", "string", "boolean", "object", "array", "null" ]
					},
					"substitutions": {
						"description": "Used when pathtype is remap",
						"type": "object",
						"patternProperties": {
							"^.*$": {
								"type": "string"
							}
						}
					},
					"suffix": {
						"description": "A suffix or list of suffixes to add after the output",
						"anyOf": [
							{
								"type": "string"
							}, {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						]
					},
					"transform": {
						"description": "Transformation rules to process dictlists",
						"type": "object",
						"properties": {
							"key": {
								"description": "Perform transformation on the key",
								"type": "object",
								"properties": {
									"default": {
										"type": "array",
										"items": {
											"$ref": "#/definitions/default"
										},
										"minItems": 1
									},
									"groups": {
										"description": "A list of order of the regex capture groups",
										"type": "array",
										"items": {
											"type": "integer",
											"minimum": 0
										},
										"minItems": 1
									},
									"join": {
										"description": "Separators to use when joining elements",
										"type": "array",
										"items": {
											"type": "string"
										},
										"minItems": 1
									},
									"regex": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"minItems": 1
									}
								},
								"sorted": {
									"description": "Should the output be sorted",
									"type": "boolean"
								}
							},
							"value": {
								"description": "Perform transformation on the value",
								"type": "object",
								"properties": {
									"default": {
										"type": "array",
										"items": {
											"$ref": "#/definitions/default"
										},
										"minItems": 1
									},
									"groups": {
										"description": "A list of order of the regex capture groups",
										"type": "array",
										"items": {
											"type": "integer",
											"minimum": 0
										},
										"minItems": 1
									},
									"join": {
										"description": "Separators to use when joining elements",
										"type": "array",
										"items": {
											"type": "string"
										},
										"minItems": 1
									},
									"regex": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"minItems": 1
									}
								}
							},
							"output": {
								"description": "What should the output field(s) be named",
								"type": "array",
								"items": {
									"$ref": "#/definitions/field"
								},
								"minItems": 1
							},
							"sorted": {
								"description": "Should the output be sorted",
								"type": "boolean"
							}
						}
					},
					"type": {
						"anyOf": [
							{
								"$ref": "#/definitions/path_data_type"
							}, {
								"description": "An array of data types",
								"type": "array",
								"items": {
									"$ref": "#/definitions/path_data_type"
								}
							}
						]
					},
					"unknown": {
						"description": "This string is shown if a Kubernetes API lookup fails due to the API being unknown",
						"type": "string"
					},
					"value": {
						"description": "Used in conjunction with pathtype 'key_value' to transform the value of a key/value pairs",
						"type": "object",
						"properties": {
							"transform": {
								"type": "object",
								"patternProperties": {
									"^.*$": {
										"type": "string"
									}
								},
								"additionalProperties": false
							},
							"regex": {
								"description": "A list of regular expressions to match against when doing the substitution",
								"type": "array",
								"items": {
									"description": "A regular expression",
									"type": "string"
								},
								"minItems": 1
							}
						}
					},
					"when": {
						"$ref": "#/definitions/when"
					}
				},
				"additionalProperties": false
			}
		},
		"postprocessor": {
			"description": "The postprocessor to use for the data",
			"enum": [
				"age",
				"appenditems",
				"comparison",
				"dictfields",
				"dictlist",
				"items",
				"key_value",
				"list",
				"lookup",
				"match_expression",
				"ranges",
				"regex",
				"remap",
				"split",
				"status_tuple",
				"str",
				"substitution",
				"timediff",
				"timestamp_with_age",
				"tuple",
				"value"
			]
		},
		"processed_data_type": {
			"description": "The type of data after processing",
			"enum": [
				"address",
				"age",
				"bool",
				"cpu_usage",
				"cpu_usage_round",
				"float",
				"host",
				"int",
				"len",
				"list",
				"mem_usage",
				"numerical",
				"raw",
				"str",
				"timestamp",
				"version"
			]
		},
		"row_header": {
			"description": "A header to use for rows",
			"type": "array",
			"items": {
				"description": "A formatted string fragment",
				"type": "array",
				"prefixItems": [
					{
						"description": "A string fragment",
						"type": "string",
						"pattern": "^([A-Za-z0-9# ]|[A-Za-z0-9# ][A-Za-z0-9()#./ :-]*)$"
					}, {
						"description": "formatting to use for the string fragment",
						"type": "array",
						"prefixItems": [
							{
								"description": "The context for the formatting",
								"type": "string"
							}, {
								"description": "The name of the formatting",
								"type": "string"
							}
						],
						"items": false,
						"minItems": 2,
						"maxItems": 2
					}
				],
				"items": false
			},
			"minItems": 1
		},
		"simple_path": {
			"description": "A path to use with deep_get()/deep_set()",
			"type": "string",
			"pattern": "^[_a-z][A-Za-z0-9#_/.=-]*[A-Za-z0-9=]$"
		},
		"view_name": {
			"description": "The name of a view, as used from the command line; view names starting with __ are skipped",
			"type": "string",
			"pattern": "^[_a-zA-Z][a-zA-Z0-9._-]*[a-zA-Z0-9_]$"
		},
		"when": {
			"description": "Conditional; only include path elements that match the specified when condition(s)",
			"type": "array",
			"items": {
				"anyOf": [
					{
						"type": "object",
						"patternProperties": {
							"^(key_eq|key_ne|key_in|key_notin|key_startswith|key_notstartswith|key_endswith|key_notendswith)$": {
								"type": "string"
							}
						},
						"additionalProperties": false
					}, {
						"type": "object",
						"properties": {
							"key": {
								"description": "The key to match against",
								"type": "string"
							},
							"none": {
								"description": "Check whether key has a value",
								"type": [ "boolean" ]
							},
							"notnone": {
								"description": "Check whether key lacks a value",
								"type": [ "boolean" ]
							},
							"eq": {
								"description": "Exact match against this value",
								"type": [ "number", "string", "boolean", "object", "array", "null" ]
							},
							"ne": {
								"description": "Negative exact match against this value",
								"type": [ "number", "string", "boolean", "object", "array", "null" ]
							},
							"lt": {
								"description": "Less than this value",
								"type": [ "number", "string", "boolean", "object", "array", "null" ]
							},
							"lte": {
								"description": "Less than or equal to this value",
								"type": [ "number", "string", "boolean", "object", "array", "null" ]
							},
							"gt": {
								"description": "Greater than this value",
								"type": [ "number", "string", "boolean", "object", "array", "null" ]
							},
							"gte": {
								"description": "Greater than or equal to this value",
								"type": [ "number", "string", "boolean", "object", "array", "null" ]
							},
							"in": {
								"description": "Match against any of these values",
								"type": "array",
								"items": {
									"type": [ "number", "string", "boolean", "object", "array", "null" ]
								}
							},
							"notin": {
								"description": "Negative match against any of these values",
								"type": "array",
								"items": {
									"type": [ "number", "string", "boolean", "object", "array", "null" ]
								}
							},
							"missing": {
								"description": "The key is missing from the object",
								"type": [ "number", "string", "boolean", "object", "array", "null" ]
							},
							"notmissing": {
								"description": "The key exists in the object",
								"type": [ "number", "string", "boolean", "object", "array", "null" ]
							},
							"isdict": {
								"description": "Is the value a dict",
								"type": "boolean"
							},
							"notisdict": {
								"description": "Is the value a not dict",
								"type": "boolean"
							},
							"dicthaskey": {
								"description": "Is key a member of the dict",
								"type": "string"
							},
							"notdicthaskey": {
								"description": "Is key not a member of the dict",
								"type": "string"
							}
						},
						"additionalProperties": false,
						"required": [ "key" ]
					}
				]
			},
			"minItems": 1
		}
	},
	"properties": {
		"kind": {
			"description": "The Kubernetes or meta kind the view is associated with",
			"$ref": "#/definitions/kind"
		},
		"api_family": {
			"description": "The Kubernetes API family the view is associated with",
			"$ref": "#/definitions/api_family"
		},
		"default_command": {
			"$ref": "#/definitions/view_name"
		},
		"command": {
			"description": "Alternate names for the view",
			"type": "array",
			"items": {
				"$ref": "#/definitions/view_name"
			},
			"minitems": 1,
			"uniqueItems": true
		},
		"listview": {
			"description": " A view used to list objects",
			"type": "object",
			"properties": {
				"actions": {
					"description": "Actions that can be performed on the selected list entry or on all tagged list entries",
					"type": "object",
					"properties": {
						"actionlist": {
							"type": "object",
							"patternProperties": {
								"^[A-Za-z0-9][A-Za-z0-9() -]*[A-Za-z0-9)]$": {
									"type": "object",
									"properties": {
										"action": {
											"enum": [
												"execute"
											]
										},
										"action_args": {
											"description": "Arguments to pass to the action",
											"type": "object",
											"properties": {
												"command": {
													"description": "Command to execute; only valid if widget is 'command'; use <<<items>>> to append the list of selected items",
													"type": "array",
													"items": {
														"type": "string"
													},
													"minItems": 1
												}
											},
											"additionalProperties": false
										},
										"actionfunc": {
											"description": "The function to call",
											"type": "string"
										},
										"allow_on_control_plane": {
											"type": "boolean"
										},
										"category": {
											"type": "string"
										},
										"confirm": {
											"description": "Should the program ask for confirmation before performing the action",
											"type": "boolean"
										},
										"description": {
											"description": "A description of the action to use in the action menu",
											"type": "string"
										},
										"metadata": {
											"type": "array",
											"items": {
												"type": "array",
												"prefixItems": [
													{
														"type": "string"
													}, {
														"type": "array",
														"prefixItems": [
															{
																"description": "Formatting context",
																"type": "string"
															}, {
																"description": "Formatting",
																"type": "string"
															}
														],
														"items": false,
														"minItems": 2,
														"maxItems": 2
													}
												],
												"items": false
											},
											"minItems": 1
										},
										"query": {
											"type": "string"
										},
										"queryfunc": {
											"type": "string"
										},
										"queryval": {
											"type": "string"
										},
										"read_only": {
											"type": "boolean"
										},
										"single_on_control_plane": {
											"type": "boolean"
										},
										"single_only": {
											"type": "boolean"
										}
									},
									"required": [ "description" ],
									"additionalProperties": false
								}
							},
							"additionalProperties": false
						},
						"playbooklist": {
							"description": "Include this to populate the actions from Ansible playbooks",
							"oneOf": [
								{
									"type": "object",
									"properties": {
										"context": {
											"description": "The context is matched against the context specified in the playbooks; all playbooks matching the context will be included; if context isn't specified all playbooks will be included"
										}
									}
								}, {
									"description": "Playbooks disabled",
									"type": "null"
								}
							]
						}
					},
					"additionalProperties": false
				},
				"check_availability": {
					"description": "Function to use to check whether the API is available",
					"enum": [
						"is_cluster_reachable"
					]
				},
				"field_indexes": {
					"$ref": "#/definitions/field_indexes"
				},
				"fields": {
					"$ref": "#/definitions/fields"
				},
				"group": {
					"description": "The name of the group to sort the view into",
					"type": "string"
				},
				"infogetter": {
					"description": "The function to use to get the content for the infopad",
					"enum": [
						"generic_infogetter",
						"get_container_info",
						"get_log_info"
					]
				},
				"infogetter_args": {
					"$ref": "#/definitions/infogetter_args"
				},
				"is_taggable": {
					"description": "Can items in the list be tagged",
					"type": "boolean"
				},
				"labels": {
					"description": "Do the list entries support labels",
					"type": "boolean"
				},
				"listgetter": {
					"description": "Function to use to get list entries",
					"oneOf": [
						{
							"enum": [
								"generic_listgetter",
								"get_context_list",
								"get_metrics_list",
								"get_pod_containers_list"
							]
						}, {
							"type": "null"
						}
					]
				},
				"listgetter_args": {
					"$ref": "#/definitions/listgetter_args"
				},
				"listgetter_async": {
					"description": "Function to use to get list entries asynchronously",
					"oneOf": [
						{
							"enum": [
								"get_inventory_list"
							]
						}, {
							"type": "null"
						}
					]
				},
				"listview_args": {
					"description": "Arguments to pass to the listview",
					"type": "object",
					"properties": {
						"filters": {
							"description": "Filters to apply before populating the list",
							"type": "object",
							"patternProperties": {
								"^[a-z0-9]*$": {
									"type": "object",
									"oneOf": [
										{
											"properties": {
												"source": {
													"description": "Is the data source the caller or the object",
													"enum": [
														"caller",
														"object"
													]
												},
												"enabled": {
													"description": "Is the filter enabled (can be toggled using the toggle_var shortcut)",
													"type": "boolean"
												},
												"allow": {
													"description": "A list of explicitly allowed values (all non-matches are discarded)",
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"key": {
																"description": "A path to get data from",
																"$ref": "#/definitions/simple_path"
															},
															"values": {
																"description": "A list of values to allow",
																"type": "array",
																"items": {
																	"type": "string"
																},
																"minItems": 1
															}
														},
														"required": [ "key", "values" ],
														"additionalProperties": false
													},
													"minItems": 1
												}
											},
											"required": [ "allow" ],
											"additionalProperties": false
										}, {
											"properties": {
												"source": {
													"description": "Is the data source the caller or the object",
													"enum": [
														"caller",
														"object"
													]
												},
												"enabled": {
													"description": "Is the filter enabled (can be toggled using the toggle_var shortcut)",
													"type": "boolean"
												},
												"block": {
													"description": "A list of explicitly blocked values (all non-matches are accepted)",
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"key": {
																"description": "A path to get data from",
																"$ref": "#/definitions/simple_path"
															},
															"values": {
																"description": "A list of blocked values (all non-matches are permitted)",
																"type": "array",
																"items": {
																	"type": "string"
																},
																"minItems": 1
															}
														},
														"required": [ "key", "values" ],
														"additionalProperties": false
													},
													"minItems": 1
												}
											},
											"required": [ "block" ],
											"additionalProperties": false
										}
									]
								}
							},
							"additionalProperties": false
						}
					},
					"additionalProperties": false
				},
				"name": {
					"description": "The name of the view to display in the view list",
					"type": "string"
				},
				"on_activation": {
					"$ref": "#/definitions/on_activation"
				},
				"shortcuts": {
					"type": "object",
					"patternProperties": {
						"^[A-Za-z0-9 -]*[A-Za-z0-9]$": {
							"oneOf": [
								{
									"type": "object",
									"properties": {
										"action": {
											"type": "string"
										},
										"action_args": {
											"description": "Arguments to pass to the action",
											"type": "object",
											"properties": {
												"api_family": {
													"description": "The API family of the object",
													"$ref": "#/definitions/api_family"
												},
												"api_family_path": {
													"description": "Path to get the API family of the object from, optionally with fallback(s)",
													"$ref": "#/definitions/path"
												},
												"api_version_path": {
													"description": "Path to get the API version of the object from, optionally with fallback(s)",
													"$ref": "#/definitions/path"
												},
												"kind": {
													"$ref": "#/definitions/kind"
												},
												"kind_path": {
													"description": "Path to get the kind of the object from, optionally with fallback(s)",
													"$ref": "#/definitions/path"
												},
												"name_path": {
													"description": "Path to get the name of the object from, optionally with fallback(s)",
													"$ref": "#/definitions/path"
												},
												"namespace_path": {
													"description": "Path to get the namespace of the object from, optionally with fallback(s)",
													"$ref": "#/definitions/path"
												},
												"title": {
													"description": "Window title for widget",
													"type": "string"
												},
												"var": {
													"description": "A variable associated with the shortcut that can be toggled using the toggle_var action",
													"$ref": "#/definitions/path"
												},
												"_named_title": {
													"description": "Should the name of the selected object be appended to the title",
													"type": "boolean"
												},
												"_name_path": {
													"description": "Alternate path to use when getting the name for _named_title",
													"$ref": "#/definitions/simple_path"
												},
												"_pass_obj": {
													"description": "Pass obj to callback",
													"type": "boolean"
												},
												"_pass_selected": {
													"type": "boolean"
												},
												"_pass_selection_vars": {
													"type": "boolean"
												}
											},
											"additionalProperties": false
										},
										"action_call": {
											"type": "string"
										},
										"confirm": {
											"description": "Should the program ask for confirmation before performing the action",
											"type": "boolean"
										},
										"helptext": {
											"type": "string"
										},
										"key": {
											"oneOf": [
												{
													"type": "string",
													"minLength": 1,
													"maxLength": 1
												}, {
													"enum": [
														"f1", "f2", "f3",  "f4",  "f5",  "f6",
														"f7", "f8", "f9", "f10", "f11", "f12",
														"enter", "return"
													]
												}
											]
										},
										"modifier": {
											"enum": [
												"shift",
												"ctrl"
											]
										},
										"query": {
											"type": "string"
										},
										"queryfunc": {
											"type": "string"
										},
										"queryval": {
											"type": "string"
										},
										"read_only": {
											"description": "Shortcuts not explicitly marked as read only will be disabled when iku is started with --read-only",
											"type": "boolean"
										},
										"title": {
											"description": "A title to use for the widget",
											"type": "string"
										}
									},
									"required": [ "key", "helptext", "action", "read_only" ],
									"additionalProperties": false
								}, {
									"description": "Shortcuts disabled",
									"type": "null"
								}
							]
						}
					},
					"additionalProperties": false
				},
				"statusmsg": {
					"description": "A list of entries to add to the status bar",
					"type": "array",
					"items": {
						"description": "An item to add to the status bar",
						"type": "array",
						"prefixItems": [
							{
								"description": "The header for the entry",
								"type": "string"
							}, {
								"description": "The path to get the value from",
								"$ref": "#/definitions/simple_path"
							}
						],
						"items": false
					},
					"minItems": 1
				}
			},
			"required": [ "name", "group", "field_indexes" ],
			"additionalProperties": false
		},
		"infoview": {
			"type": "object",
			"properties": {
				"annotations": {
					"oneOf": [
						{
							"$ref": "#/definitions/simple_path"
						}, {
							"description": "Annotations disabled",
							"type": "null"
						}
					]
				},
				"labels": {
					"oneOf": [
						{
							"$ref": "#/definitions/simple_path"
						}, {
							"type": "string",
							"maxLength": 0
						}, {
							"description": "Labels disabled",
							"type": "null"
						}
					]
				},
				"name": {
					"type": "string",
					"pattern": "^[A-Z0-9][A-Za-z0-9-() ]*[A-Za-z0-9)]$"
				},
				"infopad": {
					"oneOf": [
						{
							"description": "A screen area used to display information about an object",
							"type": "object",
							"properties": {
								"creation_timestamp_path": {
									"description": "By default the timestamp for the object is read from metadata#creationTimestamp; use this path to override",
									"oneOf": [
										{
											"$ref": "#/definitions/simple_path"
										}, {
											"type": "string",
											"maxLength": 0
										}, {
											"description": "Creation timestamp disabled",
											"type": "null"
										}
									]
								},
								"infogetter": {
									"description": "The function to use to get the content for the infopad",
									"oneOf": [
										{
											"enum": [
												"generic_infogetter"
											]
										}, {
											"type": "null"
										}
									]
								},
								"objgetter": {
									"description": "The function to use to get an object to pass to the infogetter",
									"enum": [
										"objgetter_ansible_facts",
										"objgetter_ansible_log"
									]
								},
								"name_path": {
									"description": "By default the name of the object is read from metadata#name; use this path to override",
									"oneOf": [
										{
											"$ref": "#/definitions/simple_path"
										}, {
											"type": "string",
											"maxLength": 0
										}, {
											"description": "Name disabled",
											"type": "null"
										}
									]
								},
								"namespace_path": {
									"description": "By default the namespace of the object is read from metadata#namespace; use this path to override",
									"oneOf": [
										{
											"$ref": "#/definitions/simple_path"
										}, {
											"type": "string",
											"maxLength": 0
										}, {
											"description": "Namespace disabled",
											"type": "null"
										}
									]
								},
								"rows": {
									"description": "Declarations for rows that are used in the infopad",
									"type": "object",
									"patternProperties": {
										"^[a-z][a-z0-9_]*[a-z0-9]$": {
											"type": "object",
											"properties": {
												"align": {
													"description": "Align the field left or right in the column",
													"enum": [
														"left",
														"right"
													]
												},
												"datagetter":  {
													"description": "Custom function to use to get data from an object",
													"enum": [
														"datagetter_latest_version"
													]
												},
												"default": {
													"description": "The fallback value to use if no data is available",
													"type": [ "number", "string", "boolean", "object", "array", "null" ]
												},
												"formatter": {
													"$ref": "#/definitions/formatter"
												},
												"formatting": {
													"$ref": "#/definitions/formatting"
												},
												"header": {
													"$ref": "#/definitions/row_header"
												},
												"path": {
													"$ref": "#/definitions/path"
												},
												"paths": {
													"$ref": "#/definitions/paths"
												},
												"type": {
													"$ref": "#/definitions/processed_data_type"
												}
											},
											"required": [ "header" ],
											"additionalProperties": false
										}
									},
									"additionalProperties": false
								},
								"row_indexes": {
									"description": "A lookup index to the rows to display in the infopad (reuses field_indexes, but with sortcolumn and sortorder_reverse ignored)",
									"type": "object",
									"properties": {
										"Normal": {
											"$ref": "#/definitions/field_index"
										}
									},
									"required": [ "Normal" ]
								}
							},
							"required": [ "row_indexes" ],
							"additionalProperties": false
						}, {
							"description": "Only show default fields",
							"type": "string",
							"maxLength": 0
						}, {
							"description": "Only show default fields",
							"type": "null"
						}
					]
				},
				"listpad": {
					"description": "A screen area used to display objects related to the info view",
					"type": "object",
					"properties": {
						"field_indexes": {
							"$ref": "#/definitions/field_indexes"
						},
						"fields": {
							"$ref": "#/definitions/fields"
						},
						"infogetter": {
							"description": "The function to use to get the content for whe listpad",
							"enum": [
								"generic_infogetter",
								"get_auth_rule_info",
								"get_eps_subsets_info",
								"get_key_value_info",
								"get_limit_info",
								"get_promrules_info",
								"get_rq_item_info",
								"get_sas_info",
								"get_strategy_info",
								"get_subsets_info",
								"get_svcmon_endpoints_info"
							]
						},
						"infogetter_args": {
							"$ref": "#/definitions/infogetter_args"
						},
						"listgetter": {
							"description": "Function to use to get list entries",
							"enum": [
								"generic_listgetter",
								"get_hpa_metrics",
								"get_ingress_rule_list",
								"get_netpol_rule_list",
								"get_pod_resource_list",
								"get_resource_info_by_last_applied_configuration",
								"get_sidecar_rule_list",
								"get_virtsvc_rule_list",
								"listgetter_ansible_volumes",
								"listgetter_configmap_data",
								"listgetter_dict_list",
								"listgetter_field",
								"listgetter_join_dicts_to_list",
								"listgetter_join_lists",
								"listgetter_namespaced_resources",
								"listgetter_path",
								"listgetter_policy_rules"
							]
						},
						"listgetter_args": {
							"$ref": "#/definitions/listgetter_args"
						},
						"on_activation": {
							"$ref": "#/definitions/on_activation"
						},
						"reversible": {
							"description": "Is the list reversible",
							"type": "boolean"
						}
					},
					"required": [ "field_indexes", "infogetter", "listgetter" ],
					"additionalProperties": false
				},
				"logpad": {
					"description": "A screen area used to display preformatted text, optionally with timestamps",
					"type": "object",
					"properties": {
						"infogetter": {
							"description": "The function to use to get the content for the logpad",
							"enum": [
								"logpad_msg_getter",
								"get_task_log",
								"get_themearrays"
							]
						},
						"infogetter_args": {
							"$ref": "#/definitions/infogetter_args"
						},
						"timestamps": {
							"description": "Should the timestamp column be displayed",
							"type": "boolean"
						}
					},
					"additionalProperties": false
				},
				"shortcuts": {
					"type": "object",
					"patternProperties": {
						"^[A-Za-z0-9 -]*[A-Za-z0-9]$": {
							"oneOf": [
								{
									"type": "object",
									"properties": {
										"action": {
											"type": "string"
										},
										"action_args": {
											"type": "object",
											"properties": {
												"api_family": {
													"$ref": "#/definitions/api_family"
												},
												"api_family_path": {
													"description": "Path to get the API family of the object from",
													"$ref": "#/definitions/simple_path"
												},
												"api_group": {
													"$ref": "#/definitions/api_family"
												},
												"api_group_path": {
													"description": "Path to get the API group of the object from",
													"anyof": [
														{
															"$ref": "#/definitions/simple_path"
														}, {
															"description": "a field index to the field in the data returned by the itemgetter to get the data from",
															"type": "integer",
															"minimum": 0
														}
													]
												},
												"api_version_path": {
													"description": "Path to get the API version of the object from, optionally with fallback(s)",
													"$ref": "#/definitions/path"
												},
												"command": {
													"description": "Command to execute; only valid if widget is 'command'; use nested arrays to denote paths",
													"type": "array",
													"prefixItems": [
														{
															"description": "A shell command to execute",
															"type": "string"
														}
													],
													"items": {
														"anyOf": [
															{
																"description": "An option or argument to pass to the command",
																"type": "string"
															}, {
																"description": "A path to fetch the option or argument to pass to the command from",
																"type": "array",
																"items": {
																	"$ref": "#/definitions/simple_path"
																},
																"minItems": 1,
																"maxItems": 1
															}
														]
													},
													"minItems": 1
												},
												"file_path": {
													"description": "Path to a file template",
													"$ref": "#/definitions/simple_path"
												},
												"formatter": {
													"$ref": "#/definitions/formatter"
												},
												"holder_identity_path": {
													"description": "Path to get the name and namespace of the object from if there's a holder identity",
													"$ref": "#/definitions/simple_path"
												},
												"include_root": {
													"description": "When processing a YAML path, should the root of the path be included",
													"type": "boolean"
												},
												"kind": {
													"$ref": "#/definitions/kind"
												},
												"kind_path": {
													"description": "Path to get the kind of the object from, optionally with fallback(s)",
													"anyof": [
														{
															"$ref": "#/definitions/simple_path"
														}, {
															"description": "a field index to the field in the data returned by the itemgetter to get the data from",
															"type": "integer",
															"minimum": 0
														}
													]
												},
												"name_path": {
													"description": "Path to get the name of the object from, optionally with fallback(s)",
													"oneOf": [
														{
															"$ref": "#/definitions/path"
														}, {
															"description": "A field index to the field in the data returned by the itemgetter to get the data from",
															"type": "integer",
															"minimum": 0
														}
													]
												},
												"namespace": {
													"description": "The namespace of the object",
													"type": "string"
												},
												"namespace_path": {
													"description": "path to get the namespace of the object from",
													"anyof": [
														{
															"$ref": "#/definitions/simple_path"
														}, {
															"description": "a field index to the field in the data returned by the itemgetter to get the data from",
															"type": "integer",
															"minimum": 0
														}
													]
												},
												"path": {
													"description": "Some actions take a path as argument",
													"$ref": "#/definitions/simple_path"
												},
												"owner_reference_path": {
													"description": "Path to get the name and namespace of the object from if there's an owner reference",
													"$ref": "#/definitions/simple_path"
												},
												"title": {
													"type": "string"
												},
												"title_path": {
													"description": "Path to get the title to use for the widget from",
													"$ref": "#/definitions/simple_path"
												},
												"_named_title": {
													"description": "Should the name of the selected object be appended to the title",
													"type": "boolean"
												},
												"_name_path": {
													"description": "Alternate path to use when getting the name for _named_title",
													"$ref": "#/definitions/simple_path"
												},
												"_parent_namespace_path": {
													"description": "Path to get the namespace of the parent obj",
													"$ref": "#/definitions/simple_path"
												},
												"_pass_obj": {
													"type": "boolean"
												},
												"_pass_result": {
													"type": "boolean"
												},
												"_pass_selected": {
													"type": "boolean"
												},
												"_selected_objs": {
													"type": "object",
													"properties": {
														"target_ref_kind": {
															"type": "array",
															"prefixItems": [
																{
																	"type": "string"
																}, {
																	"type": "integer",
																	"minimum": 0
																}
															],
															"items": false
														},
														"target_ref_api_version": {
															"type": "array",
															"prefixItems": [
																{
																	"type": "string"
																}, {
																	"type": "integer",
																	"minimum": 0
																}
															],
															"items": false
														},
														"target_ref_name": {
															"type": "array",
															"prefixItems": [
																{
																	"type": "string"
																}, {
																	"type": "integer",
																	"minimum": 0
																}
															],
															"items": false
														},
														"target_ref_namespace": {
															"type": "array",
															"prefixItems": [
																{
																	"type": "string"
																}, {
																	"type": "integer",
																	"minimum": 0
																}
															],
															"items": false
														}
													}
												}
											},
											"additionalProperties": false
										},
										"action_call": {
											"type": "string"
										},
										"confirm": {
											"description": "Function or value to use to decide whether or not to show the confirmation dialogue",
											"anyOf": [
												{
													"type": "string"
												}, {
													"type": "boolean"
												}
											]
										},
										"confirmtitle": {
											"description": "Title for the confirmation window",
											"type": "string"
										},
										"formatting": {
											"description": "Formatting for each column in a windowwidget",
											"type": "array",
											"items": {
												"type": "array",
												"prefixItems": [
													{
														"description": "The context of the formatting",
														"type": "string"
													}, {
														"description": "The name of the formatting",
														"type": "string"
													}
												],
												"items": false,
												"minItems": 1
											},
											"minItems": 1
										},
										"headers": {
											"description": "Headers to use for the widget list",
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"helptext": {
											"type": "string"
										},
										"inputtitle": {
											"description": "Title to use for the inputbox widget",
											"type": "string"
										},
										"itemgetter": {
											"description": "Function to use to get items",
											"enum": [
												"get_allowed_ips",
												"get_endpoint_slices",
												"get_image_list",
												"get_key_value",
												"get_list_as_list",
												"get_list_fields",
												"get_package_version_list",
												"get_pod_affinity",
												"get_pod_tolerations",
												"get_resource_list",
												"get_resources",
												"get_strings_from_string",
												"get_svc_port_target_endpoints",
												"get_volume_properties"
											]
										},
										"itemgetter_args": {
											"description": "Arguments to pass to the itemgetter",
											"oneOf": [
												{
													"type": "object",
													"properties": {
														"fields": {
															"type": "array"
														},
														"override_types": {
															"description": "Override the type of the object",
															"type": "array",
															"items": {
																"enum": [
																	"list",
																	"dict",
																	"str",
																	"timestamp",
																	"age",
																	""
																]
															},
															"minItems": 1
														},
														"path": {
															"$ref": "#/definitions/simple_path"
														},
														"pass_ref": {
															"description": "Pass a reference to the list entry along with its elements",
															"type": "boolean"
														},
														"regex": {
															"description": "A regular expression used to split elements into capture groups",
															"type": "string"
														}
													},
													"required": [ "path" ],
													"additionalProperties": false
												}, {
													"type": "object",
													"properties": {
														"paths": {
															"type": "array",
															"items": {
																"$ref": "#/definitions/simple_path"
															}
														}
													},
													"required": [ "paths" ],
													"additionalProperties": false
												}, {
													"type": "object",
													"properties": {
														"_slow_task_msg": {
															"type": "string"
														},
														"name_path": {
															"description": "Path to get the name of the object from, optionally with fallback(s)",
															"$ref": "#/definitions/path"
														}
													},
													"required": [ "name_path" ],
													"additionalProperties": false
												}
											]
										},
										"key": {
											"oneOf": [
												{
													"type": "string",
													"minLength": 1,
													"maxLength": 1
												}, {
													"enum": [
														"f1", "f2", "f3",  "f4",  "f5",  "f6",
														"f7", "f8", "f9", "f10", "f11", "f12",
														"enter", "return"
													]
												}
											]
										},
										"kind_filter": {
											"type": "object",
											"properties": {
												"kind": {
													"type": "string"
												}
											}
										},
										"modifier": {
											"enum": [
												"shift",
												"ctrl"
											]
										},
										"query": {
											"type": "string"
										},
										"queryfunc": {
											"type": "string"
										},
										"queryval": {
											"type": "string"
										},
										"read_only": {
											"description": "Shortcuts not explicitly marked as read only will be disabled when iku is started with --read-only",
											"type": "boolean"
										},
										"selectable": {
											"type": "boolean"
										},
										"sortcolumn": {
											"description": "The field to use as sort key for the list; currently not supported",
											"$ref": "#/definitions/field"
										},
										"title": {
											"description": "A title to use for the widget",
											"type": "string"
										},
										"widget": {
											"description": "The widget to use",
											"enum": [
												"command",
												"executecommand",
												"inputbox",
												"windowwidget"
											]
										},
										"widget_args": {
											"description": "Arguments to pass to the widget",
											"type": "object",
											"properties": {
												"command": {
													"description": "Command to execute; only valid if widget is 'command'; use nested arrays to denote paths",
													"type": "array",
													"prefixItems": [
														{
															"description": "A shell command to execute",
															"type": "string"
														}
													],
													"items": {
														"anyOf": [
															{
																"description": "An option or argument to pass to the command",
																"type": "string"
															}, {
																"description": "A path to fetch the option or argument to pass to the command from",
																"type": "array",
																"items": {
																	"$ref": "#/definitions/simple_path"
																},
																"minItems": 1,
																"maxItems": 1
															}
														]
													},
													"minItems": 1
												},
												"kinds": {
													"description": "A list of kinds that the action can be executed on",
													"type": "array",
													"items": {
														"oneOf": [
															{
																"type": "array",
																"prefixItems": [
																	{
																		"type": "string",
																		"minLength": 1
																	}, {
																		"type": "string"
																	}
																],
																"items": false,
																"minItems": 1
															}, {
																"enum": [
																	"<native>"
																]
															}
														]
													},
													"minItems": 1
												},
												"waitforkeypress": {
													"description": "Wait for a keypress before returning from command",
													"type": "boolean"
												},
												"_pass_obj": {
													"description": "Pass obj to command",
													"type": "boolean"
												}
											},
											"additionalProperties": false
										}
									},
									"required": [ "key", "helptext", "read_only" ],
									"additionalProperties": false
								}, {
									"description": "Shortcut disabled",
									"type": "null"
								}
							]
						}
					},
					"additionalProperties": false
				}
			},
			"required": [ "name" ],
			"additionalProperties": false
		}
	},
	"required": [ "kind" ]
}
