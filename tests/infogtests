#! /bin/sh
# vim: ts=4 filetype=python expandtab shiftwidth=4 softtabstop=4 syntax=python
# pylint: disable-next=anomalous-backslash-in-string
''''eval version=$( ls /usr/bin/python3.* | \
    grep '.*[0-9]$' | sort -nr -k2 -t. | head -n1 ) && \
    version=${version##/usr/bin/python3.} && [ ${version} ] && \
    [ ${version} -ge 8 ] && exec /usr/bin/python3.${version} "$0" "$@" || \
    exec /usr/bin/env python3 "$0" "$@"' #'''
# The above hack is to handle distros where /usr/bin/python3
# doesn't point to the latest version of python3 they provide
# Requires: python3 (>= 3.8)
#
# Copyright the Cluster Management Toolkit for Kubernetes contributors.
# SPDX-License-Identifier: MIT

from pathlib import PurePath
import sys
from typing import Dict, List, Tuple
import yaml

import cmtlib
from cmtpaths import DEFAULT_THEME_FILE
from cmttypes import deep_get, deep_set, DictPath, FilePath, StatusGroup
from ansithemeprint import ANSIThemeStr, ansithemeprint, init_ansithemeprint
import infogetters

TEST_DIR = FilePath(PurePath(__file__).parent).joinpath("testpaths")

# unit-tests for infogetters.py


def yaml_dump(data: Dict, base_indent: int = 4) -> str:
    result = ""
    dump = yaml.dump(data)
    for line in dump.splitlines():
        result += f"{' '.ljust(base_indent)}{line}\n"
    return result


def test_callback(options: List[Tuple[str, str]], args: List[str]) -> Tuple[str, int]:
    return ("callback", len(args))


def test_format_controller(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = infogetters.format_controller

    if result:
        # Indata format:
        # (field, formatting, default, expected_result, expected_exception)
        testdata: Tuple = (
            (
                (("DaemonSet", "apps"), "coredns-76f75df574-fbjjx"),
                "full",
                ('DaemonSet.apps', 'coredns-76f75df574-fbjjx'),
                None,
            ),
            (
                (("Node", ""), "coredns-76f75df574-fbjjx"),
                "full",
                ("Node", "coredns-76f75df574-fbjjx"),
                None,
            ),
            (
                (("TFJob", "kubeflow.org"), "coredns-76f75df574-fbjjx"),
                "full",
                ("TFJob.kubeflow.org", "coredns-76f75df574-fbjjx"),
                None,
            ),
            (
                (("DaemonSet", "apps"), "coredns-76f75df574-fbjjx"),
                "mixed",
                ("DaemonSet", "coredns-76f75df574-fbjjx"),
                None,
            ),
            (
                (("Node", ""), "coredns-76f75df574-fbjjx"),
                "mixed",
                ("Node", "coredns-76f75df574-fbjjx"),
                None,
            ),
            (
                (("TFJob", "kubeflow.org"), "coredns-76f75df574-fbjjx"),
                "mixed",
                ("TFJob.kubeflow.org", "coredns-76f75df574-fbjjx"),
                None,
            ),
            (
                (("DaemonSet", "apps"), "coredns-76f75df574-fbjjx"),
                "short",
                ("DaemonSet", "coredns-76f75df574-fbjjx"),
                None,
            ),
            (
                (("Node", ""), "coredns-76f75df574-fbjjx"),
                "short",
                ("Node", "coredns-76f75df574-fbjjx"),
                None,
            ),
            (
                (("TFJob", "kubeflow.org"), "coredns-76f75df574-fbjjx"),
                "short",
                ("TFJob", "coredns-76f75df574-fbjjx"),
                None,
            ),
            (
                (("DaemonSet", "apps"), "coredns-76f75df574-fbjjx"),
                "",
                ("", "coredns-76f75df574-fbjjx"),
                None,
            ),
            (
                (("Node", ""), "coredns-76f75df574-fbjjx"),
                "",
                ("", "coredns-76f75df574-fbjjx"),
                None,
            ),
            (
                (("TFJob", "kubeflow.org"), "coredns-76f75df574-fbjjx"),
                "",
                ("", "coredns-76f75df574-fbjjx"),
                None,
            ),
            (
                (("Node", ""), "coredns-76f75df574-fbjjx"),
                "notavalidoption",
                None,
                ValueError,
            ),
        )

        for controller, show_kind, expected_result, expected_exception in testdata:
            try:
                tmp = fun(controller, show_kind)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"        show_kind: {show_kind}\n" \
                              f"           result: {tmp}\n" \
                              f"  expected result: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"        show_kind: {show_kind}\n" \
                                  f"        exception: {type(e)}\n" \
                                  f"          message: {str(e)}\n" \
                                  f"         expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"        show_kind: {show_kind}\n" \
                              f"        exception: {type(e)}\n" \
                              f"          message: {str(e)}\n" \
                              f"  expected result: {expected_result}"
                    result = False
                    break
    return message, result


def test_get_subsets_info(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = infogetters.get_subsets_info

    if result:
        test_obj = {
            "subsets": [
                {
                    "addresses": [
                        {
                            "ip": "10.32.0.25",
                            "nodeName": "spr-3",
                            "targetRef": {
                                "kind": "Pod",
                                "name": "coredns-5dd5756b68-7msdj",
                                "namespace": "kube-system",
                                "uid": "cb4b198f-9952-4eec-bfd4-f14cee2333de"
                            }
                        },
                        {
                            "ip": "10.32.0.26",
                            "nodeName": "spr-3",
                            "targetRef": {
                                "kind": "Pod",
                                "name": "coredns-5dd5756b68-2hrl5",
                                "namespace": "kube-system",
                                "uid": "0a1b86f4-6b04-40bb-ab9c-71f6b1c7b395"
                            }
                        }
                    ],
                    "notReadyAddresses": [
                        {
                            "ip": "10.32.0.27",
                            "nodeName": "spr-3",
                            "targetRef": {
                                "kind": "Pod",
                                "name": "coredns-5dd5756b68-7adfs",
                                "namespace": "kube-system",
                                "uid": "cb4b198f-9952-4eec-bfd4-f1abce34fdde"
                            }
                        },
                    ],
                    "ports": [
                        {
                            "name": "dns-tcp",
                            "port": 53,
                            "protocol": "TCP"
                        },
                        {
                            "name": "dns",
                            "port": 53,
                            "protocol": "UDP"
                        },
                        {
                            "name": "metrics",
                            "port": 9153,
                            "protocol": "TCP"
                        },
                    ],
                },
            ],
        }

        # Indata format:
        # (obj, expand_subsets, expected_result, expected_exception)
        testdata: Tuple = (
            (
                test_obj,
                "None",
                [
                    {
                        "addresses": ["10.32.0.25", "10.32.0.26"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                            ("dns", 53, "UDP"),
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.27"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                            ("dns", 53, "UDP"),
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Not Ready",
                        "status_group": StatusGroup.NOT_OK,
                    },
                ],
                None,
            ),
            (
                test_obj,
                "Port",
                [
                    {
                        "addresses": ["10.32.0.25", "10.32.0.26"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.27"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                        ],
                        "status": "Not Ready",
                        "status_group": StatusGroup.NOT_OK,
                    },
                    {
                        "addresses": ["10.32.0.25", "10.32.0.26"],
                        "ports": [
                            ("dns", 53, "UDP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.27"],
                        "ports": [
                            ("dns", 53, "UDP"),
                        ],
                        "status": "Not Ready",
                        "status_group": StatusGroup.NOT_OK,
                    },
                    {
                        "addresses": ["10.32.0.25", "10.32.0.26"],
                        "ports": [
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.27"],
                        "ports": [
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.NOT_OK,
                    },
                ],
                None,
            ),
            (
                test_obj,
                "Address",
                [
                    {
                        "addresses": ["10.32.0.25"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                            ("dns", 53, "UDP"),
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.26"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                            ("dns", 53, "UDP"),
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.27"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                            ("dns", 53, "UDP"),
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Not Ready",
                        "status_group": StatusGroup.NOT_OK,
                    },
                ],
                None,
            ),
            (
                test_obj,
                "Both",
                [
                    {
                        "addresses": ["10.32.0.25"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.26"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.27"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                        ],
                        "status": "Not Ready",
                        "status_group": StatusGroup.NOT_OK,
                    },
                    {
                        "addresses": ["10.32.0.25"],
                        "ports": [
                            ("dns", 53, "UDP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.26"],
                        "ports": [
                            ("dns", 53, "UDP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.27"],
                        "ports": [
                            ("dns", 53, "UDP"),
                        ],
                        "status": "Not Ready",
                        "status_group": StatusGroup.NOT_OK,
                    },
                    {
                        "addresses": ["10.32.0.25"],
                        "ports": [
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.26"],
                        "ports": [
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                    {
                        "addresses": ["10.32.0.27"],
                        "ports": [
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.NOT_OK,
                    },
                ],
                None,
            ),
            (
                {
                    "subsets": [
                        {
                            "addresses": [
                                {
                                    "ip": "10.32.0.25",
                                    "nodeName": "spr-3",
                                    "targetRef": {
                                        "kind": "Pod",
                                        "name": "coredns-5dd5756b68-7msdj",
                                        "namespace": "kube-system",
                                        "uid": "cb4b198f-9952-4eec-bfd4-f14cee2333de"
                                    }
                                },
                            ],
                            "notReadyAddresses": [],
                            "ports": [
                                {
                                    "name": "dns-tcp",
                                    "port": 53,
                                    "protocol": "TCP"
                                },
                                {
                                    "name": "dns",
                                    "port": 53,
                                    "protocol": "UDP"
                                },
                                {
                                    "name": "metrics",
                                    "port": 9153,
                                    "protocol": "TCP"
                                },
                            ],
                        },
                    ],
                },
                "None",
                [
                    {
                        "addresses": ["10.32.0.25"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                            ("dns", 53, "UDP"),
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                ],
                None,
            ),
            (
                {
                    "subsets": [
                        {
                            "addresses": [],
                            "notReadyAddresses": [
                                {
                                    "ip": "10.32.0.27",
                                    "nodeName": "spr-3",
                                    "targetRef": {
                                        "kind": "Pod",
                                        "name": "coredns-5dd5756b68-7adfs",
                                        "namespace": "kube-system",
                                        "uid": "cb4b198f-9952-4eec-bfd4-f1abce34fdde"
                                    }
                                },
                            ],
                            "ports": [
                                {
                                    "name": "dns-tcp",
                                    "port": 53,
                                    "protocol": "TCP"
                                },
                                {
                                    "name": "dns",
                                    "port": 53,
                                    "protocol": "UDP"
                                },
                                {
                                    "name": "metrics",
                                    "port": 9153,
                                    "protocol": "TCP"
                                },
                            ],
                        },
                    ],
                },
                "None",
                [
                    {
                        "addresses": ["10.32.0.27"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                            ("dns", 53, "UDP"),
                            ("metrics", 9153, "TCP"),
                        ],
                        "status": "Not Ready",
                        "status_group": StatusGroup.NOT_OK,
                    },
                ],
                None,
            ),
            (
                {
                    "subsets": [
                        {
                            "addresses": [],
                            "notReadyAddresses": [],
                            "ports": [
                                {
                                    "name": "dns-tcp",
                                    "port": 53,
                                    "protocol": "TCP"
                                },
                                {
                                    "name": "dns",
                                    "port": 53,
                                    "protocol": "UDP"
                                },
                                {
                                    "name": "metrics",
                                    "port": 9153,
                                    "protocol": "TCP"
                                },
                            ],
                        },
                    ],
                },
                "None",
                [],
                None,
            ),
            (
                {
                    "subsets": [
                        {
                            "addresses": [],
                            "notReadyAddresses": [
                                {
                                    "ip": "10.32.0.27",
                                    "nodeName": "spr-3",
                                    "targetRef": {
                                        "kind": "Pod",
                                        "name": "coredns-5dd5756b68-7adfs",
                                        "namespace": "kube-system",
                                        "uid": "cb4b198f-9952-4eec-bfd4-f1abce34fdde"
                                    }
                                },
                            ],
                            "ports": [],
                        },
                    ],
                },
                "None",
                [
                    {
                        "addresses": ["10.32.0.27"],
                        "ports": [],
                        "status": "Not Ready",
                        "status_group": StatusGroup.NOT_OK,
                    },
                ],
                None,
            ),
            (
                {
                    "subsets": [
                        {
                            "addresses": [],
                            "notReadyAddresses": [
                                {
                                    "ip": "10.32.0.27",
                                    "nodeName": "spr-3",
                                    "targetRef": {
                                        "kind": "Pod",
                                        "name": "coredns-5dd5756b68-7adfs",
                                        "namespace": "kube-system",
                                        "uid": "cb4b198f-9952-4eec-bfd4-f1abce34fdde"
                                    }
                                },
                            ],
                        },
                    ],
                },
                "None",
                [],
                None,
            ),
            (
                {
                    "subsets": [
                        {
                            "addresses": [
                                {
                                    "ip": "10.32.0.25",
                                    "nodeName": "spr-3",
                                    "targetRef": {
                                        "kind": "Pod",
                                        "name": "coredns-5dd5756b68-7msdj",
                                        "namespace": "kube-system",
                                        "uid": "cb4b198f-9952-4eec-bfd4-f14cee2333de"
                                    }
                                },
                            ],
                            "notReadyAddresses": [],
                            "ports": [
                                {
                                    "name": "dns-tcp",
                                    "port": 53,
                                    "protocol": "TCP"
                                },
                            ],
                        },
                    ],
                },
                "Port",
                [
                    {
                        "addresses": ["10.32.0.25"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                        ],
                        "status": "Ready",
                        "status_group": StatusGroup.OK,
                    },
                ],
                None,
            ),
            (
                {
                    "subsets": [
                        {
                            "addresses": [],
                            "notReadyAddresses": [
                                {
                                    "ip": "10.32.0.27",
                                    "nodeName": "spr-3",
                                    "targetRef": {
                                        "kind": "Pod",
                                        "name": "coredns-5dd5756b68-7adfs",
                                        "namespace": "kube-system",
                                        "uid": "cb4b198f-9952-4eec-bfd4-f1abce34fdde"
                                    }
                                },
                            ],
                            "ports": [
                                {
                                    "name": "dns-tcp",
                                    "port": 53,
                                    "protocol": "TCP"
                                },
                            ],
                        },
                    ],
                },
                "Port",
                [
                    {
                        "addresses": ["10.32.0.27"],
                        "ports": [
                            ("dns-tcp", 53, "TCP"),
                        ],
                        "status": "Not Ready",
                        "status_group": StatusGroup.NOT_OK,
                    },
                ],
                None,
            ),
            (
                {
                    "subsets": [
                        {
                            "addresses": [],
                            "notReadyAddresses": [
                                {
                                    "ip": "10.32.0.27",
                                    "nodeName": "spr-3",
                                    "targetRef": {
                                        "kind": "Pod",
                                        "name": "coredns-5dd5756b68-7adfs",
                                        "namespace": "kube-system",
                                        "uid": "cb4b198f-9952-4eec-bfd4-f1abce34fdde"
                                    }
                                },
                            ],
                        },
                    ],
                },
                "NotAValidValueForexpand_subsets",
                [],
                None,
            ),
            (
                None,
                "None",
                [],
                None,
            ),
        )

        for obj, expand_subsets, expected_result, expected_exception in testdata:
            deep_set(cmtlib.cmtconfig, DictPath("Endpoints#expand_subsets"),
                     expand_subsets, create_path=True)
            try:
                tmp = fun(_obj=obj)
                if len(tmp) != len(expected_result):
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"   expand_subsets: {expand_subsets}\n" \
                              f"              len: {len(tmp)}\n" \
                              f"     expected len: {len(expected_result)}"
                    result = False
                    break
                for i, item in enumerate(expected_result):
                    for key, value in item.items():
                        result = getattr(tmp[i], key)
                        if len(tmp) != len(expected_result):
                            message = f"{fun.__name__}() did not yield expected result:\n" \
                                      f"   expand_subsets: {expand_subsets}\n" \
                                      f"           result: {key}: {result}\n" \
                                      f"  expected result: {key}: {value}"
                            result = False
                            break
                    if not result:
                        break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"   expand_subsets: {expand_subsets}\n" \
                                  f"        exception: {type(e)}\n" \
                                  f"          message: {str(e)}\n" \
                                  f"         expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"   expand_subsets: {expand_subsets}\n" \
                              f"        exception: {type(e)}\n" \
                              f"          message: {str(e)}\n" \
                              f"  expected result: {expected_result}"
                    result = False
                    break
    return message, result


def test_get_themearrays(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = infogetters.get_themearrays

    d = {
        "foo": "bar"
    }

    if result:
        try:
            tmp = fun(d)
            if tmp != d:
                message = f"{fun.__name__}() did not yield expected result:\n" \
                          f"           result: {tmp}\n" \
                          f"  expected result: {d}"
                result = False
        except Exception as e:
            message = f"{fun.__name__}() did not yield expected result:\n" \
                      f"        exception: {type(e)}\n" \
                      f"          message: {str(e)}\n" \
                      f"  expected result: {d}"
            result = False
    return message, result


tests: Dict = {
    ("format_controller()",): {
        "callable": test_format_controller,
        "result": None,
    },
    ("get_subsets_info()",): {
        "callable": test_get_subsets_info,
        "result": None,
    },
    ("get_themearrays()",): {
        "callable": test_get_themearrays,
        "result": None,
    },
}


def main() -> int:
    fail = 0
    success = 0
    verbose = False
    failed_testcases = []

    themefile = DEFAULT_THEME_FILE
    init_ansithemeprint(themefile=themefile)

    # How many non-prepare testcases do we have?
    testcount = sum(1 for i in tests if not deep_get(tests[i], DictPath("prepare"), False))
    start_at_task = 0
    end_at_task = testcount

    i = 1

    while i < len(sys.argv):
        opt = sys.argv[i]
        optarg = None
        if i + 1 < len(sys.argv):
            optarg = sys.argv[i + 1]
        if opt == "--start-at":
            if not (isinstance(optarg, str) and optarg.isnumeric()):
                raise ValueError("--start-at TASK requires an integer "
                                 f"in the range [0,{testcount}]")
            start_at_task = int(optarg)
            i += 1
        elif opt == "--end-at":
            if not (isinstance(optarg, str) and optarg.isnumeric()):
                raise ValueError(f"--end-at TASK requires an integer in the range [0,{testcount}]")
            end_at_task = int(optarg)
            i += 1
        else:
            sys.exit(f"Unknown argument: {opt}")
        i += 1

    cmtlib.read_cmtconfig()

    for i, test in enumerate(tests):
        if i < start_at_task:
            continue
        if i > end_at_task:
            break
        ansithemeprint([ANSIThemeStr(f"[{i:03}/{testcount - 1:03}]", "emphasis"),
                        ANSIThemeStr(f" {', '.join(test)}:", "default")])
        message, result = tests[test]["callable"](verbose=verbose)
        if message:
            ansithemeprint([ANSIThemeStr("  FAIL", "error"),
                            ANSIThemeStr(f": {message}", "default")])
        else:
            ansithemeprint([ANSIThemeStr("  PASS", "success")])
            success += 1
        tests[test]["result"] = result
        if not result:
            fail += 1
            failed_testcases.append(f"{i}: {', '.join(test)}")

    ansithemeprint([ANSIThemeStr("\nSummary:", "header")])
    if fail:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "error")])
    else:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "unknown")])
    ansithemeprint([ANSIThemeStr(f"  PASS: {success}", "success")])

    if fail:
        ansithemeprint([ANSIThemeStr("\nFailed testcases:", "header")])
        for testcase in failed_testcases:
            ansithemeprint([ANSIThemeStr("  • ", "separator"),
                            ANSIThemeStr(testcase, "default")], stderr=True)
        sys.exit(fail)

    return 0


if __name__ == "__main__":
    main()
