#! /bin/sh
# vim: filetype=python
# pylint: disable-next=anomalous-backslash-in-string,line-too-long
''''eval version=$( ls /usr/bin/python3.* | grep '.*[0-9]$' | sort -nr -k2 -t. | head -n1 ) && version=${version##/usr/bin/python3.} && [ ${version} ] && [ ${version} -ge 8 ] && exec /usr/bin/python3.${version} "$0" "$@" || exec /usr/bin/env python3 "$0" "$@"' #'''
__doc__ = "The above hack is to handle distros that don't have /usr/bin/python3 point to the latest version of python3 they provide"
# Requires: python3 (>= 3.8)
#
# Copyright the Cluster Management Toolkit for Kubernetes contributors.
# SPDX-License-Identifier: MIT

from datetime import datetime, timezone
import sys
from typing import Dict, Tuple
import yaml

from cmtpaths import DEFAULT_THEME_FILE
from cmttypes import deep_get, DictPath, ProgrammingError, StatusGroup
from ansithemeprint import ANSIThemeString, ansithemeprint, init_ansithemeprint
import formatter

from curses_helper import read_theme, ThemeAttr, ThemeRef, ThemeString, dump_themearray

# unit-tests for formatter.py

def yaml_dump(data: Dict, base_indent: int = 4) -> str:
	result = ""
	dump = yaml.dump(data)
	for line in dump.splitlines():
		result += f"{' '.ljust(base_indent)}{line}\n"
	return result

def test_json_dumps(verbose: bool = False) -> Tuple[str, bool]:
	message = ""
	result = True

	fun = formatter.json_dumps
	fun_str = "formatter.json_dumps"

	if result:
		# Indata format:
		# (dict, expected_result, expected_exception)
		testdata = (
			({"foo": "bar", "bar": 1}, "{\n  \"foo\": \"bar\",\n  \"bar\": 1\n}", None),
		)
		for indata, expected_result, expected_exception in testdata:
			try:
				if (tmp := fun(indata)) != expected_result:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata}\"\n" \
						   "          output:\n" \
						  f"{yaml_dump(tmp, base_indent = 17)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
			except Exception as e:
				if expected_exception is not None:
					if isinstance(e, expected_exception):
						pass
					else:
						message = f"{fun_str}() did not yield expected result:\n" \
							  f"           input: \"{indata}\"\n" \
							  f"       exception: {type(e)}\n" \
							  f"        expected: {expected_exception}"
						result = False
						break
				else:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata}\"\n" \
						  f"       exception: {type(e)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
	return message, result

def test_format_markdown(verbose: bool = False) -> Tuple[str, bool]:
	message = ""
	result = True

	fun = formatter.format_markdown
	fun_str = "formatter.format_markdown"

	if result:
		# Indata format:
		# (lines, options, expected_result, expected_exception)
		testdata = (
			("<!--- commented out\n"
			 "lines -->"
			 "# Header1\n"
			 "text1\n"
			 "## Header2\n"
			 "_text2_\n"
			 "### Header3\n"
			 "__text3__\n"
			 "#### Header4\n"
			 "- item1\n"
			 "- item2\n"
			 "- item3\n"
			 "```\n"
			 "\n"
			 "This is some code\n"
			 "```\n"
			 "The *code* has ended, but here's some embedded `code`", {"start": None, "end": None}, [
				[ThemeString("Header1", ThemeAttr("types", "markdown_header_1"))],
				[ThemeString("text1", ThemeAttr("types", "generic"))],
				[ThemeString("Header2", ThemeAttr("types", "markdown_header_2"))],
				[ThemeString("text2", ThemeAttr("types", "markdown_italics"))],
				[ThemeString("Header3", ThemeAttr("types", "markdown_header_3"))],
				[ThemeString("text3", ThemeAttr("types", "markdown_bold"))],
				[ThemeString("Header4", ThemeAttr("types", "markdown_bold"))],
				[ThemeRef("separators", "genericbullet"),
				 ThemeString("item1", ThemeAttr("types", "generic"))],
				[ThemeRef("separators", "genericbullet"),
				 ThemeString("item2", ThemeAttr("types", "generic"))],
				[ThemeRef("separators", "genericbullet"),
				 ThemeString("item3", ThemeAttr("types", "generic"))],
				[ThemeString("", ThemeAttr("types", "generic"))],
				[ThemeString("This is some code", ThemeAttr("types", "markdown_code"))],
				[ThemeString("The ", ThemeAttr(context='types', key='generic'), False),
				 ThemeString("code", ThemeAttr(context='types', key='markdown_italics'), False),
				 ThemeString(" has ended, but here's some embedded ", ThemeAttr(context='types', key='generic'), False),
				 ThemeString("code", ThemeAttr(context='types', key='markdown_code'), False)],
			 ], None),
			("    This is some code\n"
			 "\n"
			 "The **code** has ended.", {"start": None, "end": None}, [
				[ThemeString("    This is some code", ThemeAttr("types", "markdown_code"))],
				[ThemeString("", ThemeAttr("types", "generic"))],
				[ThemeString("The ", ThemeAttr(context='types', key='generic'), False),
				 ThemeString("code", ThemeAttr(context='types', key='markdown_bold'), False),
				 ThemeString(" has ended.", ThemeAttr(context='types', key='generic'), False)],
			 ], None),
			(["    This is some code",
			  "",
			  "The **code** has ended."], {"start": None, "end": None}, [
				[ThemeString("    This is some code", ThemeAttr("types", "markdown_code"))],
				[ThemeString("", ThemeAttr("types", "generic"))],
				[ThemeString("The ", ThemeAttr(context='types', key='generic'), False),
				 ThemeString("code", ThemeAttr(context='types', key='markdown_bold'), False),
				 ThemeString(" has ended.", ThemeAttr(context='types', key='generic'), False)],
			 ], None),
			(["====",
			  "This is not code",
			  "----"], {"start": "====", "end": "----"}, [
				[ThemeString("This is not code", ThemeAttr("types", "generic"))],
			 ], None),
			(["_This is italics_"], {}, [
				[ThemeString("This is italics", ThemeAttr("types", "markdown_italics"))],
			 ], None),
			(["This_is_not_italics"], {}, [
				[ThemeString("This_is_not_italics", ThemeAttr("types", "generic"))],
			 ], None),
		)
		for indata, options, expected_result, expected_exception in testdata:
			if isinstance(indata, list):
				indata_quoted = "\n".join(indata)
			else:
				indata_quoted = indata
			indata_quoted = indata_quoted.replace("\n", "\\n")
			try:
				if (tmp := fun(indata, **options)) != expected_result:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata_quoted}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						  f"          output: {repr(tmp)}\n" \
					          f"        expected: {expected_result}"
					result = False
					break
			except Exception as e:
				if expected_exception is not None:
					if isinstance(e, expected_exception):
						pass
					else:
						message = f"{fun_str}() did not yield expected result:\n" \
							  f"           input: \"{indata_quoted}\"\n" \
							   "         options:\n" \
							  f"{yaml_dump(options, base_indent = 17)}\n" \
							  f"       exception: {type(e)}\n" \
							  f"        expected: {expected_exception}"
						result = False
						break
				else:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata_quoted}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						  f"       exception: {type(e)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
	return message, result

def test_format_binary(verbose: bool = False) -> Tuple[str, bool]:
	message = ""
	result = True

	fun = formatter.format_binary
	fun_str = "formatter.format_binary"

	try:
		if (tmp := fun(f"\xff\x3f")) != [[ThemeString("Binary file; cannot view", ThemeAttr("types", "generic"))]]:
			message = f"{fun_str}() did not yield expected result:\n" \
				  f"           input: <binary>\n" \
				   "          output:\n" \
				  f"{dump_themearray(tmp)}\n" \
				  f"        expected: {expected_result}"
			result = False
	except Exception as e:
		if expected_exception is not None:
			if isinstance(e, expected_exception):
				pass
			else:
				message = f"{fun_str}() did not yield expected result:\n" \
					  f"           input: <binary>\n" \
					  f"       exception: {type(e)}\n" \
					  f"        expected: {expected_exception}"
				result = False
		else:
			message = f"{fun_str}() did not yield expected result:\n" \
				  f"           input: <binary>\n" \
				  f"       exception: {type(e)}\n" \
				  f"        expected: {expected_result}"
			result = False
	return message, result

def test_format_ansible_line(verbose: bool = False) -> Tuple[str, bool]:
	message = ""
	result = True

	fun = formatter.format_ansible_line
	fun_str = "formatter.format_ansible_line"

	if result:
		# Indata format:
		# (lines, options, expected_result, expected_exception)
		testdata = (
			("Some random output from Ansible", None, [
				ThemeString("Some random output from Ansible", ThemeAttr("types", "generic")),
			 ], None),
			("Another random output from Ansible", ThemeAttr("types", "value"), [
				ThemeString("Another random output from Ansible", ThemeAttr("types", "value")),
			 ], None),
		)
		for indata, options, expected_result, expected_exception in testdata:
			try:
				if (tmp := fun(indata, options)) != expected_result:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						   "          output:\n" \
						  f"{dump_themearray(tmp)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
			except Exception as e:
				raise
				if expected_exception is not None:
					if isinstance(e, expected_exception):
						pass
					else:
						message = f"{fun_str}() did not yield expected result:\n" \
							  f"           input: \"{indata}\"\n" \
							   "         options:\n" \
							  f"{yaml_dump(options, base_indent = 17)}\n" \
							  f"       exception: {type(e)}\n" \
							  f"        expected: {expected_exception}"
						result = False
						break
				else:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						  f"       exception: {type(e)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
	return message, result

def test_format_diff_line(verbose: bool = False) -> Tuple[str, bool]:
	message = ""
	result = True

	fun = formatter.format_diff_line
	fun_str = "formatter.format_diff_line"

	if result:
		# Indata format:
		# (lines, options, expected_result, expected_exception)
		testdata = (
			("+ formatter_mapping = (", {}, [
				ThemeString("+ formatter_mapping = (", ThemeAttr("logview", "severity_diffplus")),
			 ], None),
			("- formatter_mapping = (", {}, [
				ThemeString("- formatter_mapping = (", ThemeAttr("logview", "severity_diffminus")),
			 ], None),
			("  formatter_mapping = (", {}, [
				ThemeString("  formatter_mapping = (", ThemeAttr("logview", "severity_diffsame")),
			 ], None),
		)
		for indata, options, expected_result, expected_exception in testdata:
			try:
				if (tmp := fun(indata)) != expected_result:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						   "          output:\n" \
						  f"{dump_themearray(tmp)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
			except Exception as e:
				raise
				if expected_exception is not None:
					if isinstance(e, expected_exception):
						pass
					else:
						message = f"{fun_str}() did not yield expected result:\n" \
							  f"           input: \"{indata}\"\n" \
							   "         options:\n" \
							  f"{yaml_dump(options, base_indent = 17)}\n" \
							  f"       exception: {type(e)}\n" \
							  f"        expected: {expected_exception}"
						result = False
						break
				else:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						  f"       exception: {type(e)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
	return message, result

def test_format_crt(verbose: bool = False) -> Tuple[str, bool]:
	message = ""
	result = True

	fun = formatter.format_crt
	fun_str = "formatter.format_crt"

	if result:
		# Indata format:
		# (lines, options, expected_result, expected_exception)
		testdata = (
			("-----BEGIN CERTIFICATE-----\n"
			 "FOOBARBAZ\n"
			 "-----END CERTIFICATE-----", {}, [
				[ThemeString("-----BEGIN CERTIFICATE-----", ThemeAttr("types", "separator"))],
				[ThemeString("FOOBARBAZ", ThemeAttr("types", "generic"))],
				[ThemeString("-----END CERTIFICATE-----", ThemeAttr("types", "separator"))],
			 ], None),
			(["-----BEGIN CERTIFICATE-----",
			  "FOOBARBAZ",
			  "-----END CERTIFICATE-----"], {}, [
				[ThemeString("-----BEGIN CERTIFICATE-----", ThemeAttr("types", "separator"))],
				[ThemeString("FOOBARBAZ", ThemeAttr("types", "generic"))],
				[ThemeString("-----END CERTIFICATE-----", ThemeAttr("types", "separator"))],
			 ], None),
			("-----BEGIN CERTIFICATE-----\n"
			 "FOOBARBAZ\n"
			 "-----END CERTIFICATE-----", {"raw": True,}, [
				[ThemeString("-----BEGIN CERTIFICATE-----", ThemeAttr("types", "generic"))],
				[ThemeString("FOOBARBAZ", ThemeAttr("types", "generic"))],
				[ThemeString("-----END CERTIFICATE-----", ThemeAttr("types", "generic"))],
			 ], None),
		)
		for indata, options, expected_result, expected_exception in testdata:
			try:
				if (tmp := fun(indata, **options)) != expected_result:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						   "          output:\n" \
						  f"{dump_themearray(tmp)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
			except Exception as e:
				raise
				if expected_exception is not None:
					if isinstance(e, expected_exception):
						pass
					else:
						message = f"{fun_str}() did not yield expected result:\n" \
							  f"           input: \"{indata}\"\n" \
							   "         options:\n" \
							  f"{yaml_dump(options, base_indent = 17)}\n" \
							  f"       exception: {type(e)}\n" \
							  f"        expected: {expected_exception}"
						result = False
						break
				else:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						  f"       exception: {type(e)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
	return message, result

def test_format_ini(verbose: bool = False) -> Tuple[str, bool]:
	message = ""
	result = True

	fun = formatter.format_ini
	fun_str = "formatter.format_ini"

	if result:
		# Indata format:
		# (lines, options, expected_result, expected_exception)
		testdata = (
			("# comment\n"
			 "[main]\n"
			 "setting1 = foo\n"
			 "setting2 = bar", {}, [
				[ThemeString("# comment", ThemeAttr("types", "ini_comment"))],
				[ThemeString("[main]", ThemeAttr("types", "ini_section"))],
				[ThemeString("setting1", ThemeAttr("types", "ini_key")),
				 ThemeString(" = ", ThemeAttr("types", "ini_key_separator")),
				 ThemeString("foo", ThemeAttr("types", "ini_value"))],
				[ThemeString("setting2", ThemeAttr("types", "ini_key")),
				 ThemeString(" = ", ThemeAttr("types", "ini_key_separator")),
				 ThemeString("bar", ThemeAttr("types", "ini_value"))],
			 ], None),
			(["# comment",
			  "[main]",
			  "  setting1 = foo",
			  "  setting2 = bar"], {}, [
				[ThemeString("# comment", ThemeAttr("types", "ini_comment"))],
				[ThemeString("[main]", ThemeAttr("types", "ini_section"))],
				[ThemeString("  ", ThemeAttr("types", "generic")),
				 ThemeString("setting1", ThemeAttr("types", "ini_key")),
				 ThemeString(" = ", ThemeAttr("types", "ini_key_separator")),
				 ThemeString("foo", ThemeAttr("types", "ini_value"))],
				[ThemeString("  ", ThemeAttr("types", "generic")),
				 ThemeString("setting2", ThemeAttr("types", "ini_key")),
				 ThemeString(" = ", ThemeAttr("types", "ini_key_separator")),
				 ThemeString("bar", ThemeAttr("types", "ini_value"))],
			 ], None),
			(["# comment",
			  "[main]",
			  "setting1 = foo",
			  "setting2 = bar"], {"raw": True}, [
				[ThemeString("# comment", ThemeAttr("types", "generic"))],
				[ThemeString("[main]", ThemeAttr("types", "generic"))],
				[ThemeString("setting1 = foo", ThemeAttr("types", "generic"))],
				[ThemeString("setting2 = bar", ThemeAttr("types", "generic"))],
			 ], None),
		)
		for indata, options, expected_result, expected_exception in testdata:
			if isinstance(indata, list):
				indata_quoted = "\n".join(indata)
			else:
				indata_quoted = indata
			indata_quoted = indata_quoted.replace('\n', '\\n')
			try:
				if (tmp := fun(indata, **options)) != expected_result:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata_quoted}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						   "          output:\n" \
						  f"{yaml_dump(tmp, base_indent = 17)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
			except Exception as e:
				if expected_exception is not None:
					if isinstance(e, expected_exception):
						pass
					else:
						message = f"{fun_str}() did not yield expected result:\n" \
							  f"           input: \"{indata_quoted}\"\n" \
							   "         options:\n" \
							  f"{yaml_dump(options, base_indent = 17)}\n" \
							  f"       exception: {type(e)}\n" \
							  f"        expected: {expected_exception}"
						result = False
						break
				else:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata_quoted}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						  f"       exception: {type(e)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
	return message, result

def test_format_python_traceback(verbose: bool = False) -> Tuple[str, bool]:
	message = ""
	result = True

	fun = formatter.format_python_traceback
	fun_str = "formatter.format_python_traceback"

	if result:
		# Indata format:
		# (lines, options, expected_result, expected_exception)
		testdata = (
			("Traceback (most recent call last):\n"
			 " File \"<stdin>\", line 1, in <module>\n"
			 "ZeroDivisionError: division by zero", {}, [
				[ThemeString("Traceback (most recent call last):", ThemeAttr("logview", "severity_error"))],
				[ThemeString(" File \"", ThemeAttr("logview", "severity_info")),
				 ThemeString("<stdin>", ThemeAttr("types", "path")),
				 ThemeString("\", line ", ThemeAttr("logview", "severity_info")),
				 ThemeString("1", ThemeAttr("types", "lineno")),
				 ThemeString(", in ", ThemeAttr("logview", "severity_info")),
				 ThemeString("<module>", ThemeAttr("types", "path"))],
				[ThemeString("ZeroDivisionError:", ThemeAttr("logview", "severity_error")),
				 ThemeString(" division by zero", ThemeAttr("logview", "severity_info"))],
			 ], None),
			(["Traceback (most recent call last):",
			  " File \"<stdin>\", line 1, in <module>",
			  "ZeroDivisionError: division by zero"], {}, [
				[ThemeString("Traceback (most recent call last):", ThemeAttr("logview", "severity_error"))],
				[ThemeString(" File \"", ThemeAttr("logview", "severity_info")),
				 ThemeString("<stdin>", ThemeAttr("types", "path")),
				 ThemeString("\", line ", ThemeAttr("logview", "severity_info")),
				 ThemeString("1", ThemeAttr("types", "lineno")),
				 ThemeString(", in ", ThemeAttr("logview", "severity_info")),
				 ThemeString("<module>", ThemeAttr("types", "path"))],
				[ThemeString("ZeroDivisionError:", ThemeAttr("logview", "severity_error")),
				 ThemeString(" division by zero", ThemeAttr("logview", "severity_info"))],
			 ], None),
			(["",
			  "Traceback (most recent call last):",
			  " File \"<stdin>\", line 1, in <module>",
			  "ZeroDivisionError: division by zero"], {}, [
				[ThemeString("", ThemeAttr("logview", "severity_info"))],
				[ThemeString("Traceback (most recent call last):", ThemeAttr("logview", "severity_error"))],
				[ThemeString(" File \"", ThemeAttr("logview", "severity_info")),
				 ThemeString("<stdin>", ThemeAttr("types", "path")),
				 ThemeString("\", line ", ThemeAttr("logview", "severity_info")),
				 ThemeString("1", ThemeAttr("types", "lineno")),
				 ThemeString(", in ", ThemeAttr("logview", "severity_info")),
				 ThemeString("<module>", ThemeAttr("types", "path"))],
				[ThemeString("ZeroDivisionError:", ThemeAttr("logview", "severity_error")),
				 ThemeString(" division by zero", ThemeAttr("logview", "severity_info"))],
			 ], None),
		)
		for indata, options, expected_result, expected_exception in testdata:
			if isinstance(indata, list):
				indata_quoted = "\n".join(indata)
			else:
				indata_quoted = indata
			indata_quoted = indata_quoted.replace('\n', '\\n')
			try:
				if (tmp := fun(indata, **options)) != expected_result:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata_quoted}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						   "          output:\n" \
						  f"{yaml_dump(tmp, base_indent = 17)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
			except Exception as e:
				if expected_exception is not None:
					if isinstance(e, expected_exception):
						pass
					else:
						message = f"{fun_str}() did not yield expected result:\n" \
							  f"           input: \"{indata_quoted}\"\n" \
							   "         options:\n" \
							  f"{yaml_dump(options, base_indent = 17)}\n" \
							  f"       exception: {type(e)}\n" \
							  f"        expected: {expected_exception}"
						result = False
						break
				else:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: \"{indata_quoted}\"\n" \
						   "         options:\n" \
						  f"{yaml_dump(options, base_indent = 17)}\n" \
						  f"       exception: {type(e)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
	return message, result

def test_map_dataformat(verbose: bool = False) -> Tuple[str, bool]:
	message = ""
	result = True

	fun = formatter.map_dataformat
	fun_str = "formatter.map_dataformat"

	if result:
		# Indata format:
		# (kind, expected_result, expected_exception)
		testdata = (
			("YAML", formatter.format_yaml, None),
			("file.yaml", formatter.format_yaml, None),
			("foo.notarecognisedformat", formatter.format_none, None),
		)
		for indata, expected_result, expected_exception in testdata:
			try:
				if (tmp := fun(indata)) != expected_result:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: {indata}\n" \
						  f"          output: {tmp}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
			except Exception as e:
				if expected_exception is not None:
					if isinstance(e, expected_exception):
						pass
					else:
						message = f"{fun_str}() did not yield expected result:\n" \
							  f"           input: {indata}\n" \
							  f"       exception: {type(e)}\n" \
							  f"        expected: {expected_exception}"
						result = False
						break
				else:
					message = f"{fun_str}() did not yield expected result:\n" \
						  f"           input: {indata}\n" \
						  f"       exception: {type(e)}\n" \
						  f"        expected: {expected_result}"
					result = False
					break
	return message, result

tests: Dict = {
	("format_json_dumps",): {
		"callable": test_json_dumps,
		"result": None,
	},
	("format_markdown",): {
		"callable": test_format_markdown,
		"result": None,
	},
	("format_binary",): {
		"callable": test_format_binary,
		"result": None,
	},
	("format_ansible_line",): {
		"callable": test_format_ansible_line,
		"result": None,
	},
	("format_diff_line",): {
		"callable": test_format_diff_line,
		"result": None,
	},
	("format_crt",): {
		"callable": test_format_crt,
		"result": None,
	},
	("format_ini",): {
		"callable": test_format_ini,
		"result": None,
	},
	("format_python_traceback",): {
		"callable": test_format_python_traceback,
		"result": None,
	},
	("map_dataformat",): {
		"callable": test_map_dataformat,
		"result": None,
	},
}

def main() -> int:
	global kh
	global tests

	fail = 0
	success = 0
	verbose = False
	failed_testcases = []

	init_ansithemeprint(themefile = None)
	read_theme(DEFAULT_THEME_FILE, DEFAULT_THEME_FILE)

	# How many non-prepare testcases do we have?
	testcount = sum(1 for i in tests if not deep_get(tests[i], DictPath("prepare"), False))

	for i, test in enumerate(tests):
		ansithemeprint([ANSIThemeString(f"[{i:03}/{testcount - 1:03}]", "emphasis"),
				ANSIThemeString(f" {', '.join(test)}:", "default")])
		message, result = tests[test]["callable"](verbose = verbose)
		if len(message) > 0:
			ansithemeprint([ANSIThemeString("  FAIL", "error"),
					ANSIThemeString(f": {message}", "default")])
		else:
			ansithemeprint([ANSIThemeString("  PASS", "success")])
			success += 1
		tests[test]["result"] = result
		if not result:
			fail += 1
			failed_testcases.append(f"{i}: {', '.join(test)}")

	ansithemeprint([ANSIThemeString("\nSummary:", "header")])
	if fail > 0:
		ansithemeprint([ANSIThemeString(f"  FAIL: {fail}", "error")])
	else:
		ansithemeprint([ANSIThemeString(f"  FAIL: {fail}", "unknown")])
	ansithemeprint([ANSIThemeString(f"  PASS: {success}", "success")])

	if fail > 0:
		ansithemeprint([ANSIThemeString("\nFailed testcases:", "header")])
		for testcase in failed_testcases:
			ansithemeprint([ANSIThemeString("  • ", "separator"),
					ANSIThemeString(testcase, "default")], stderr = True)

	return fail

if __name__ == "__main__":
	main()
