#! /bin/sh
# vim: ts=4 filetype=python expandtab shiftwidth=4 softtabstop=4 syntax=python
# pylint: disable-next=anomalous-backslash-in-string
''''eval version=$( ls /usr/bin/python3.* | \
    grep '.*[0-9]$' | sort -nr -k2 -t. | head -n1 ) && \
    version=${version##/usr/bin/python3.} && [ ${version} ] && \
    [ ${version} -ge 8 ] && exec /usr/bin/python3.${version} "$0" "$@" || \
    exec /usr/bin/env python3 "$0" "$@"' #'''
# The above hack is to handle distros where /usr/bin/python3
# doesn't point to the latest version of python3 they provide
# Requires: python3 (>= 3.8)
#
# Copyright the Cluster Management Toolkit for Kubernetes contributors.
# SPDX-License-Identifier: MIT

# unit-tests for formatters.py

import builtins
import importlib
import sys
from typing import Any, Dict, List, Tuple
from unittest import mock
import yaml

from cmtpaths import DEFAULT_THEME_FILE
from cmttypes import deep_get, DictPath
from ansithemeprint import ANSIThemeStr, ansithemeprint, init_ansithemeprint
import formatters

from curses_helper import read_theme, ThemeAttr, ThemeRef, ThemeStr, dump_themearray

real_import = None

import_override = {}


def override_import(name: str, *args: List[Any], **kwargs: Any):
    retval, exception = import_override.get(name, (None, None))
    if exception:
        raise exception
    if retval:
        return retval
    return real_import(name, *args, **kwargs)


def yaml_dump(data: Dict, base_indent: int = 4) -> str:
    result = ""
    dump = yaml.dump(data)
    for line in dump.splitlines():
        result += f"{' '.ljust(base_indent)}{line}\n"
    return result


def test_json_ujson(verbose: bool = False) -> Tuple[str, bool]:
    global import_override

    message = ""
    result = True
    testobj = {"foo": "bar"}
    fun = formatters.json_dumps

    if result:
        import_override = {"ujson": (None, ModuleNotFoundError)}
        try:
            with mock.patch("builtins.__import__", side_effect=override_import):
                importlib.reload(formatters)
                _tmp = formatters.json_dumps(testobj)
        except Exception as e:
            message = f"overriding import ujson or {fun.__name__} failed; {e}"
            result = False

    if result:
        import_override = {"ujson": (None, None)}
        try:
            with mock.patch("builtins.__import__", side_effect=override_import):
                importlib.reload(formatters)
                _tmp = formatters.json_dumps(testobj)
        except Exception as e:
            message = f"overriding import ujson or {fun.__name__} failed; {e}"
            result = False

    import_override = {}
    return message, result


def test_json_dumps(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = formatters.json_dumps

    if result:
        # Indata format:
        # (dict, expected_result, expected_exception)
        testdata = (
            ({"foo": "bar", "bar": 1}, "{\n  \"foo\": \"bar\",\n  \"bar\": 1\n}", None),
        )
        for indata, expected_result, expected_exception in testdata:
            try:
                if (tmp := fun(indata)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata}\"\n" \
                              "          output:\n" \
                              f"{yaml_dump(tmp, base_indent = 17)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"           input: \"{indata}\"\n" \
                                  f"       exception: {type(e)}\n" \
                                  f"        expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata}\"\n" \
                              f"       exception: {type(e)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_format_markdown(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = formatters.format_markdown

    if result:
        # Indata format:
        # (lines, options, expected_result, expected_exception)
        testdata = (
            ("<!--- commented out\n"
             "lines -->"
             "# Header1\n"
             "text1\n"
             "## Header2\n"
             "_text2_\n"
             "### Header3\n"
             "__text3__\n"
             "#### Header4\n"
             "- item1\n"
             "- item2\n"
             "- item3\n"
             "```\n"
             "\n"
             "This is some code\n"
             "```\n"
             "The *code* has ended, but here's embedded `code`", {"start": None, "end": None}, [
                 [ThemeStr("Header1", ThemeAttr("types", "markdown_header_1"))],
                 [ThemeStr("text1", ThemeAttr("types", "generic"))],
                 [ThemeStr("Header2", ThemeAttr("types", "markdown_header_2"))],
                 [ThemeStr("text2", ThemeAttr("types", "markdown_italics"))],
                 [ThemeStr("Header3", ThemeAttr("types", "markdown_header_3"))],
                 [ThemeStr("text3", ThemeAttr("types", "markdown_bold"))],
                 [ThemeStr("Header4", ThemeAttr("types", "markdown_bold"))],
                 [ThemeRef("separators", "genericbullet"),
                  ThemeStr("item1", ThemeAttr("types", "generic"))],
                 [ThemeRef("separators", "genericbullet"),
                  ThemeStr("item2", ThemeAttr("types", "generic"))],
                 [ThemeRef("separators", "genericbullet"),
                  ThemeStr("item3", ThemeAttr("types", "generic"))],
                 [ThemeStr("", ThemeAttr("types", "generic"))],
                 [ThemeStr("This is some code", ThemeAttr("types", "markdown_code"))],
                 [ThemeStr("The ", ThemeAttr(context='types', key='generic'), False),
                  ThemeStr("code", ThemeAttr(context='types', key='markdown_italics'), False),
                  ThemeStr(" has ended, but here's embedded ",
                           ThemeAttr(context='types', key='generic'), False),
                  ThemeStr("code", ThemeAttr(context='types', key='markdown_code'), False)]],
             None),
            ("    This is some code\n"
             "\n"
             "The **code** has ended.", {"start": None, "end": None}, [
                 [ThemeStr("    This is some code", ThemeAttr("types", "markdown_code"))],
                 [ThemeStr("", ThemeAttr("types", "generic"))],
                 [ThemeStr("The ", ThemeAttr(context='types', key='generic'), False),
                  ThemeStr("code", ThemeAttr(context='types', key='markdown_bold'), False),
                  ThemeStr(" has ended.", ThemeAttr(context='types', key='generic'), False)]],
             None),
            (["    This is some code",
              "",
              "The **code** has ended."], {"start": None, "end": None}, [
                  [ThemeStr("    This is some code", ThemeAttr("types", "markdown_code"))],
                  [ThemeStr("", ThemeAttr("types", "generic"))],
                  [ThemeStr("The ", ThemeAttr(context='types', key='generic'), False),
                   ThemeStr("code", ThemeAttr(context='types', key='markdown_bold'), False),
                   ThemeStr(" has ended.", ThemeAttr(context='types', key='generic'), False)]],
             None),
            (["====",
              "This is not code",
              "----"], {"start": "====", "end": "----"},
             [
                 [ThemeStr("This is not code", ThemeAttr("types", "generic"))]],
             None),
            (["_This is italics_"], {},
             [
                 [ThemeStr("This is italics", ThemeAttr("types", "markdown_italics"))]],
             None),
            (["This_is_not_italics"], {},
             [
                 [ThemeStr("This_is_not_italics", ThemeAttr("types", "generic"))]],
             None),
        )
        for indata, options, expected_result, expected_exception in testdata:
            if isinstance(indata, list):
                indata_quoted = "\n".join(indata)
            else:
                indata_quoted = indata
            indata_quoted = indata_quoted.replace("\n", "\\n")
            try:
                if (tmp := fun(indata, **options)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata_quoted}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              f"          output: {repr(tmp)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"           input: \"{indata_quoted}\"\n" \
                                  "         options:\n" \
                                  f"{yaml_dump(options, base_indent = 17)}\n" \
                                  f"       exception: {type(e)}\n" \
                                  f"        expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata_quoted}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              f"       exception: {type(e)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_format_binary(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = formatters.format_binary

    try:
        if (tmp := fun("\xff\x3f")) != [[ThemeStr("Binary file; cannot view",
                                                  ThemeAttr("types", "generic"))]]:
            message = f"{fun.__name__}() did not yield expected result:\n" \
                      f"           input: <binary>\n" \
                      "          output:\n" \
                      f"{dump_themearray(tmp)}"
            result = False
    except Exception as e:
        message = f"{fun.__name__}() did not yield expected result:\n" \
                  f"           input: <binary>\n" \
                  f"       exception: {type(e)}"
        result = False
    return message, result


def test_format_ansible_line(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = formatters.format_ansible_line

    if result:
        # Indata format:
        # (lines, options, expected_result, expected_exception)
        testdata = (
            ("Some random output from Ansible", {},
             [
                 ThemeStr("Some random output from Ansible", ThemeAttr("types", "generic"))],
             None),
            ("Another random output from Ansible",
             {"override_formatting": ThemeAttr("types", "value")},
             [
                 ThemeStr("Another random output from Ansible", ThemeAttr("types", "value"))],
             None),
        )
        for indata, options, expected_result, expected_exception in testdata:
            try:
                if (tmp := fun(indata, **options)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              "          output:\n" \
                              f"{dump_themearray(tmp)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                raise
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"           input: \"{indata}\"\n" \
                                  "         options:\n" \
                                  f"{yaml_dump(options, base_indent = 17)}\n" \
                                  f"       exception: {type(e)}\n" \
                                  f"        expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              f"       exception: {type(e)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_format_diff_line(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = formatters.format_diff_line

    if result:
        # Indata format:
        # (lines, options, expected_result, expected_exception)
        testdata = (
            ("+ formatter_mapping = (", {}, [
                ThemeStr("+ formatter_mapping = (", ThemeAttr("logview", "severity_diffplus"))],
             None),
            ("- formatter_mapping = (", {}, [
                ThemeStr("- formatter_mapping = (", ThemeAttr("logview", "severity_diffminus"))],
             None),
            ("  formatter_mapping = (", {}, [
                ThemeStr("  formatter_mapping = (", ThemeAttr("logview", "severity_diffsame"))],
             None),
        )
        for indata, options, expected_result, expected_exception in testdata:
            try:
                if (tmp := fun(indata)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              "          output:\n" \
                              f"{dump_themearray(tmp)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"           input: \"{indata}\"\n" \
                                  "         options:\n" \
                                  f"{yaml_dump(options, base_indent = 17)}\n" \
                                  f"       exception: {type(e)}\n" \
                                  f"        expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              f"       exception: {type(e)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_format_yaml_line(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = formatters.format_yaml_line

    if result:
        # Indata format:
        # (lines, options, expected_result, expected_exception)
        testdata = (
            ("# A comment", {}, ([
                ThemeStr("# A comment", ThemeAttr("types", "yaml_comment"))],
             []), None),
            ("# A comment", {"override_formatting": ThemeAttr("types", "generic")}, ([
                ThemeStr("# A comment", ThemeAttr("types", "generic"))],
             []), None),
            ("    # Indented comment", {}, ([
                ThemeStr("    # Indented comment", ThemeAttr("types", "yaml_comment"))],
             []), None),
            ("key: value", {}, ([
                ThemeStr("key", ThemeAttr("types", "yaml_key")),
                ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                ThemeStr("value", ThemeAttr("types", "yaml_value"))],
             []), None),
            ("\"key\": \"value\"", {}, ([
                ThemeStr("\"key\"", ThemeAttr("types", "yaml_key")),
                ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                ThemeStr("\"value\"", ThemeAttr("types", "yaml_value"))],
             []), None),
            ("\"config\": \"value1\"\\n\"value2\"\\n\"value3\"",
             {"expand_newline_fields": ("config",)}, ([
                 ThemeStr("\"config\"", ThemeAttr("types", "yaml_key")),
                 ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                 ThemeStr("\"value1\"", ThemeAttr("types", "yaml_value")),
             ], [
                [ThemeStr("           ", ThemeAttr("types", "yaml_key"), False),
                 ThemeStr("\"value2\"", ThemeAttr("types", "yaml_value"), False)],
                [ThemeStr("           ", ThemeAttr("types", "yaml_key"), False),
                 ThemeStr("\"value3\"", ThemeAttr("types", "yaml_value"), False)],
             ]), None),
            ("\"key\": \"\033[0;4;37mvalue\"", {"value_strip_ansicodes": True}, ([
                ThemeStr("\"key\"", ThemeAttr("types", "yaml_key")),
                ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                ThemeStr("\"value\"", ThemeAttr("types", "yaml_value"))],
             []), None),
            ("\"key\": \"val\\tue\"", {"value_expand_tabs": True}, ([
                ThemeStr("\"key\"", ThemeAttr("types", "yaml_key")),
                ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                ThemeStr("\"val    ue\"", ThemeAttr("types", "yaml_value"))],
             []), None),
            ("\"key\": \"value\"", {"value_expand_tabs": True}, ([
                ThemeStr("\"key\"", ThemeAttr("types", "yaml_key")),
                ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                ThemeStr("\"value\"", ThemeAttr("types", "yaml_value"))],
             []), None),
            ("\"key\": \"value\"", {}, ([
                ThemeStr("\"key\"", ThemeAttr("types", "yaml_key")),
                ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                ThemeStr("\"value\"", ThemeAttr("types", "yaml_value"))],
             []), None),
            ("key: &define", {}, ([
                ThemeStr("key", ThemeAttr("types", "yaml_key")),
                ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                ThemeStr("&", ThemeAttr("types", "yaml_reference")),
                ThemeStr("define", ThemeAttr("types", "yaml_anchor"))],
             []), None),
            ("key: &define '#112233'", {}, ([
                ThemeStr("key", ThemeAttr("types", "yaml_key")),
                ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                ThemeStr("&", ThemeAttr("types", "yaml_reference")),
                ThemeStr("define", ThemeAttr("types", "yaml_anchor")),
                ThemeStr(" '#112233'", ThemeAttr("types", "yaml_value"))],
             []), None),
            ("key: *define", {}, ([
                ThemeStr("key", ThemeAttr("types", "yaml_key")),
                ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                ThemeStr("*", ThemeAttr("types", "yaml_reference")),
                ThemeStr("define", ThemeAttr("types", "yaml_anchor"))],
             []), None),
            ("key:", {"override_formatting": {"key": {"key": ThemeAttr("types", "generic")}}}, ([
                ThemeStr("key", ThemeAttr("types", "generic")),
                ThemeStr(":", ThemeAttr("types", "yaml_separator"))],
             []), None),
            ("key: {", {}, ([
                ThemeStr("key", ThemeAttr("types", "yaml_key")),
                ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                ThemeStr("{", ThemeAttr("types", "yaml_value"))],
             []), None),
            ("key: {", {}, ([
                ThemeStr("key", ThemeAttr("types", "yaml_key")),
                ThemeStr(": ", ThemeAttr("types", "yaml_separator")),
                ThemeStr("{", ThemeAttr("types", "yaml_value"))],
             []), None),
            ("}", {}, ([
                ThemeStr("}", ThemeAttr("types", "yaml_value"))],
             []), None),
            ("- value", {}, ([
                ThemeStr("", ThemeAttr("types", "generic")),
                ThemeRef("separators", "yaml_list"),
                ThemeStr("value", ThemeAttr("types", "yaml_value"))],
             []), None),
            ("- key:", {}, ([
                ThemeStr("", ThemeAttr("types", "generic")),
                ThemeRef("separators", "yaml_list"),
                ThemeStr("key", ThemeAttr("types", "yaml_key")),
                ThemeStr(':', ThemeAttr('types', 'yaml_separator'), False)],
             []), None),
            ("- key:", {"override_formatting": "a"}, None, TypeError),
            ('  "error": "please install istio or disable the istio ingress plugin: '
             'no matches for kind \\"Gateway\\" in version \\"networking.istio.io/v1beta1\\"",',
             {
                 "override_formatting": {
                     '"msg"': {
                         'key': ThemeAttr('types', 'yaml_key'),
                         'value': ThemeAttr('logview', 'severity_info')
                     },
                     '"message"': {
                         'key': ThemeAttr('types', 'yaml_key'),
                         'value': ThemeAttr('logview', 'severity_info')
                     },
                     '"err"': {
                         'key': ThemeAttr('types', 'yaml_key_error'),
                         'value': ThemeAttr('logview', 'severity_error')
                     },
                     '"error"': {
                         'key': ThemeAttr('types', 'yaml_key_error'),
                         'value': ThemeAttr('logview', 'severity_error')
                     }
                 },
                 'expand_newline_fields': ('config', 'errorVerbose',
                                           'stacktrace', 'status.message'),
                 'value_expand_tabs': True
             }, ([
                 ThemeStr('  "error"', ThemeAttr('types', 'yaml_key_error'), False),
                 ThemeStr(': ', ThemeAttr('types', 'yaml_separator'), False),
                 ThemeStr('"please install istio or disable the istio ingress plugin: '
                          'no matches for kind \\"Gateway\\" in version '
                          '\\"networking.istio.io/v1beta1\\"",',
                          ThemeAttr('logview', 'severity_error'), False)], []), None),
        )
        for indata, options, expected_result, expected_exception in testdata:
            try:
                if (tmp := fun(indata, **options)) != expected_result:
                    output, remnants = tmp
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              "          output:\n" \
                              f"{dump_themearray(tmp)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"           input: \"{indata}\"\n" \
                                  "         options:\n" \
                                  f"{yaml_dump(options, base_indent = 17)}\n" \
                                  f"       exception: {type(e)}\n" \
                                  f"        expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              f"       exception: {type(e)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_format_crt(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = formatters.format_crt

    if result:
        # Indata format:
        # (lines, options, expected_result, expected_exception)
        testdata = (
            ("-----BEGIN CERTIFICATE-----\n"
             "FOOBARBAZ\n"
             "-----END CERTIFICATE-----",
             {},
             [
                 [ThemeStr("-----BEGIN CERTIFICATE-----", ThemeAttr("types", "separator"))],
                 [ThemeStr("FOOBARBAZ", ThemeAttr("types", "generic"))],
                 [ThemeStr("-----END CERTIFICATE-----", ThemeAttr("types", "separator"))]],
             None),
            (["-----BEGIN CERTIFICATE-----",
              "FOOBARBAZ",
              "-----END CERTIFICATE-----"],
             {},
             [
                 [ThemeStr("-----BEGIN CERTIFICATE-----", ThemeAttr("types", "separator"))],
                 [ThemeStr("FOOBARBAZ", ThemeAttr("types", "generic"))],
                 [ThemeStr("-----END CERTIFICATE-----", ThemeAttr("types", "separator"))]],
             None),
            ("-----BEGIN CERTIFICATE-----\n"
             "FOOBARBAZ\n"
             "-----END CERTIFICATE-----",
             {"raw": True},
             [
                 [ThemeStr("-----BEGIN CERTIFICATE-----", ThemeAttr("types", "generic"))],
                 [ThemeStr("FOOBARBAZ", ThemeAttr("types", "generic"))],
                 [ThemeStr("-----END CERTIFICATE-----", ThemeAttr("types", "generic"))]],
             None),
        )
        for indata, options, expected_result, expected_exception in testdata:
            try:
                if (tmp := fun(indata, **options)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              "          output:\n" \
                              f"{dump_themearray(tmp)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"           input: \"{indata}\"\n" \
                                  "         options:\n" \
                                  f"{yaml_dump(options, base_indent = 17)}\n" \
                                  f"       exception: {type(e)}\n" \
                                  f"        expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              f"       exception: {type(e)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_format_ini(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = formatters.format_ini

    if result:
        # Indata format:
        # (lines, options, expected_result, expected_exception)
        testdata = (
            ("# comment\n"
             "[main]\n"
             "setting1 = foo\n"
             "setting2 = bar", {}, [
                 [ThemeStr("# comment", ThemeAttr("types", "ini_comment"))],
                 [ThemeStr("[main]", ThemeAttr("types", "ini_section"))],
                 [ThemeStr("setting1", ThemeAttr("types", "ini_key")),
                  ThemeStr(" = ", ThemeAttr("types", "ini_key_separator")),
                  ThemeStr("foo", ThemeAttr("types", "ini_value"))],
                 [ThemeStr("setting2", ThemeAttr("types", "ini_key")),
                  ThemeStr(" = ", ThemeAttr("types", "ini_key_separator")),
                  ThemeStr("bar", ThemeAttr("types", "ini_value"))]],
             None),
            (["# comment",
              "[main]",
              "  setting1 = foo",
              "  setting2 = bar"], {}, [
                  [ThemeStr("# comment", ThemeAttr("types", "ini_comment"))],
                  [ThemeStr("[main]", ThemeAttr("types", "ini_section"))],
                  [ThemeStr("  ", ThemeAttr("types", "generic")),
                   ThemeStr("setting1", ThemeAttr("types", "ini_key")),
                   ThemeStr(" = ", ThemeAttr("types", "ini_key_separator")),
                   ThemeStr("foo", ThemeAttr("types", "ini_value"))],
                  [ThemeStr("  ", ThemeAttr("types", "generic")),
                   ThemeStr("setting2", ThemeAttr("types", "ini_key")),
                   ThemeStr(" = ", ThemeAttr("types", "ini_key_separator")),
                   ThemeStr("bar", ThemeAttr("types", "ini_value"))]],
             None),
            (["# comment",
              "[main]",
              "setting1 = foo",
              "setting2 = bar"], {"raw": True}, [
                  [ThemeStr("# comment", ThemeAttr("types", "generic"))],
                  [ThemeStr("[main]", ThemeAttr("types", "generic"))],
                  [ThemeStr("setting1 = foo", ThemeAttr("types", "generic"))],
                  [ThemeStr("setting2 = bar", ThemeAttr("types", "generic"))]],
             None),
        )
        for indata, options, expected_result, expected_exception in testdata:
            if isinstance(indata, list):
                indata_quoted = "\n".join(indata)
            else:
                indata_quoted = indata
            indata_quoted = indata_quoted.replace('\n', '\\n')
            try:
                if (tmp := fun(indata, **options)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata_quoted}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              "          output:\n" \
                              f"{yaml_dump(tmp, base_indent = 17)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"           input: \"{indata_quoted}\"\n" \
                                  "         options:\n" \
                                  f"{yaml_dump(options, base_indent = 17)}\n" \
                                  f"       exception: {type(e)}\n" \
                                  f"        expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata_quoted}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              f"       exception: {type(e)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_format_caddyfile(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = formatters.format_caddyfile

    if result:
        # Indata format:
        # (lines, options, expected_result, expected_exception)
        testdata = (
            ([".:53 {",
              "    # comment",
              "",
              "}"], {},
             [
                [ThemeStr('.:53', ThemeAttr('types', 'caddyfile_site'), False),
                 ThemeStr(' ', ThemeAttr('types', 'caddyfile_block'), False),
                 ThemeStr('{', ThemeAttr('types', 'caddyfile_block'), False)],
                [ThemeStr('    # comment', ThemeAttr('types', 'caddyfile_comment'), False)],
                [ThemeStr('', ThemeAttr('types', 'generic'), False)],
                [ThemeStr('}', ThemeAttr('types', 'caddyfile_block'), False)]
            ], None),
            ([".:53 {",
              "    errors",
              "    health {",
              "       lameduck 5s",
              "    }",
              "    ready",
              "    kubernetes cluster.local in-addr.arpa ip6.arpa {",
              "       pods insecure",
              "       fallthrough in-addr.arpa ip6.arpa",
              "       ttl 30",
              "    }",
              "    prometheus :9153",
              "    forward . /etc/resolv.conf {",
              "       max_concurrent 1000",
              "    }",
              "    cache 30",
              "    loop",
              "    reload",
              "    loadbalance",
              "}"], {},
             [
                [ThemeStr('.:53', ThemeAttr('types', 'caddyfile_site'), False),
                 ThemeStr(' ', ThemeAttr('types', 'caddyfile_block'), False),
                 ThemeStr('{', ThemeAttr('types', 'caddyfile_block'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('errors', ThemeAttr('types', 'caddyfile_directive'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('health', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr(' ', ThemeAttr('types', 'caddyfile_block'), False),
                 ThemeStr('{', ThemeAttr('types', 'caddyfile_block'), False)],
                [ThemeStr('       ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('lameduck', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr(' 5s', ThemeAttr('types', 'caddyfile_argument'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_block'), False),
                 ThemeStr('}', ThemeAttr('types', 'caddyfile_block'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('ready', ThemeAttr('types', 'caddyfile_directive'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('kubernetes', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr(' cluster.local in-addr.arpa ip6.arpa',
                          ThemeAttr('types', 'caddyfile_argument'), False),
                 ThemeStr(' ', ThemeAttr('types', 'caddyfile_block'), False),
                 ThemeStr('{', ThemeAttr('types', 'caddyfile_block'), False)],
                [ThemeStr('       ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('pods', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr(' insecure', ThemeAttr('types', 'caddyfile_argument'), False)],
                [ThemeStr('       ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('fallthrough', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr(' in-addr.arpa ip6.arpa',
                          ThemeAttr('types', 'caddyfile_argument'), False)],
                [ThemeStr('       ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('ttl', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr(' 30', ThemeAttr('types', 'caddyfile_argument'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_block'), False),
                 ThemeStr('}', ThemeAttr('types', 'caddyfile_block'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('prometheus', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr(' :9153', ThemeAttr('types', 'caddyfile_argument'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('forward', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr(' . /etc/resolv.conf', ThemeAttr('types', 'caddyfile_argument'), False),
                 ThemeStr(' ', ThemeAttr('types', 'caddyfile_block'), False),
                 ThemeStr('{', ThemeAttr('types', 'caddyfile_block'), False)],
                [ThemeStr('       ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('max_concurrent', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr(' 1000', ThemeAttr('types', 'caddyfile_argument'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_block'), False),
                 ThemeStr('}', ThemeAttr('types', 'caddyfile_block'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('cache', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr(' 30', ThemeAttr('types', 'caddyfile_argument'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('loop', ThemeAttr('types', 'caddyfile_directive'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('reload', ThemeAttr('types', 'caddyfile_directive'), False)],
                [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                 ThemeStr('loadbalance', ThemeAttr('types', 'caddyfile_directive'), False)],
                [ThemeStr('}', ThemeAttr('types', 'caddyfile_block'), False)]
            ], None),
            (".:53 {\n"
             "    errors\n"
             "    health {\n"
             "       lameduck 5s\n"
             "    }\n"
             "    ready\n"
             "    kubernetes cluster.local in-addr.arpa ip6.arpa {\n"
             "       pods insecure\n"
             "       fallthrough in-addr.arpa ip6.arpa\n"
             "       ttl 30\n"
             "    }\n"
             "    prometheus :9153\n"
             "    forward . /etc/resolv.conf {\n"
             "       max_concurrent 1000\n"
             "    }\n"
             "    cache 30\n"
             "    loop\n"
             "    reload\n"
             "    loadbalance\n"
             "}", {},
             [
                 [ThemeStr('.:53', ThemeAttr('types', 'caddyfile_site'), False),
                  ThemeStr(' ', ThemeAttr('types', 'caddyfile_block'), False),
                  ThemeStr('{', ThemeAttr('types', 'caddyfile_block'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('errors', ThemeAttr('types', 'caddyfile_directive'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('health', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr(' ', ThemeAttr('types', 'caddyfile_block'), False),
                  ThemeStr('{', ThemeAttr('types', 'caddyfile_block'), False)],
                 [ThemeStr('       ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('lameduck', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr(' 5s', ThemeAttr('types', 'caddyfile_argument'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_block'), False),
                  ThemeStr('}', ThemeAttr('types', 'caddyfile_block'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('ready', ThemeAttr('types', 'caddyfile_directive'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('kubernetes', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr(' cluster.local in-addr.arpa ip6.arpa',
                           ThemeAttr('types', 'caddyfile_argument'), False),
                  ThemeStr(' ', ThemeAttr('types', 'caddyfile_block'), False),
                  ThemeStr('{', ThemeAttr('types', 'caddyfile_block'), False)],
                 [ThemeStr('       ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('pods', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr(' insecure', ThemeAttr('types', 'caddyfile_argument'), False)],
                 [ThemeStr('       ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('fallthrough', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr(' in-addr.arpa ip6.arpa',
                           ThemeAttr('types', 'caddyfile_argument'), False)],
                 [ThemeStr('       ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('ttl', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr(' 30', ThemeAttr('types', 'caddyfile_argument'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_block'), False),
                  ThemeStr('}', ThemeAttr('types', 'caddyfile_block'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('prometheus', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr(' :9153', ThemeAttr('types', 'caddyfile_argument'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('forward', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr(' . /etc/resolv.conf', ThemeAttr('types', 'caddyfile_argument'), False),
                  ThemeStr(' ', ThemeAttr('types', 'caddyfile_block'), False),
                  ThemeStr('{', ThemeAttr('types', 'caddyfile_block'), False)],
                 [ThemeStr('       ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('max_concurrent', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr(' 1000', ThemeAttr('types', 'caddyfile_argument'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_block'), False),
                  ThemeStr('}', ThemeAttr('types', 'caddyfile_block'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('cache', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr(' 30', ThemeAttr('types', 'caddyfile_argument'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('loop', ThemeAttr('types', 'caddyfile_directive'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('reload', ThemeAttr('types', 'caddyfile_directive'), False)],
                 [ThemeStr('    ', ThemeAttr('types', 'caddyfile_directive'), False),
                  ThemeStr('loadbalance', ThemeAttr('types', 'caddyfile_directive'), False)],
                 [ThemeStr('}', ThemeAttr('types', 'caddyfile_block'), False)]], None),
            ([".:53 {",
              "    # comment",
              "}"], {"raw": True},
             [
                [ThemeStr('.:53 {', ThemeAttr('types', 'generic'), False)],
                [ThemeStr('    # comment', ThemeAttr('types', 'generic'), False)],
                [ThemeStr('}', ThemeAttr('types', 'generic'), False)]], None),
        )
        for indata, options, expected_result, expected_exception in testdata:
            if isinstance(indata, list):
                indata_quoted = "\n".join(indata)
            else:
                indata_quoted = indata
            indata_quoted = indata_quoted.replace('\n', '\\n')
            try:
                if (tmp := fun(indata, **options)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata_quoted}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              "          output:\n" \
                              f"{yaml_dump(tmp, base_indent = 17)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__indata__}() did not yield expected result:\n" \
                                  f"           input: \"{indata_quoted}\"\n" \
                                  "         options:\n" \
                                  f"{yaml_dump(options, base_indent = 17)}\n" \
                                  f"       exception: {type(e)}\n" \
                                  f"        expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__indata__}() did not yield expected result:\n" \
                              f"           input: \"{indata_quoted}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              f"       exception: {type(e)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_format_python_traceback(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = formatters.format_python_traceback

    if result:
        # Indata format:
        # (lines, options, expected_result, expected_exception)
        testdata = (
            ("Traceback (most recent call last):\n"
             " File \"<stdin>\", line 1, in <module>\n"
             "ZeroDivisionError: division by zero",
             {},
             [
                 [ThemeStr("Traceback (most recent call last):",
                           ThemeAttr("logview", "severity_error"))],
                 [ThemeStr(" File \"", ThemeAttr("logview", "severity_info")),
                  ThemeStr("<stdin>", ThemeAttr("types", "path")),
                  ThemeStr("\", line ", ThemeAttr("logview", "severity_info")),
                  ThemeStr("1", ThemeAttr("types", "lineno")),
                  ThemeStr(", in ", ThemeAttr("logview", "severity_info")),
                  ThemeStr("<module>", ThemeAttr("types", "path"))],
                 [ThemeStr("ZeroDivisionError:", ThemeAttr("logview", "severity_error")),
                  ThemeStr(" division by zero", ThemeAttr("logview", "severity_info"))],
             ], None),
            (["Traceback (most recent call last):",
              " File \"<stdin>\", line 1, in <module>",
              "ZeroDivisionError: division by zero"],
             {},
             [
                 [ThemeStr("Traceback (most recent call last):",
                           ThemeAttr("logview", "severity_error"))],
                 [ThemeStr(" File \"", ThemeAttr("logview", "severity_info")),
                  ThemeStr("<stdin>", ThemeAttr("types", "path")),
                  ThemeStr("\", line ", ThemeAttr("logview", "severity_info")),
                  ThemeStr("1", ThemeAttr("types", "lineno")),
                  ThemeStr(", in ", ThemeAttr("logview", "severity_info")),
                  ThemeStr("<module>", ThemeAttr("types", "path"))],
                 [ThemeStr("ZeroDivisionError:", ThemeAttr("logview", "severity_error")),
                  ThemeStr(" division by zero", ThemeAttr("logview", "severity_info"))]], None),
            (["",
              "Traceback (most recent call last):",
              " File \"<stdin>\", line 1, in <module>",
              "ZeroDivisionError: division by zero"],
             {},
             [
                 [ThemeStr("", ThemeAttr("logview", "severity_info"))],
                 [ThemeStr("Traceback (most recent call last):",
                           ThemeAttr("logview", "severity_error"))],
                 [ThemeStr(" File \"", ThemeAttr("logview", "severity_info")),
                  ThemeStr("<stdin>", ThemeAttr("types", "path")),
                  ThemeStr("\", line ", ThemeAttr("logview", "severity_info")),
                  ThemeStr("1", ThemeAttr("types", "lineno")),
                  ThemeStr(", in ", ThemeAttr("logview", "severity_info")),
                  ThemeStr("<module>", ThemeAttr("types", "path"))],
                 [ThemeStr("ZeroDivisionError:", ThemeAttr("logview", "severity_error")),
                  ThemeStr(" division by zero", ThemeAttr("logview", "severity_info"))]], None),
        )
        for indata, options, expected_result, expected_exception in testdata:
            if isinstance(indata, list):
                indata_quoted = "\n".join(indata)
            else:
                indata_quoted = indata
            indata_quoted = indata_quoted.replace('\n', '\\n')
            try:
                if (tmp := fun(indata, **options)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata_quoted}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              "          output:\n" \
                              f"{yaml_dump(tmp, base_indent = 17)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"           input: \"{indata_quoted}\"\n" \
                                  "         options:\n" \
                                  f"{yaml_dump(options, base_indent = 17)}\n" \
                                  f"       exception: {type(e)}\n" \
                                  f"        expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: \"{indata_quoted}\"\n" \
                              "         options:\n" \
                              f"{yaml_dump(options, base_indent = 17)}\n" \
                              f"       exception: {type(e)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_map_dataformat(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = formatters.map_dataformat

    if result:
        # Indata format:
        # (kind, expected_result, expected_exception)
        testdata = (
            ("YAML", formatters.format_yaml, None),
            ("file.yaml", formatters.format_yaml, None),
            ("foo.notarecognisedformat", formatters.format_none, None),
        )
        for indata, expected_result, expected_exception in testdata:
            try:
                # pylint: disable-next=comparison-with-callable
                if (tmp := fun(indata)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: {indata}\n" \
                              f"          output: {tmp}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"           input: {indata}\n" \
                                  f"       exception: {type(e)}\n" \
                                  f"        expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           input: {indata}\n" \
                              f"       exception: {type(e)}\n" \
                              f"        expected: {expected_result}"
                    result = False
                    break
    return message, result


tests: Dict = {
    ("json_ujson",): {
        "callable": test_json_ujson,
        "result": None,
    },
    ("format_json_dumps",): {
        "callable": test_json_dumps,
        "result": None,
    },
    ("format_markdown",): {
        "callable": test_format_markdown,
        "result": None,
    },
    ("format_binary",): {
        "callable": test_format_binary,
        "result": None,
    },
    ("format_ansible_line",): {
        "callable": test_format_ansible_line,
        "result": None,
    },
    ("format_diff_line",): {
        "callable": test_format_diff_line,
        "result": None,
    },
    ("format_yaml_line",): {
        "callable": test_format_yaml_line,
        "result": None,
    },
    ("format_crt",): {
        "callable": test_format_crt,
        "result": None,
    },
    ("format_ini",): {
        "callable": test_format_ini,
        "result": None,
    },
    ("format_caddyfile",): {
        "callable": test_format_caddyfile,
        "result": None,
    },
    ("format_python_traceback",): {
        "callable": test_format_python_traceback,
        "result": None,
    },
    ("map_dataformat",): {
        "callable": test_map_dataformat,
        "result": None,
    },
}


def main() -> int:
    global tests
    global real_import
    real_import = builtins.__import__

    fail = 0
    success = 0
    verbose = False
    failed_testcases = []

    init_ansithemeprint(themefile=None)
    read_theme(DEFAULT_THEME_FILE, DEFAULT_THEME_FILE)

    # How many non-prepare testcases do we have?
    testcount = sum(1 for i in tests if not deep_get(tests[i], DictPath("prepare"), False))

    for i, test in enumerate(tests):
        ansithemeprint([ANSIThemeStr(f"[{i:03}/{testcount - 1:03}]", "emphasis"),
                        ANSIThemeStr(f" {', '.join(test)}:", "default")])
        message, result = tests[test]["callable"](verbose=verbose)
        if message:
            ansithemeprint([ANSIThemeStr("  FAIL", "error"),
                            ANSIThemeStr(f": {message}", "default")])
        else:
            ansithemeprint([ANSIThemeStr("  PASS", "success")])
            success += 1
        tests[test]["result"] = result
        if not result:
            fail += 1
            failed_testcases.append(f"{i}: {', '.join(test)}")

    ansithemeprint([ANSIThemeStr("\nSummary:", "header")])
    if fail:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "error")])
    else:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "unknown")])
    ansithemeprint([ANSIThemeStr(f"  PASS: {success}", "success")])

    if fail:
        ansithemeprint([ANSIThemeStr("\nFailed testcases:", "header")])
        for testcase in failed_testcases:
            ansithemeprint([ANSIThemeStr("  • ", "separator"),
                            ANSIThemeStr(testcase, "default")], stderr=True)
        sys.exit(fail)

    return 0


if __name__ == "__main__":
    main()
