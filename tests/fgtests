#! /bin/sh
# vim: ts=4 filetype=python expandtab shiftwidth=4 softtabstop=4 syntax=python
# pylint: disable-next=anomalous-backslash-in-string
''''eval version=$( ls /usr/bin/python3.* | \
    grep '.*[0-9]$' | sort -nr -k2 -t. | head -n1 ) && \
    version=${version##/usr/bin/python3.} && [ ${version} ] && \
    [ ${version} -ge 9 ] && exec /usr/bin/python3.${version} "$0" "$@" || \
    exec /usr/bin/env python3 "$0" "$@"' #'''
# The above hack is to handle distros where /usr/bin/python3
# doesn't point to the latest version of python3 they provide
# Requires: python3 (>= 3.9)
#
# Copyright the Cluster Management Toolkit for Kubernetes contributors.
# SPDX-License-Identifier: MIT

import sys
from typing import Any
from unittest import mock
import yaml

from clustermanagementtoolkit import about

from clustermanagementtoolkit.cmttypes import deep_get, DictPath, ProgrammingError

from clustermanagementtoolkit.ansithemeprint import ANSIThemeStr
from clustermanagementtoolkit.ansithemeprint import ansithemeprint, init_ansithemeprint

from clustermanagementtoolkit import fieldgetters

# unit-tests for fieldgetters.py


def yaml_dump(data: Any, base_indent: int = 4) -> str:
    result = ""
    dump = yaml.dump(data)
    for line in dump.splitlines():
        result += f"{' '.ljust(base_indent)}{line}\n"
    return result


def test_fieldgetter_executable_version(verbose: bool = False) -> tuple[str, bool]:
    message = ""
    result = True

    fun = fieldgetters.fieldgetter_executable_version

    if result:
        # Indata format:
        # (kwargs, mock_return_value, expected_result, expected_exception)
        testdata: tuple = (
            (
                {
                    "executable": "/bin/true",
                    "args": ["--version"],
                    "version_regex": r"true.+ (\d+)(\.)(\d+)",
                },
                "true (GNU coreutils) 9.5",
                ["9.5"],
                None,
            ),
            (
                {
                    "executable": "NONEXISTING",
                    "args": ["version"],
                    "version_regex": r"true.+ (\d+)(\.)(\d+)",
                },
                "",
                [""],
                None,
            ),
        )

        for kwargs, mock_response, expected_result, expected_exception in testdata:
            try:
                with mock.patch("clustermanagementtoolkit.fieldgetters."
                                "execute_command_with_response",
                                return_value=mock_response):
                    tmp = fun(**kwargs)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


class FakeKH():
    def __init__(self, version: tuple[int, int, str]) -> None:
        self.version = version

    def get_api_server_version(self) -> list:
        return list(self.version)


def test_fieldgetter_api_server_version(verbose: bool = False) -> tuple[str, bool]:
    message = ""
    result = True

    fun = fieldgetters.fieldgetter_api_server_version

    if result:
        # Indata format:
        # (mock_return_value, fields, expected_result, expected_exception)
        testdata: tuple = (
            (FakeKH((1, 29, "v1.29.1")), [0, 1, 2], [1, 29, "v1.29.1"], None),
            (FakeKH((1, 29, "v1.29.1")), [0], [1], None),
            (FakeKH((1, 29, "v1.29.1")), [1], [29], None),
            (FakeKH((1, 29, "v1.29.1")), [2], ["v1.29.1"], None),
            (FakeKH((1, 29, "v1.29.1")), [], [1, 29, "v1.29.1"], None),
            (None, [], None, ProgrammingError),
        )

        for kh_obj, fields, expected_result, expected_exception in testdata:
            try:
                tmp = fun(kubernetes_helper=kh_obj, fields=fields)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"         kh obj: {kh_obj}\n" \
                              f"         fields: {fields}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"         kh obj: {kh_obj}\n" \
                                  f"         fields: {fields}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"         kh obj: {kh_obj}\n" \
                              f"         fields: {fields}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_fieldgetter_cmt_version(verbose: bool = False) -> tuple[str, bool]:
    message = ""
    result = True

    fun = fieldgetters.fieldgetter_cmt_version

    if result:
        # Indata format:
        # (fields, expected_result, expected_exception)
        testdata: tuple = (
            (
                [0, 1, 2, 3, 4, 5],
                [
                    about.PROGRAM_SUITE_VERSION,
                    about.UI_PROGRAM_VERSION,
                    about.TOOL_PROGRAM_VERSION,
                    about.ADMIN_PROGRAM_VERSION,
                    about.INVENTORY_PROGRAM_VERSION,
                    about.INSTALL_PROGRAM_VERSION,
                ],
                None,
            ),
            (
                [0, 3],
                [
                    about.PROGRAM_SUITE_VERSION,
                    about.ADMIN_PROGRAM_VERSION,
                ],
                None,
            ),
            (
                [42],
                [],
                None,
            ),
        )

        for fields, expected_result, expected_exception in testdata:
            try:
                tmp = fun(fields=fields)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"         fields: {fields}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"         fields: {fields}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"         fields: {fields}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_fieldgetter_crc_version(verbose: bool = False) -> tuple[str, bool]:
    message = ""
    result = True

    fun = fieldgetters.fieldgetter_crc_version

    if result:
        # Indata format:
        # (fields, mock_return_value1, mock_return_value_2, expected_result, expected_exception)
        testdata: tuple = (
            (
                [0],
                [FileNotFoundError],
                ["Machine does not exist", ""],
                [""],
                None,
            ),
            (
                [0],
                ["/usr/bin/crc"],
                ["Machine does not exist", ""],
                [""],
                None,
            ),
            (
                [0],
                ["/usr/bin/crc"],
                ["CRC VM:          Running",
                 "CRC version: 2.46.0+8f40e8\nOpenShift version: 4.17.10\n"
                 "MicroShift version: 4.17.10"],
                ["2.46.0+8f40e8"],
                None,
            ),
            (
                [0, 1, 3],
                ["/usr/bin/crc"],
                ["CRC VM:          Running",
                 "CRC version: 2.46.0+8f40e8\nOpenShift version: 4.17.10\n"
                 "Podman version: 1.2.3\nSomething else here"],
                ["2.46.0+8f40e8", "4.17.10", "1.2.3"],
                None,
            ),
            (
                [4],
                ["/usr/bin/crc"],
                ["CRC VM:          Running",
                 "CRC version: 2.46.0+8f40e8\nOpenShift version: 4.17.10\n"
                 "Podman version: 1.2.3\nSomething else here"],
                [],
                None,
            ),
        )

        for fields, mock_response_1, mock_response_2, \
                expected_result, expected_exception in testdata:
            try:
                with mock.patch("clustermanagementtoolkit.fieldgetters.secure_which",
                                side_effect=mock_response_1), \
                        mock.patch("clustermanagementtoolkit.fieldgetters."
                                   "execute_command_with_response",
                                   side_effect=mock_response_2):
                    tmp = fun(fields=fields)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"         fields: {fields}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"         fields: {fields}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"         fields: {fields}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


tests: dict[tuple[str, ...], dict[str, Any]] = {
    ("fieldgetter_executable_version()",): {
        "callable": test_fieldgetter_executable_version,
        "result": None,
    },
    ("fieldgetter_api_server_version()",): {
        "callable": test_fieldgetter_api_server_version,
        "result": None,
    },
    ("fieldgetter_cmt_version()",): {
        "callable": test_fieldgetter_cmt_version,
        "result": None,
    },
    ("fieldgetter_crc_version()",): {
        "callable": test_fieldgetter_crc_version,
        "result": None,
    },
}


def main() -> int:
    global tests

    fail = 0
    success = 0
    verbose = False
    failed_testcases = []

    init_ansithemeprint(themefile=None)

    # How many non-prepare testcases do we have?
    testcount = sum(1 for i in tests if not deep_get(tests[i], DictPath("prepare"), False))
    start_at_task = 0
    end_at_task = testcount

    i = 1

    while i < len(sys.argv):
        opt = sys.argv[i]
        optarg = None
        if i + 1 < len(sys.argv):
            optarg = sys.argv[i + 1]
        if opt == "--start-at":
            if not (isinstance(optarg, str) and optarg.isnumeric()):
                raise ValueError("--start-at TASK requires an integer "
                                 f"in the range [0,{testcount}]")
            start_at_task = int(optarg)
            i += 1
        elif opt == "--end-at":
            if not (isinstance(optarg, str) and optarg.isnumeric()):
                raise ValueError(f"--end-at TASK requires an integer in the range [0,{testcount}]")
            end_at_task = int(optarg)
            i += 1
        else:
            sys.exit(f"Unknown argument: {opt}")
        i += 1

    for i, test in enumerate(tests):
        if i < start_at_task:
            continue
        if i > end_at_task:
            break
        ansithemeprint([ANSIThemeStr(f"[{i:03}/{testcount - 1:03}]", "emphasis"),
                        ANSIThemeStr(f" {', '.join(test)}:", "default")])
        message, result = tests[test]["callable"](verbose=verbose)
        if message:
            ansithemeprint([ANSIThemeStr("  FAIL", "error"),
                            ANSIThemeStr(f": {message}", "default")])
        else:
            ansithemeprint([ANSIThemeStr("  PASS", "success")])
            success += 1
        tests[test]["result"] = result
        if not result:
            fail += 1
            failed_testcases.append(f"{i}: {', '.join(test)}")

    ansithemeprint([ANSIThemeStr("\nSummary:", "header")])
    if fail:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "error")])
    else:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "unknown")])
    ansithemeprint([ANSIThemeStr(f"  PASS: {success}", "success")])

    if fail:
        ansithemeprint([ANSIThemeStr("\nFailed testcases:", "header")])
        for testcase in failed_testcases:
            ansithemeprint([ANSIThemeStr("  • ", "separator"),
                            ANSIThemeStr(testcase, "default")], stderr=True)
        sys.exit(fail)

    return 0


if __name__ == "__main__":
    main()
