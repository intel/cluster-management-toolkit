#! /bin/sh
# vim: ts=4 filetype=python expandtab shiftwidth=4 softtabstop=4 syntax=python
# pylint: disable-next=anomalous-backslash-in-string
''''eval version=$( ls /usr/bin/python3.* | \
    grep '.*[0-9]$' | sort -nr -k2 -t. | head -n1 ) && \
    version=${version##/usr/bin/python3.} && [ ${version} ] && \
    [ ${version} -ge 9 ] && exec /usr/bin/python3.${version} "$0" "$@" || \
    exec /usr/bin/env python3 "$0" "$@"' #'''
# The above hack is to handle distros where /usr/bin/python3
# doesn't point to the latest version of python3 they provide
# Requires: python3 (>= 3.9)
#
# Copyright the Cluster Management Toolkit for Kubernetes contributors.
# SPDX-License-Identifier: MIT

import builtins
import importlib
import sys
from typing import Any, cast, Optional
from collections.abc import Callable
from unittest import mock
import yaml

from clustermanagementtoolkit.cluster_actions import get_control_planes

from clustermanagementtoolkit.cmttypes import deep_get, DictPath, ProgrammingError

from clustermanagementtoolkit.ansithemeprint import ANSIThemeStr
from clustermanagementtoolkit.ansithemeprint import ansithemeprint, init_ansithemeprint

from clustermanagementtoolkit import kubernetes_helper

from clustermanagementtoolkit import listgetters
from clustermanagementtoolkit import listgetters_async

# unit-tests for listgetters.py


real_import: Optional[Callable] = None  # pylint: disable=invalid-name

import_override: dict = {}


kh: kubernetes_helper.KubernetesHelper = None  # type: ignore
kh_cache: kubernetes_helper.KubernetesResourceCache = None  # type: ignore


def override_import(name: str, *args: list[Any], **kwargs: Any):
    global real_import
    retval, exception = import_override.get(name, (None, None))
    if exception:
        raise exception
    if retval:
        return retval
    real_import = cast(Callable, real_import)
    return real_import(name, *args, **kwargs)


def yaml_dump(data: Any, base_indent: int = 4) -> str:
    result = ""
    dump = yaml.dump(data)
    for line in dump.splitlines():
        result += f"{' '.ljust(base_indent)}{line}\n"
    return result


# pylint: disable-next=unused-argument
def test_json_ujson(verbose: bool = False) -> tuple[str, bool]:
    global import_override  # pylint: disable=global-statement

    message = ""
    result = True

    if result:
        import_override = {"ujson": (None, ModuleNotFoundError)}
        try:
            with mock.patch("builtins.__import__", side_effect=override_import):
                importlib.reload(listgetters)
                import json
                print(f"{listgetters.DecodeException == json.decoder.JSONDecodeError=}")
        except Exception as e:  # pylint: disable=broad-except
            message = f"overriding import ujson failed; exception {e}"
            result = False

    if result:
        import_override = {"ujson": (None, None)}
        try:
            with mock.patch("builtins.__import__", side_effect=override_import):
                importlib.reload(listgetters)
                print(f"{listgetters.DecodeException == ValueError=}")
        except Exception as e:  # pylint: disable=broad-except
            message = f"overriding import ujson failed; exception {e}"
            result = False

    import_override = {}
    return message, result


def test_check_matchlists(verbose: bool = False) -> tuple[str, bool]:
    message = ""
    result = True

    fun = listgetters.check_matchlists

    if result:
        # Indata format:
        # (item, exacts, prefixes, suffixes, ins, expected_result, expected_exception)
        testdata: tuple[Any, ...] = (
            # Shouldn't match
            (
                "/home",
                ("/boot/efi",),
                ("/var/lib/origin/", "/run/", "/var/snap"),
                (),
                ("@docker",),
                False,
                None
            ),
            # Should be a prefix match
            (
                "/var/snap/firefox/common/foo",
                ("/boot/efi",),
                ("/var/lib/origin/", "/run/", "/var/snap"),
                (),
                ("@docker",),
                True,
                None
            ),
            # Should be a suffix match
            (
                "/swapfile",
                ("/boot/efi",),
                ("/var/lib/origin/", "/run/", "/var/snap"),
                ("swapfile"),
                ("@docker",),
                True,
                None
            ),
            # Should be an exact match
            (
                "/boot/efi",
                ("/boot/efi",),
                ("/var/lib/origin/", "/run/", "/var/snap"),
                (),
                ("@docker",),
                True,
                None
            ),
            # Should be an in-match
            (
                "foo@docker.bar",
                ("/boot/efi",),
                ("/var/lib/origin/", "/run/", "/var/snap"),
                (),
                ("@docker",),
                True,
                None
            ),
            # Shouldn't be a match
            (
                "/boot/efi1",
                ("/boot/efi",),
                ("/var/lib/origin/", "/run/", "/var/snap"),
                (),
                ("@docker",),
                False,
                None
            ),
        )

        for item, exacts, prefixes, suffixes, ins, expected_result, expected_exception in testdata:
            try:
                tmp = fun(item, exacts, prefixes, suffixes, ins)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           item: {item}\n" \
                              f"         exacts: {exacts}\n" \
                              f"       prefixes: {prefixes}\n" \
                              f"       suffixes: {suffixes}\n" \
                              f"            ins: {ins}\n" \
                              f"         result: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"           item: {item}\n" \
                                  f"         exacts: {exacts}\n" \
                                  f"       prefixes: {prefixes}\n" \
                                  f"       suffixes: {suffixes}\n" \
                                  f"            ins: {ins}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           item: {item}\n" \
                              f"         exacts: {exacts}\n" \
                              f"       prefixes: {prefixes}\n" \
                              f"       suffixes: {suffixes}\n" \
                              f"            ins: {ins}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


# This also tests split_matchlist()
def test_check_matchlist(verbose: bool = False) -> tuple[str, bool]:
    message = ""
    result = True

    fun = listgetters.check_matchlist

    if result:
        # Indata format:
        # (item, matchlist, expected_result, expected_exception)
        testdata: tuple[Any, ...] = (
            # Shouldn't match
            (
                "/home",
                ["/boot/efi", "/var/lib/origin/*", "/run/*",
                 "/var/snap/*", "*swapfile", "*@docker*"],
                False,
                None
            ),
            # Should be a prefix match
            (
                "/var/snap/firefox/common/foo",
                ["/boot/efi", "/var/lib/origin/*", "/run/*",
                 "/var/snap/*", "*swapfile", "*@docker*"],
                True,
                None
            ),
            # Should be a suffix match
            (
                "/swapfile",
                ["/boot/efi", "/var/lib/origin/*", "/run/*",
                 "/var/snap/*", "*swapfile", "*@docker*"],
                True,
                None
            ),
            # Should be an exact match
            (
                "/boot/efi",
                ["/boot/efi", "/var/lib/origin/*", "/run/*",
                 "/var/snap/*", "*swapfile", "*@docker*"],
                True,
                None
            ),
            # Should be an in-match
            (
                "foo@docker.bar",
                ["/boot/efi", "/var/lib/origin/*", "/run/*",
                 "/var/snap/*", "*swapfile", "*@docker*"],
                True,
                None
            ),
            # Shouldn't be a match
            (
                "/boot/efi1",
                ["/boot/efi", "/var/lib/origin/*", "/run/*",
                 "/var/snap/*", "*swapfile", "*@docker*"],
                False,
                None
            ),
            # Shouldn't be a match
            (
                "/boot/efi1",
                [],
                False,
                None
            ),
        )

        for item, matchlist, expected_result, expected_exception in testdata:
            try:
                tmp = fun(item, matchlist)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           item: {item}\n" \
                              f"      matchlist: {matchlist}\n" \
                              f"         result: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"           item: {item}\n" \
                                  f"      matchlist: {matchlist}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           item: {item}\n" \
                              f"      matchlist: {matchlist}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_get_device_model(verbose: bool = False) -> tuple[str, bool]:
    message = ""
    result = True

    fun = listgetters.get_device_model

    if result:
        # Indata format:
        # (obj, device, expected_result, expected_exception)
        testdata: tuple[Any, ...] = (
            (
                # Very trimmed down Ansible facts
                {
                    "ansible_devices": {
                        "nvme0n1": {
                            'virtual': 1,
                            'links': {
                                'ids': ['nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D',
                                        'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D_1',
                                        'nvme-eui.0000000001000000e4d25c2aa5874d01'],
                                'uuids': [],
                                'labels': [],
                                'masters': []
                            },
                            'vendor': None,
                            'model': 'INTEL SSDPEKKW256G7',
                            'sas_address': None,
                            'sas_device_handle': None,
                            'serial': 'BTPY64560TH8256D',
                            'removable': '0',
                            'support_discard': '512',
                            'partitions': {
                                'nvme0n1p3': {
                                    'links': {
                                        'ids': [
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D-part3',
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D_1-part3',
                                            'nvme-eui.0000000001000000e4d25c2aa5874d01-part3'
                                        ],
                                        'uuids': [
                                            '16a09d84-e5a6-4aec-99ab-cb4fee204d05'
                                        ],
                                        'labels': [],
                                        'masters': []
                                    },
                                    'start': '498116608',
                                    'sectors': '2000896',
                                    'sectorsize': 512,
                                    'size': '977.00 MB',
                                    'uuid': '16a09d84-e5a6-4aec-99ab-cb4fee204d05',
                                    'holders': []
                                },
                                'nvme0n1p1': {
                                    'links': {
                                        'ids': [
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D-part1',
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D_1-part1',
                                            'nvme-eui.0000000001000000e4d25c2aa5874d01-part1'
                                        ],
                                        'uuids': ['DB8D-E250'],
                                        'labels': [],
                                        'masters': []
                                    },
                                    'start': '2048',
                                    'sectors': '1048576',
                                    'sectorsize': 512,
                                    'size': '512.00 MB',
                                    'uuid': 'DB8D-E250',
                                    'holders': []
                                },
                                'nvme0n1p2': {
                                    'links': {
                                        'ids': [
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D-part2',
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D_1-part2',
                                            'nvme-eui.0000000001000000e4d25c2aa5874d01-part2'
                                        ],
                                        'uuids': [
                                            '09905813-8a00-4854-b2e9-be3d1fa6b921'
                                        ],
                                        'labels': [],
                                        'masters': []
                                    },
                                    'start': '1050624',
                                    'sectors': '497065984',
                                    'sectorsize': 512,
                                    'size': '237.02 GB',
                                    'uuid': '09905813-8a00-4854-b2e9-be3d1fa6b921',
                                    'holders': []
                                }
                            },
                            'rotational': '0',
                            'scheduler_mode': 'none',
                            'sectors': '500118192',
                            'sectorsize': '512',
                            'size': '238.47 GB',
                            'host': 'Non-Volatile memory controller: '
                                    'Intel Corporation SSD 600P Series (rev 03)',
                            'holders': []
                        }
                    }
                },
                "nvme0n1p2",
                "INTEL SSDPEKKW256G7",
                None,
            ),
            (
                # Very trimmed down Ansible facts
                {
                    "ansible_devices": {
                        "nvme0n1": {
                            'virtual': 1,
                            'links': {
                                'ids': ['nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D',
                                        'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D_1',
                                        'nvme-eui.0000000001000000e4d25c2aa5874d01'],
                                'uuids': [],
                                'labels': [],
                                'masters': []
                            },
                            'vendor': None,
                            'model': 'INTEL SSDPEKKW256G7',
                            'sas_address': None,
                            'sas_device_handle': None,
                            'serial': 'BTPY64560TH8256D',
                            'removable': '0',
                            'support_discard': '512',
                            'partitions': {
                                'nvme0n1p3': {
                                    'links': {
                                        'ids': [
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D-part3',
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D_1-part3',
                                            'nvme-eui.0000000001000000e4d25c2aa5874d01-part3'
                                        ],
                                        'uuids': [
                                            '16a09d84-e5a6-4aec-99ab-cb4fee204d05'
                                        ],
                                        'labels': [],
                                        'masters': []
                                    },
                                    'start': '498116608',
                                    'sectors': '2000896',
                                    'sectorsize': 512,
                                    'size': '977.00 MB',
                                    'uuid': '16a09d84-e5a6-4aec-99ab-cb4fee204d05',
                                    'holders': []
                                },
                                'nvme0n1p1': {
                                    'links': {
                                        'ids': [
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D-part1',
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D_1-part1',
                                            'nvme-eui.0000000001000000e4d25c2aa5874d01-part1'
                                        ],
                                        'uuids': ['DB8D-E250'],
                                        'labels': [],
                                        'masters': []
                                    },
                                    'start': '2048',
                                    'sectors': '1048576',
                                    'sectorsize': 512,
                                    'size': '512.00 MB',
                                    'uuid': 'DB8D-E250',
                                    'holders': []
                                },
                                'nvme0n1p2': {
                                    'links': {
                                        'ids': [
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D-part2',
                                            'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D_1-part2',
                                            'nvme-eui.0000000001000000e4d25c2aa5874d01-part2'
                                        ],
                                        'uuids': [
                                            '09905813-8a00-4854-b2e9-be3d1fa6b921'
                                        ],
                                        'labels': [],
                                        'masters': []
                                    },
                                    'start': '1050624',
                                    'sectors': '497065984',
                                    'sectorsize': 512,
                                    'size': '237.02 GB',
                                    'uuid': '09905813-8a00-4854-b2e9-be3d1fa6b921',
                                    'holders': []
                                }
                            },
                            'rotational': '0',
                            'scheduler_mode': 'none',
                            'sectors': '500118192',
                            'sectorsize': '512',
                            'size': '238.47 GB',
                            'host': 'Non-Volatile memory controller: '
                                    'Intel Corporation SSD 600P Series (rev 03)',
                            'holders': []
                        }
                    }
                },
                "nonexistingdevice",
                "",
                None,
            ),
            (
                # Empty facts
                {},
                "nonexistingdevice",
                "",
                None,
            ),
            (
                # empty partitions
                {
                    "ansible_devices": {
                        "nvme0n1": {
                            'virtual': 1,
                            'links': {
                                'ids': ['nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D',
                                        'nvme-INTEL_SSDPEKKW256G7_BTPY64560TH8256D_1',
                                        'nvme-eui.0000000001000000e4d25c2aa5874d01'],
                                'uuids': [],
                                'labels': [],
                                'masters': []
                            },
                            'vendor': None,
                            'model': 'INTEL SSDPEKKW256G7',
                            'sas_address': None,
                            'sas_device_handle': None,
                            'serial': 'BTPY64560TH8256D',
                            'removable': '0',
                            'support_discard': '512',
                            'partitions': {},
                            'rotational': '0',
                            'scheduler_mode': 'none',
                            'sectors': '500118192',
                            'sectorsize': '512',
                            'size': '238.47 GB',
                            'host': 'Non-Volatile memory controller: '
                                    'Intel Corporation SSD 600P Series (rev 03)',
                            'holders': []
                        }
                    }
                },
                "nonexistingdevice",
                "",
                None,
            ),
        )

        for obj, device, expected_result, expected_exception in testdata:
            try:
                tmp = fun(obj, device)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              "            obj:\n" \
                              f"{yaml_dump(obj, base_indent=17)}\n" \
                              f"         device: {device}\n" \
                              f"         result: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  "            obj:\n" \
                                  f"{yaml_dump(obj, base_indent=17)}\n" \
                                  f"         device: {device}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              "            obj:\n" \
                              f"{yaml_dump(obj, base_indent=17)}\n" \
                              f"         device: {device}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_filter_list_entry(verbose: bool = False) -> tuple[str, bool]:
    message = ""
    result = True

    fun = listgetters.filter_list_entry

    if result:
        # Indata format:
        # (obj, caller_obj, filters, expected_result, expected_exception, expected_exception_msg)
        testdata: tuple[Any, ...] = (
            # Object as source, substitutions
            (
                {
                    "status": {
                        "allocatable": {
                            "cpu": 8,
                        },
                    },
                },
                {},
                {
                    "resource": {
                        "source": "object",
                        "enabled": True,
                        "allow": [
                            {
                                "key": "<<<status>>>#allocatable#<<<name>>>",
                                "substitutions": {
                                    "<<<name>>>": ["name"],
                                    "<<<status>>>": "status",
                                },
                                "exists": True,
                            },
                        ],
                    },
                },
                True,
                None,
                "",
            ),
            # Object as source,
            (
                {
                    "metadata": {
                        "name": "system-node-critical",
                    },
                },
                {
                    "metadata": {
                        "priorityClassName": "system-node-critical",
                    },
                },
                {
                    "priority_class": {
                        "enabled": True,
                        "allow": [
                            {
                                "key": "spec#priorityClassName",
                                "values": {
                                    "source": "caller",
                                    "path": "metadata#name",
                                },
                            },
                        ],
                    },
                },
                True,
                None,
                "",
            ),
            # Object as source, dictlist
            (
                {
                    "metadata": {
                        "ownerReferences": [
                            {
                                "apiVersion": "kubevirt.io/v1",
                                "blockOwnerDeletion": True,
                                "controller": True,
                                "kind": "VirtualMachine",
                                "name": "testvm",
                            },
                        ],
                    },
                },
                {
                    "metadata": {
                        "name": "testvm",
                    },
                },
                {
                    "controller": {
                        "enabled": True,
                        "allow": [
                            {
                                "type": "dictlist",
                                "path": "metadata#ownerReferences",
                                "fields": {
                                    "kind": "VirtualMachine",
                                    "api_family": "kubevirt.io",
                                    "name": {
                                        "source": "caller",
                                        "path": "metadata#name",
                                    },
                                    "controller": True,
                                },
                            },
                        ]
                    },
                },
                False,
                None,
                "",
            ),
            # Object as source; no allow rules
            (
                {},
                {},
                {
                    "resource": {
                        "source": "object",
                        "enabled": True,
                        "allow": [],
                    },
                },
                False,
                None,
                "",
            ),
            # Object as source; filter disabled
            (
                {},
                {},
                {
                    "resource": {
                        "source": "object",
                        "enabled": False,
                        "allow": [
                            {
                                "key": "status#allocatable#<<<name>>>",
                                "substitutions": {
                                    "<<<name>>>": ["name"],
                                },
                                "exists": True,
                            }
                        ]
                    },
                },
                False,
                None,
                "",
            ),
            # No filters
            (
                {},
                {},
                {},
                False,
                None,
                "",
            ),
            # Incorrect rule-type
            (
                {},
                {},
                {
                    "controller": {
                        "enabled": True,
                        "allow": [
                            {
                                "type": "foobar",
                            },
                        ]
                    },
                },
                False,
                Exception,
                "errno.ENOTSUP",
            ),
        )

        for obj, caller_obj, filters, \
                expected_result, expected_exception, expected_exception_msg in testdata:
            try:
                with mock.patch("sys.exit", side_effect=Exception("errno.ENOTSUP")):
                    tmp = fun(obj, caller_obj, filters)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           result: {tmp}\n" \
                              f"  expected result: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception) \
                            and expected_exception_msg is None or expected_exception_msg == str(e):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"        exception: {type(e)}\n" \
                                  f"          message: {str(e)}\n" \
                                  f"         expected: {expected_exception}" \
                                  f" expected message: {expected_exception_msg}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"        exception: {type(e)}\n" \
                              f"          message: {str(e)}\n" \
                              f"  expected result: {expected_result}"
                    result = False
                    break
    return message, result


def test_listgetter_policy_rules(verbose: bool = False) -> tuple[str, bool]:
    message = ""
    result = True

    fun = listgetters.listgetter_policy_rules

    if result:
        # Indata format:
        # (obj, expected_result, expected_exception)
        testdata: tuple[Any, ...] = (
            (
                {
                    "rules": [
                        {
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ],
                            "apiGroups": [""],
                            "resources": [
                                "secrets"
                            ],
                            "resourceNames": [
                                "cert-manager-webhook-ca"
                            ]
                        },
                        {
                            "verbs": [
                                "create"
                            ],
                            "apiGroups": [""],
                            "resources": [
                                "secrets"
                            ]
                        }
                    ]
                },
                ([
                    {
                        "resource": "secrets",
                        "api_group": "",
                        "non_resource_urls": [],
                        "resource_names": [
                            "cert-manager-webhook-ca"
                        ],
                        "verbs": [
                            "get",
                            "list",
                            "watch",
                            "update",
                            "create"
                        ],
                        "verbs_all": False,
                        "verbs_get": True,
                        "verbs_list": True,
                        "verbs_watch": True,
                        "verbs_create": True,
                        "verbs_update": True,
                        "verbs_patch": False,
                        "verbs_delete": False,
                        "verbs_misc": []
                    }
                ], 200),
                None,
            ),
            (
                {
                    "rules": [
                        {
                            "verbs": [
                                "create",
                                "delete",
                                "deletecollection",
                                "patch",
                                "update"
                            ],
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificaterequests",
                                "issuers"
                            ]
                        },
                    ]
                },
                ([
                    {
                        "resource": "certificates",
                        "api_group": "cert-manager.io",
                        "non_resource_urls": [],
                        "resource_names": [],
                        "verbs": [
                            "create",
                            "delete",
                            "deletecollection",
                            "patch",
                            "update"
                        ],
                        "verbs_all": False,
                        "verbs_get": False,
                        "verbs_list": False,
                        "verbs_watch": False,
                        "verbs_create": True,
                        "verbs_update": True,
                        "verbs_patch": True,
                        "verbs_delete": True,
                        "verbs_misc": [
                            "deletecollection"
                        ]
                    },
                    {
                        "resource": "certificaterequests",
                        "api_group": "cert-manager.io",
                        "non_resource_urls": [],
                        "resource_names": [],
                        "verbs": [
                            "create",
                            "delete",
                            "deletecollection",
                            "patch",
                            "update"
                        ],
                        "verbs_all": False,
                        "verbs_get": False,
                        "verbs_list": False,
                        "verbs_watch": False,
                        "verbs_create": True,
                        "verbs_update": True,
                        "verbs_patch": True,
                        "verbs_delete": True,
                        "verbs_misc": [
                            "deletecollection"
                        ]
                    },
                    {
                        "resource": "issuers",
                        "api_group": "cert-manager.io",
                        "non_resource_urls": [],
                        "resource_names": [],
                        "verbs": [
                            "create",
                            "delete",
                            "deletecollection",
                            "patch",
                            "update"
                        ],
                        "verbs_all": False,
                        "verbs_get": False,
                        "verbs_list": False,
                        "verbs_watch": False,
                        "verbs_create": True,
                        "verbs_update": True,
                        "verbs_patch": True,
                        "verbs_delete": True,
                        "verbs_misc": [
                            "deletecollection"
                        ]
                    }
                ], 200),
                None,
            ),
            (
                {
                    "rules": [
                        {
                            "verbs": [
                                "*"
                            ],
                            "apiGroups": [
                                "gpu.resource.intel.com"
                            ],
                            "resources": [
                                "*"
                            ]
                        }
                    ]
                },
                ([
                    {
                        "resource": "*",
                        "api_group": "gpu.resource.intel.com",
                        "non_resource_urls": [],
                        "resource_names": [],
                        "verbs": [
                            "*"
                        ],
                        "verbs_all": True,
                        "verbs_get": True,
                        "verbs_list": True,
                        "verbs_watch": True,
                        "verbs_create": True,
                        "verbs_update": True,
                        "verbs_patch": True,
                        "verbs_delete": True,
                        "verbs_misc": [
                            "*"
                        ]
                    }
                ], 200),
                None,
            ),
            (
                {
                    "rules": [
                        {
                            "nonResourceURLs": [
                                "/healthz",
                            ],
                        },
                    ],
                    "verbs": [
                        "get",
                    ],
                },
                ([
                    {
                        "resource": "",
                        "api_group": "",
                        "non_resource_urls": [
                            "/healthz"
                        ],
                        "resource_names": [],
                        "verbs": [],
                        "verbs_all": False,
                        "verbs_get": False,
                        "verbs_list": False,
                        "verbs_watch": False,
                        "verbs_create": False,
                        "verbs_update": False,
                        "verbs_patch": False,
                        "verbs_delete": False,
                        "verbs_misc": []
                    },
                ], 200),
                None,
            ),
            (
                {},
                ([], 200),
                None,
            ),
            (
                None,
                ([], 200),
                None,
            ),
        )

        for obj, expected_result, expected_exception in testdata:
            try:
                tmp = fun(obj)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              "            obj:\n" \
                              f"{yaml_dump(obj, base_indent=17)}\n" \
                              f"         result: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  "            obj:\n" \
                                  f"{yaml_dump(obj, base_indent=17)}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              "            obj:\n" \
                              f"{yaml_dump(obj, base_indent=17)}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


def test_get_kubernetes_list(verbose: bool = False) -> tuple[str, bool]:
    message = ""
    result = True

    fun = listgetters_async.get_kubernetes_list
    indata: Any = None

    control_plane_list = get_control_planes(kubernetes_helper=kh)
    if not control_plane_list:
        message = "get_control_planes() did not return a list of control planes;\n" \
                  "is your cluster running?"
        return False

    control_plane_name = control_plane_list[0][0]

    if result:
        # Indata format:
        # (kh, kh_cache, kind, namespace, label_selector, field_selector, fetch_args,
        #  expected_result, expected_exception)
        #  expected_result: one path and value that should be in the list
        testdata: tuple[Any, ...] = (
            # Namespace; should always exist in a standard cluster
            (kh, kh_cache, ("Namespace", ""), "", "", "", {"sort_key": "metadata#name"},
             ("metadata#name", "default", False), None),
            # No kubernetes_helper; should raise
            (None, kh_cache, ("Namespace", ""), "", "", "", {"sort_key": "metadata#name"},
             None, ProgrammingError),
            # kubernetes_helper, no kh_cache; should work normally
            (kh, None, ("Namespace", ""), "", "", "", {"sort_key": "metadata#name"},
             ("metadata#name", "default", False), None),
            # Node; should always exist in a standard cluster
            (kh, kh_cache, ("Node", ""), "", "", "", {},
             ("metadata#name", control_plane_name, False), None),
            # Node; should always exist in a standard cluster
            (kh, kh_cache, ("Node", ""), "", "", "", {"postprocess": "node"},
             ("name", control_plane_name, True), None),
            # Pod; there's no standard name for any pod,
            # nor is there any reliable namespace (most seem to have kube-system,
            # but at least openshift wants to be different),
            # but all pods hopefully have metadata#name itself
            (kh, kh_cache, ("Pod", ""), "", "", "", {},
             ("metadata", "name", False), None),
            # Instead of checking for data we check if there's extra_data
            (kh, kh_cache, ("Pod", ""), "", "", "", {"postprocess": "pod"},
             ("", "", True), None),
        )
        for kh_, kh_cache_, kind, namespace, label_selector, field_selector, fetch_args, \
                expected_result, expected_exception in testdata:
            try:
                tmp, status = fun(kubernetes_helper=kh_, kh_cache=kh_cache_,
                                  kind=kind, namespace=namespace, label_selector=label_selector,
                                  field_selector=field_selector, fetch_args=fetch_args)
                expected_path, expected_value, extra_data = expected_result
                found = False
                for item in tmp:
                    if isinstance(status, list) and status and extra_data:
                        found = True
                        break
                    if isinstance(item, type):
                        value = getattr(item, expected_path)
                    else:
                        value = deep_get(item, DictPath(expected_path), "")
                    if expected_value in value:
                        found = True
                        break
                if not found:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"           kind: {kind}\n" \
                              f"      namespace: {namespace}\n" \
                              f" field_selector: {field_selector}\n" \
                              f" label_selector: {label_selector}\n" \
                              f"         result: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"         indata: {indata}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    raise
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"         indata: {indata}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


tests: dict[tuple[str, ...], dict[str, Any]] = {
    ("json_ujson",): {
        "callable": test_json_ujson,
        "result": None,
    },
    ("check_matchlists()",): {
        "callable": test_check_matchlists,
        "result": None,
    },
    ("check_matchlist()", "split_matchlist()"): {
        "callable": test_check_matchlist,
        "result": None,
    },
    ("get_device_model()",): {
        "callable": test_get_device_model,
        "result": None,
    },
    ("filter_list_entry()",): {
        "callable": test_filter_list_entry,
        "result": None,
    },
    ("listgetter_policy_rules()",): {
        "callable": test_listgetter_policy_rules,
        "result": None,
    },
}


tests_with_cluster: dict[tuple[str, ...], dict[str, Any]] = {
    ("get_kubernetes_list()",): {
        "callable": test_get_kubernetes_list,
        "result": None,
    },
}


def main() -> int:
    global kh
    global kh_cache
    global tests

    global real_import  # pylint: disable=global-statement
    real_import = builtins.__import__

    fail = 0
    success = 0
    verbose = False
    failed_testcases = []

    init_ansithemeprint(themefile=None)

    if "--include-cluster" in sys.argv:
        tests = {**tests, **tests_with_cluster}
        kh = kubernetes_helper.KubernetesHelper("lgtests", "v0.1")
        kh_cache = kubernetes_helper.KubernetesResourceCache()

    # How many non-prepare testcases do we have?
    testcount = sum(1 for i in tests if not deep_get(tests[i], DictPath("prepare"), False))
    start_at_task = 0
    end_at_task = testcount

    i = 1

    while i < len(sys.argv):
        opt = sys.argv[i]
        optarg = None
        if i + 1 < len(sys.argv):
            optarg = sys.argv[i + 1]
        if opt == "--start-at":
            if not (isinstance(optarg, str) and optarg.isnumeric()):
                raise ValueError("--start-at TASK requires an integer "
                                 f"in the range [0,{testcount}]")
            start_at_task = int(optarg)
            i += 1
        elif opt == "--end-at":
            if not (isinstance(optarg, str) and optarg.isnumeric()):
                raise ValueError(f"--end-at TASK requires an integer in the range [0,{testcount}]")
            end_at_task = int(optarg)
            i += 1
        elif opt == "--include-cluster":
            pass
        else:
            sys.exit(f"Unknown argument: {opt}")
        i += 1

    for i, test in enumerate(tests):
        if i < start_at_task:
            continue
        if i > end_at_task:
            break
        ansithemeprint([ANSIThemeStr(f"[{i:03}/{testcount - 1:03}]", "emphasis"),
                        ANSIThemeStr(f" {', '.join(test)}:", "default")])
        message, result = tests[test]["callable"](verbose=verbose)
        if message:
            ansithemeprint([ANSIThemeStr("  FAIL", "error"),
                            ANSIThemeStr(f": {message}", "default")])
        else:
            ansithemeprint([ANSIThemeStr("  PASS", "success")])
            success += 1
        tests[test]["result"] = result
        if not result:
            fail += 1
            failed_testcases.append(f"{i}: {', '.join(test)}")

    ansithemeprint([ANSIThemeStr("\nSummary:", "header")])
    if fail:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "error")])
    else:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "unknown")])
    ansithemeprint([ANSIThemeStr(f"  PASS: {success}", "success")])

    if fail:
        ansithemeprint([ANSIThemeStr("\nFailed testcases:", "header")])
        for testcase in failed_testcases:
            ansithemeprint([ANSIThemeStr("  • ", "separator"),
                            ANSIThemeStr(testcase, "default")], stderr=True)
        sys.exit(fail)

    return 0


if __name__ == "__main__":
    main()
