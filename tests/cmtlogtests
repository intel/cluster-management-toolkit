#! /bin/sh
# vim: ts=4 filetype=python expandtab shiftwidth=4 softtabstop=4 syntax=python
# pylint: disable-next=anomalous-backslash-in-string
''''eval version=$( ls /usr/bin/python3.* | \
    grep '.*[0-9]$' | sort -nr -k2 -t. | head -n1 ) && \
    version=${version##/usr/bin/python3.} && [ ${version} ] && \
    [ ${version} -ge 9 ] && exec /usr/bin/python3.${version} "$0" "$@" || \
    exec /usr/bin/env python3 "$0" "$@"' #'''
# The above hack is to handle distros where /usr/bin/python3
# doesn't point to the latest version of python3 they provide
# Requires: python3 (>= 3.9)
#
# Copyright the Cluster Management Toolkit for Kubernetes contributors.
# SPDX-License-Identifier: MIT

import sys
from typing import Any

from clustermanagementtoolkit.cmttypes import deep_get, DictPath
from clustermanagementtoolkit.ansithemeprint import ANSIThemeStr, ansithemeprint
from clustermanagementtoolkit.ansithemeprint import init_ansithemeprint
from clustermanagementtoolkit import cmtlog

# unit-tests for cmtlog.py


def test_log_array_to_string(verbose: bool = False) -> tuple[str, bool]:
    message = ""
    result = True

    fun = cmtlog.log_array_to_string

    if result:
        # Indata format:
        # (string, substitutions, expected_result, expected_exception)
        testdata: tuple[Any, ...] = (
            (
                ["foo", "bar"],
                '"strarray": [foo, bar]',
                None,
            ),
            (
                [[ANSIThemeStr("WARNING", "warning"), ANSIThemeStr(": not good!", "default")]],
                '"themearray": [[{"string": "WARNING", "themeref": "warning"}, '
                '{"string": ": not good!", "themeref": "default"}]]',
                None,
            ),
            ([], '', None),
        )
        for msglist, expected_result, expected_exception in testdata:
            try:
                if (tmp := fun(msglist)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {msglist}\n" \
                              f"         output: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"          input: {msglist}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {msglist}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
    return message, result


tests: dict[tuple[str, ...], dict[str, Any]] = {
    ("log_array_to_string()",): {
        "callable": test_log_array_to_string,
        "result": None,
    },
}


def main() -> int:
    global tests

    fail = 0
    success = 0
    verbose = False
    failed_testcases = []

    init_ansithemeprint(themefile=None)

    # How many non-prepare testcases do we have?
    testcount = sum(1 for i in tests if not deep_get(tests[i], DictPath("prepare"), False))
    start_at_task = 0
    end_at_task = testcount

    i = 1

    while i < len(sys.argv):
        opt = sys.argv[i]
        optarg = None
        if i + 1 < len(sys.argv):
            optarg = sys.argv[i + 1]
        if opt == "--start-at":
            if not (isinstance(optarg, str) and optarg.isnumeric()):
                raise ValueError("--start-at TASK requires an integer "
                                 f"in the range [0,{testcount}]")
            start_at_task = int(optarg)
            i += 1
        elif opt == "--end-at":
            if not (isinstance(optarg, str) and optarg.isnumeric()):
                raise ValueError(f"--end-at TASK requires an integer in the range [0,{testcount}]")
            end_at_task = int(optarg)
            i += 1
        else:
            sys.exit(f"Unknown argument: {opt}")
        i += 1

    for i, test in enumerate(tests):
        if i < start_at_task:
            continue
        if i > end_at_task:
            break
        ansithemeprint([ANSIThemeStr(f"[{i:03}/{testcount - 1:03}]", "emphasis"),
                        ANSIThemeStr(f" {', '.join(test)}:", "default")])
        message, result = tests[test]["callable"](verbose=verbose)
        if message:
            ansithemeprint([ANSIThemeStr("  FAIL", "error"),
                            ANSIThemeStr(f": {message}", "default")])
        else:
            ansithemeprint([ANSIThemeStr("  PASS", "success")])
            success += 1
        tests[test]["result"] = result
        if not result:
            fail += 1
            failed_testcases.append(f"{i}: {', '.join(test)}")

    ansithemeprint([ANSIThemeStr("\nSummary:", "header")])
    if fail:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "error")])
    else:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "unknown")])
    ansithemeprint([ANSIThemeStr(f"  PASS: {success}", "success")])

    if fail:
        ansithemeprint([ANSIThemeStr("\nFailed testcases:", "header")])
        for testcase in failed_testcases:
            ansithemeprint([ANSIThemeStr("  â€¢ ", "separator"),
                            ANSIThemeStr(testcase, "default")], stderr=True)
        sys.exit(fail)

    return 0


if __name__ == "__main__":
    main()
