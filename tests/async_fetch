#! /bin/sh
# vim: filetype=python
# pylint: disable-next=anomalous-backslash-in-string,line-too-long
''''eval version=$( ls /usr/bin/python3.* | grep '.*[0-9]$' | sort -nr -k2 -t. | head -n1 ) && version=${version##/usr/bin/python3.} && [ ${version} ] && [ ${version} -ge 8 ] && exec /usr/bin/python3.${version} "$0" "$@" || exec /usr/bin/env python3 "$0" "$@"' #'''
__doc__ = "The above hack is to handle distros that don't have /usr/bin/python3 point to the latest version of python3 they provide"

import faulthandler
faulthandler.enable()

from datetime import datetime
import sys
import time
from typing import Any, List, Tuple, Union

try:
	from natsort import natsorted
except ModuleNotFoundError:
	sys.exit("ModuleNotFoundError: Could not import natsort; you may need to (re-)run `cmt-install` or `pip3 install natsort`; aborting.")

import about
from cmttypes import deep_get, DictPath, StatusGroup
from kubernetes_helper import KubernetesHelper
import reexecutor

kh: KubernetesHelper = None # type: ignore

def get_kubernetes_list_async(*args, **kwargs) -> Tuple[List[Any], Union[int, List[StatusGroup]]]:
	kind = deep_get(kwargs, DictPath("kind"))
	namespace = deep_get(kwargs, DictPath("namespace"), "")
	fetch_args = deep_get(kwargs, DictPath("fetch_args"), {})
	sort_key = deep_get(fetch_args, DictPath("sort_key"), "")
	sort_reverse = deep_get(fetch_args, DictPath("sort_reverse"), False)
	postprocess = deep_get(fetch_args, DictPath("postprocess"), "")
	limit = deep_get(fetch_args, DictPath("limit"))
	extra_data = []

	vlist, _status = kh.get_list_by_kind_namespace(kind, namespace)
	if len(sort_key) > 0:
		vlist = natsorted(vlist, key = lambda x: deep_get(x, DictPath(sort_key), ""), reverse = sort_reverse)
	extra_data = _status
	if limit is not None:
		vlist = vlist[:limit]
	return vlist, extra_data

def main() -> None:
	global kh

	kh = KubernetesHelper(about.PROGRAM_SUITE_NAME, about.PROGRAM_SUITE_VERSION, None)

	# Just to get coverage
	executor = reexecutor.ReExecutor()
	executor.shutdown()

	executor = reexecutor.ReExecutor(max_workers = 6)

	fetches = 42

	executor.trigger("node", 3, get_kubernetes_list_async, kind = ("Node", ""))
	executor.trigger("pod", 3, get_kubernetes_list_async, kind = ("Pod", ""))
	executor.trigger("namespace", 2, get_kubernetes_list_async, kind = ("Namespace", ""))
	executor.trigger("secret", 4, get_kubernetes_list_async, kind = ("Secret", ""))
	executor.trigger("configmap", 5, get_kubernetes_list_async, kind = ("ConfigMap", ""))
	executor.trigger("service", 2, get_kubernetes_list_async, kind = ("Service", ""))

	while True:
		time.sleep(1)
		if (result := executor.get("node")) != ([], []):
			nodeinfo, node_statuses = result
			print(f"got nodeinfo: {len(nodeinfo)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("pod")) != ([], []):
			podinfo, pod_statuses = result
			print(f"got podinfo: {len(podinfo)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("event")) != ([], []):
			events, _status = result
			print(f"got events: {len(events)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("namespace")) != ([], []):
			namespaces, _status = result
			print(f"got namespaces: {len(namespaces)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("secret")) != ([], []):
			secrets, _status = result
			print(f"got secrets: {len(secrets)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("configmap")) != ([], []):
			configmaps, _status = result
			print(f"got configmaps: {len(configmaps)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("service")) != ([], []):
			services, _status = result
			print(f"got services: {len(services)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1

		if fetches < 0:
			break
	executor.shutdown()

if __name__ == "__main__":
	main()
