#! /bin/sh
# vim: filetype=python
# pylint: disable-next=anomalous-backslash-in-string,line-too-long
''''eval version=$( ls /usr/bin/python3.* | grep '.*[0-9]$' | sort -nr -k2 -t. | head -n1 ) && version=${version##/usr/bin/python3.} && [ ${version} ] && [ ${version} -ge 8 ] && exec /usr/bin/python3.${version} "$0" "$@" || exec /usr/bin/env python3 "$0" "$@"' #'''
__doc__ = "The above hack is to handle distros that don't have /usr/bin/python3 point to the latest version of python3 they provide"

import faulthandler
faulthandler.enable()

import concurrent.futures
from datetime import datetime, timedelta, timezone
import time
from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union

try:
	from natsort import natsorted
except ModuleNotFoundError:
	sys.exit("ModuleNotFoundError: Could not import natsort; you may need to (re-)run `cmt-install` or `pip3 install natsort`; aborting.")

import about
from cmttypes import deep_get, DictPath, StatusGroup
from kubernetes_helper import KubernetesHelper

kh: KubernetesHelper = None # type: ignore

def get_kubernetes_list_async(*args, **kwargs) -> Tuple[List[Any], Union[int, List[StatusGroup]]]:
	kind = deep_get(kwargs, DictPath("kind"))
	namespace = deep_get(kwargs, DictPath("namespace"), "")
	fetch_args = deep_get(kwargs, DictPath("fetch_args"), {})
	sort_key = deep_get(fetch_args, DictPath("sort_key"), "")
	sort_reverse = deep_get(fetch_args, DictPath("sort_reverse"), False)
	postprocess = deep_get(fetch_args, DictPath("postprocess"), "")
	limit = deep_get(fetch_args, DictPath("limit"))
	extra_data = []

	vlist, _status = kh.get_list_by_kind_namespace(kind, namespace)
	if len(sort_key) > 0:
		vlist = natsorted(vlist, key = lambda x: deep_get(x, DictPath(sort_key), ""), reverse = sort_reverse)
	if postprocess == "node":
		vlist = get_node_info(vlist, extra_vars = {})
		extra_data = [s.status_group for s in vlist]
	elif postprocess == "pod":
		vlist = get_pod_info(**{"_vlist": vlist, "in_depth_node_status": False})
		extra_data = [s.status_group for s in vlist]
	else:
		extra_data = _status
	if limit is not None:
		vlist = vlist[:limit]
	return vlist, extra_data

class MyExecutor:
	def __init__(self, max_workers = 1) -> None:
		self.executor = concurrent.futures.ThreadPoolExecutor(max_workers = max_workers)
		self.futures = {}

	def __trigger(self, key: str) -> None:
		data = self.futures[key]
		data["triggered"] = True
		data["future"] = self.executor.submit(data["function"], *data["args"], **data["kwargs"])
		self.futures[key] = data

	def trigger(self, key: str, interval: int, fn: Callable, /, *args, **kwargs) -> None:
		if key not in self.futures:
			data = {
				"function": fn,
				"args": args,
				"kwargs": kwargs,
				"last_update": datetime.now(),
				"future": None,
				"interval": interval,
			}
			self.futures[key] = data
		self.__trigger(key)

	def retrigger(self, key: str) -> None:
		self.trigger(key, self.futures[key]["interval"], self.futures[key]["function"], self.futures[key]["args"], self.futures[key]["kwargs"])

	def get(self, key: str) -> Tuple[List[Type], List[Any]]:
		info = []
		status = []

		if key in self.futures:
			if self.futures[key]["triggered"] and self.futures[key]["future"].done():
				self.futures[key]["last_update"] = datetime.now()
				info, status = self.futures[key]["future"].result()
				self.futures[key]["triggered"] = False
				self.futures[key]["future"] = None
			elif not self.futures[key]["triggered"] and (datetime.now() - self.futures[key]["last_update"]).seconds > self.futures[key]["interval"]:
				self.retrigger(key)
		return info, status

	def shutdown(self) -> None:
		self.executor.shutdown(wait = False, cancel_futures = True)

def main() -> None:
	global kh

	kh = KubernetesHelper(about.PROGRAM_SUITE_NAME, about.PROGRAM_SUITE_VERSION, None)

	executor = MyExecutor(max_workers = 6)

	fetches = 42

	executor.trigger("node", 3, get_kubernetes_list_async, kind = ("Node", ""))
	executor.trigger("pod", 3, get_kubernetes_list_async, kind = ("Pod", ""))
	executor.trigger("namespace", 2, get_kubernetes_list_async, kind = ("Namespace", ""))
	executor.trigger("secret", 4, get_kubernetes_list_async, kind = ("Secret", ""))
	executor.trigger("configmap", 5, get_kubernetes_list_async, kind = ("ConfigMap", ""))
	executor.trigger("service", 2, get_kubernetes_list_async, kind = ("Service", ""))

	while True:
		time.sleep(1)
		if (result := executor.get("node")) != ([], []):
			nodeinfo, node_statuses = result
			print(f"got nodeinfo: {len(nodeinfo)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("pod")) != ([], []):
			podinfo, pod_statuses = result
			print(f"got podinfo: {len(podinfo)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("event")) != ([], []):
			events, _status = result
			print(f"got events: {len(events)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("namespace")) != ([], []):
			namespaces, _status = result
			print(f"got namespaces: {len(namespaces)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("secret")) != ([], []):
			secrets, _status = result
			print(f"got secrets: {len(secrets)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("configmap")) != ([], []):
			configmaps, _status = result
			print(f"got configmaps: {len(configmaps)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1
		if (result := executor.get("service")) != ([], []):
			services, _status = result
			print(f"got services: {len(services)=}; timestamp: {datetime.now().strftime('%S')}")
			fetches -= 1

		if fetches < 0:
			return True

if __name__ == "__main__":
	main()
