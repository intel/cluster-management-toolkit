#! /usr/bin/env python3
"""
A checker that validates iktio, iktio_yaml, and networkio

Usage: ./tests/iotests
"""

from pathlib import Path
import re
from types import GeneratorType
from typing import Dict
import yaml

from iktio import check_path
from iktio import secure_copy, secure_mkdir, secure_read, secure_read_string, secure_rm, secure_rmdir, secure_symlink, secure_which, secure_write_string
from iktio_yaml import secure_read_yaml, secure_read_yaml_all, secure_write_yaml
from networkio import verify_checksum
from iktprint import iktprint, init_iktprint
from ikttypes import ANSIThemeString, deep_get, DictPath, FilePath, FilePathAuditError, SecurityChecks, SecurityPolicy, SecurityStatus

CHECKSUMS_DIR = FilePath(str(Path.cwd().joinpath("checksums")))
TEST_DIR = FilePath(str(Path.cwd().joinpath("testpaths")))

def test_check_path(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio.check_path() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	path = deep_get(checkdata, DictPath("path"), "")
	checks = deep_get(checkdata, DictPath("checks"), None)
	expect = deep_get(checkdata, DictPath("expect"))
	result = check_path(path, checks = checks, exit_on_critical = False, message_on_error = False)
	if result != expect:
		return 1, f"expected {expect}, got {result}"
	return 0, ""

def test_secure_read_string(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio.secure_read_string() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	path = deep_get(checkdata, DictPath("path"), "")
	expect = deep_get(checkdata, DictPath("expect"))

	result = False

	try:
		string = secure_read_string(path)
		if expect == "string":
			if isinstance(string, str):
				result = True
	except Exception as e: # pylint: disable=broad-except
		if type(e) == expect: # pylint: disable=unidiomatic-typecheck
			result = True
		else:
			string = f"{type(e)}"

	if result == False:
		return 1, f"expected {expect}, got {string}"
	return 0, ""

def test_secure_read_yaml(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio.secure_read_yaml() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	path = deep_get(checkdata, DictPath("path"), "")
	expect = deep_get(checkdata, DictPath("expect"))

	result = False
	string = ""

	try:
		d = secure_read_yaml(path)

		if expect == "dict" and isinstance(d, dict):
			result = True
	except Exception as e: # pylint: disable=broad-except
		if type(e) == expect: # pylint: disable=unidiomatic-typecheck
			result = True
		else:
			string = f"{type(e)}"

	if result == False:
		return 1, f"expected {expect}, got {string}"
	return 0, ""

def test_secure_read_yaml_all(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio.secure_read_yaml_all() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	path = deep_get(checkdata, DictPath("path"), "")
	expect = deep_get(checkdata, DictPath("expect"))

	result = False
	string = ""

	try:
		ld = secure_read_yaml_all(path)
		if expect == "generator" and isinstance(ld, GeneratorType):
			result = True
	except Exception as e: # pylint: disable=broad-except
		if type(e) == expect: # pylint: disable=unidiomatic-typecheck
			result = True
		else:
			string = f"{type(e)}"

	if result == False:
		return 1, f"expected {expect}, got {string}"
	return 0, ""

def test_secure_which(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio.secure_which() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	path = deep_get(checkdata, DictPath("path"), "")
	expect = deep_get(checkdata, DictPath("expect"))
	fallback_allowlist = deep_get(checkdata, DictPath("fallback_allowlist"))
	security_policy = deep_get(checkdata, DictPath("security_policy"))

	result = False

	try:
		string = str(secure_which(path, fallback_allowlist = fallback_allowlist, security_policy = security_policy))
		if expect == "string" and isinstance(string, str):
			result = True
	except Exception as e: # pylint: disable=broad-except
		if type(e) == expect: # pylint: disable=unidiomatic-typecheck
			result = True
		else:
			string = f"{type(e)}"

	if result == False:
		return 1, f"expected {expect}, got {string}"
	return 0, ""

def test_secure_rm(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio.secure_rm() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	path = deep_get(checkdata, DictPath("path"), "")
	expect = deep_get(checkdata, DictPath("expect"))

	ignore_non_existing = expect is None

	try:
		secure_rm(path, ignore_non_existing = ignore_non_existing)
		fail = expect
	except FileNotFoundError:
		fail = True
	except FilePathAuditError as e:
		tmp = re.match(r".*Violated rules: (.*)", str(e))
		if tmp is None:
			raise FilePathAuditError("Failed to extract FilePathAuditError violations; this is a programming error.") from e
		violations_string = tmp[1]
		fail = set(violations_string.split(","))

	if fail != expect and expect is not None:
		return 1, f"expected {expect}, got {violations_string}"

	# Even when expect is None it's still a FAIL if the directory stays behind
	if (expect is None or fail != expect) and Path(path).is_file():
		return 1, f"failed to delete file {path}; following testcases are likely to fail."
	return 0, ""

def test_secure_rmdir(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio.secure_rmdir() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	path = deep_get(checkdata, DictPath("path"), "")
	expect = deep_get(checkdata, DictPath("expect"))

	ignore_non_existing = expect is None

	try:
		secure_rmdir(path, ignore_non_existing = ignore_non_existing)
		fail = expect
	except FileNotFoundError:
		fail = True
	except FilePathAuditError as e:
		tmp = re.match(r".*Violated rules: (.*)", str(e))
		if tmp is None:
			raise FilePathAuditError("Failed to extract FilePathAuditError violations; this is a programming error.") from e
		violations_string = tmp[1]
		fail = set(violations_string.split(","))

	if fail != expect and expect is not None:
		return 1, f"expected {expect}, got {violations_string}"

	# Even when expect is None it's still a FAIL if the directory stays behind
	if (expect is None or fail != expect) and Path(path).is_dir():
		return 1, f"failed to delete directory {path}; following testcases are likely to fail."
	return 0, ""

def test_secure_mkdir(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio.secure_mkdir() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	path = deep_get(checkdata, DictPath("path"), "")
	permissions = deep_get(checkdata, DictPath("permissions"))
	exist_ok = deep_get(checkdata, DictPath("exist_ok"))
	expect = deep_get(checkdata, DictPath("expect"))

	violations = secure_mkdir(path, permissions = permissions, exist_ok = exist_ok)
	violations_set = set(violations)

	if not Path(path).is_dir():
		violations_set.add(SecurityStatus.DOES_NOT_EXIST)
	else:
		path_stat = Path(path).stat()
		if path_stat.st_mode & 0o777 != permissions:
			violations_set.add(SecurityStatus.PERMISSIONS)

	if violations_set != expect:
		return 1, f"expected {', '.join(expect)}, got {', '.join(violations_set)}"
	return 0, ""

def test_secure_copy(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio.secure_copy() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	src = deep_get(checkdata, DictPath("src"), "")
	path = deep_get(checkdata, DictPath("path"), "")
	permissions = deep_get(checkdata, DictPath("permissions"))
	expect = deep_get(checkdata, DictPath("expect"))

	violations = secure_copy(src, path, permissions = permissions)
	violations_set = set(violations)

	if not Path(path).is_file():
		violations_set.add(SecurityStatus.DOES_NOT_EXIST)
		violations_set.discard(SecurityStatus.OK)
	else:
		path_stat = Path(path).stat()
		if path_stat.st_mode & 0o777 != permissions:
			violations_set.add(SecurityStatus.PERMISSIONS)
			violations_set.discard(SecurityStatus.OK)

	if violations_set != expect:
		return 1, f"expected {', '.join(expect)}, got {', '.join(violations_set)}"
	return 0, ""

def test_secure_symlink(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio.secure_symlink() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	src = deep_get(checkdata, DictPath("src"), "")
	path = deep_get(checkdata, DictPath("path"), "")
	replace = deep_get(checkdata, DictPath("replace"))
	expect = deep_get(checkdata, DictPath("expect"))

	violations = secure_symlink(src, path, replace_existing = replace)
	violations_set = set(violations)

	if violations == [SecurityStatus.OK] and not Path(path).is_symlink():
		violations_set.add(SecurityStatus.DOES_NOT_EXIST)
		violations_set.discard(SecurityStatus.OK)

	if violations_set != expect:
		return 1, f"expected {', '.join(expect)}, got {', '.join(violations_set)}"
	return 0, ""

def test_secure_write_string(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio.secure_write_string() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	path = deep_get(checkdata, DictPath("path"), "")
	permissions = deep_get(checkdata, DictPath("permissions"))
	expect = deep_get(checkdata, DictPath("expect"))
	write_mode = deep_get(checkdata, DictPath("write_mode"), "w")

	try:
		secure_write_string(path, string = "Random text", permissions = permissions, write_mode = write_mode)
		violations_set = {"SecurityStatus.OK"}
	except FilePathAuditError as e:
		tmp = re.match(r".*Violated rules: (.*)", str(e))
		if tmp is None:
			raise FilePathAuditError("Failed to extract FilePathAuditError violations; this is a programming error.") from e
		violations_string = tmp[1]
		violations_set = set(violations_string.split(","))

	if violations_set == {"SecurityStatus.OK"}:
		if not Path(path).is_file():
			violations_set.add("SecurityStatus.DOES_NOT_EXIST")
		else:
			path_stat = Path(path).stat()
			if path_stat.st_mode & 0o777 != permissions:
				violations_set.add("SecurityStatus.PERMISSIONS")

	if expect is not None and violations_set != expect:
		return 1, f"expected {', '.join(expect)}, got {', '.join(violations_set)}"
	return 0, ""

def test_secure_write_yaml(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether iktio_yaml.secure_write_yaml() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	path = deep_get(checkdata, DictPath("path"), "")
	permissions = deep_get(checkdata, DictPath("permissions"))
	expect = deep_get(checkdata, DictPath("expect"))

	try:
		data = {
			"valid_yaml": True,
		}
		secure_write_yaml(path, data = data, permissions = permissions)
		violations_set = {"SecurityStatus.OK"}
	except FilePathAuditError as e:
		tmp = re.match(r".*Violated rules: (.*)", str(e))
		if tmp is None:
			raise FilePathAuditError("Failed to extract FilePathAuditError violations; this is a programming error.") from e
		violations_string = tmp[1]
		violations_set = set(violations_string.split(","))

	if violations_set == {"SecurityStatus.OK"}:
		if not Path(path).is_file():
			violations_set.add("SecurityStatus.DOES_NOT_EXIST")
		else:
			path_stat = Path(path).stat()
			if path_stat.st_mode & 0o777 != permissions:
				violations_set.add("SecurityStatus.PERMISSIONS")

	if expect is not None and violations_set != expect:
		return 1, f"expected {', '.join(expect)}, got {', '.join(violations_set)}"
	return 0, ""

def test_verify_checksum(testcase: str, checkdata: Dict) -> int:
	"""
	Test whether networkio.verify_checksum() works correctly

		Parameters:
			testcase (str): The name of the testcase
			checkdata (dict): Parameters used by the test
		Returns:
			retval (int): 0 on success, 1 on failure
	"""

	path = deep_get(checkdata, DictPath("path"), "")
	checksum_type = deep_get(checkdata, DictPath("hash"))
	expect = deep_get(checkdata, DictPath("expect"))

	data = secure_read(path, read_mode = "rb")
	csum = secure_read(FilePath(f"{path}.{checksum_type}"), read_mode = "rb")
	result = verify_checksum(csum, checksum_type, data, "testcase.txt")

	if result != expect:
		return 1, f"expected {expect}, got {result}"
	return 0, ""

testcases = {
	"01: File permissions": {
		"path": FilePath(f"{TEST_DIR}/01-wrong_permissions"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_NOT_EXECUTABLE,
			SecurityChecks.IS_FILE,
		],
		"expect": [SecurityStatus.PERMISSIONS],
	},
	"02: File path resolution": {
		"path": FilePath(f"{TEST_DIR}/02-symlink"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_NOT_EXECUTABLE,
			SecurityChecks.IS_FILE,
		],
		"expect": [SecurityStatus.PATH_NOT_RESOLVING_TO_SELF],
	},
	"03: Directory permissions": {
		"path": FilePath(f"{TEST_DIR}/03-wrong_dir_permissions"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_DIR,
		],
		"expect": [SecurityStatus.PERMISSIONS],
	},
	"04: Directory path resolution and destination permissions": {
		"path": FilePath(f"{TEST_DIR}/04-dir_symlink"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_DIR,
		],
		"expect": [SecurityStatus.PATH_NOT_RESOLVING_TO_SELF, SecurityStatus.PERMISSIONS],
	},
	"05: Wrong type (Expected file)": {
		"path": FilePath(f"{TEST_DIR}/13-correct_directory"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_NOT_EXECUTABLE,
			SecurityChecks.IS_FILE,
		],
		"expect": [SecurityStatus.IS_NOT_FILE],
	},
	"06: Correct type (Expected file)": {
		"path": FilePath(f"{TEST_DIR}/05-not_executable.sh"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_NOT_EXECUTABLE,
			SecurityChecks.IS_FILE,
		],
		"expect": [SecurityStatus.OK],
	},
	"07: Wrong type (Expected directory)": {
		"path": FilePath(f"{TEST_DIR}/05-not_executable.sh"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_DIR,
		],
		"expect": [SecurityStatus.IS_NOT_DIR],
	},
	"08: Correct type (Expected directory)": {
		"path": FilePath(f"{TEST_DIR}/13-correct_directory"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_DIR,
		],
		"expect": [SecurityStatus.OK],
	},
	"09: Wrong type (Expected symlink)": {
		"path": FilePath(f"{TEST_DIR}/08-not_utf8.txt"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_SYMLINK,
		],
		"expect": [SecurityStatus.IS_NOT_SYMLINK],
	},
	"10: Correct type (Expected symlink)": {
		"path": FilePath(f"{TEST_DIR}/02-symlink"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_SYMLINK,
		],
		"expect": [SecurityStatus.OK],
	},
	"11: Not executable (should be)": {
		"path": FilePath(f"{TEST_DIR}/05-not_executable.sh"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_EXECUTABLE,
			SecurityChecks.IS_FILE,
		],
		"expect": [SecurityStatus.IS_NOT_EXECUTABLE],
	},
	"12: Executable (shouldn't be)": {
		"path": FilePath(f"{TEST_DIR}/06-executable.sh"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_NOT_EXECUTABLE,
			SecurityChecks.IS_FILE,
		],
		"expect": [SecurityStatus.IS_EXECUTABLE],
	},
	"13: Dangling symlink": {
		"path": FilePath(f"{TEST_DIR}/07-dangling_symlink"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
		],
		"expect": [SecurityStatus.DOES_NOT_EXIST],
	},
	"14: Non-existing path": {
		"path": FilePath(f"{TEST_DIR}/this path does not exist/not this either"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_NOT_EXECUTABLE,
			SecurityChecks.IS_FILE,
		],
		"expect": [SecurityStatus.PARENT_DOES_NOT_EXIST],
	},
	"15: Parent has incorrect permissions": {
		"path": FilePath(f"{TEST_DIR}/03-wrong_dir_permissions/14-correct_file_in_wrong_permission_directory"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_FILE,
		],
		"expect": [SecurityStatus.PARENT_PERMISSIONS],
	},
	"16: Parent directory is symlink": {
		"path": FilePath(f"{TEST_DIR}/15-symlink_directory/16-correct_file_in_correct_permission_directory"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_NOT_EXECUTABLE,
			SecurityChecks.IS_FILE,
		],
		"expect": [SecurityStatus.PARENT_PATH_NOT_RESOLVING_TO_SELF],
	},
	"17: Valid path": {
		"path": FilePath(f"{TEST_DIR}/13-correct_directory/16-correct_file_in_correct_permission_directory"),
		"test": test_check_path,
		"checks": [
			SecurityChecks.PARENT_RESOLVES_TO_SELF,
			SecurityChecks.RESOLVES_TO_SELF,
			SecurityChecks.OWNER_IN_ALLOWLIST,
			SecurityChecks.PARENT_OWNER_IN_ALLOWLIST,
			SecurityChecks.PERMISSIONS,
			SecurityChecks.PARENT_PERMISSIONS,
			SecurityChecks.EXISTS,
			SecurityChecks.IS_NOT_EXECUTABLE,
			SecurityChecks.IS_FILE,
		],
		"expect": [SecurityStatus.OK],
	},
	"18: Valid UTF-8": {
		"path": FilePath(f"{TEST_DIR}/11-valid_yaml_but_single.yaml"),
		"test": test_secure_read_string,
		"expect": "string"
	},
	"19: Invalid UTF-8": {
		"path": FilePath(f"{TEST_DIR}/08-not_utf8.txt"),
		"test": test_secure_read_string,
		"expect": UnicodeDecodeError,
	},
	"20: Invalid single YAML (secure_read_yaml)": {
		"path": FilePath(f"{TEST_DIR}/09-this_is_not_valid.yaml"),
		"test": test_secure_read_yaml,
		"expect": yaml.parser.ParserError,
	},
	"21: Valid single YAML (secure_read_yaml)": {
		"path": FilePath(f"{TEST_DIR}/11-valid_yaml_but_single.yaml"),
		"test": test_secure_read_yaml,
		"expect": "dict",
	},
	"22: Valid multi YAML (secure_read_yaml)": {
		"path": FilePath(f"{TEST_DIR}/10-valid_yaml_for_load_all.yaml"),
		"test": test_secure_read_yaml,
		"expect": yaml.composer.ComposerError,
	},
	"23: Valid multi YAML (secure_read_yaml_all)": {
		"path": FilePath(f"{TEST_DIR}/10-valid_yaml_for_load_all.yaml"),
		"test": test_secure_read_yaml_all,
		"expect": "generator",
	},
	# Note: yaml.safe_load_all() yields a generator; this means that the data is validated when iterated over,
	#       NOT when loaded
	"24: Invalid YAML (secure_read_yaml_all)": {
		"path": FilePath(f"{TEST_DIR}/12-valid_yaml_followed_by_invalid_yaml.yaml"),
		"test": test_secure_read_yaml_all,
		"expect": "generator",
	},
	"25: Valid single YAML (secure_read_yaml_all)": {
		"path": FilePath(f"{TEST_DIR}/11-valid_yaml_but_single.yaml"),
		"test": test_secure_read_yaml_all,
		"expect": "generator",
	},
	"26: /bin/ssh [fallback=[], STRICT] (secure_which)": {
		"path": FilePath("/bin/ssh"),
		"test": test_secure_which,
		"fallback_allowlist": [],
		"security_policy": SecurityPolicy.STRICT,
		"expect": "string",
	},
	"27: /usr/local/bin/ssh [fallback=[], STRICT] (secure_which)": {
		"path": FilePath("/usr/local/bin/ssh"),
		"test": test_secure_which,
		"fallback_allowlist": [],
		"security_policy": SecurityPolicy.STRICT,
		"expect": FileNotFoundError,
	},
	"28: /usr/local/bin/ssh [fallback=[\"/bin\", \"/sbin\", \"/usr/bin\", \"/usr/sbin\"], ALLOWLIST_STRICT] (secure_which)": {
		"path": FilePath("/usr/local/bin/ssh"),
		"test": test_secure_which,
		"fallback_allowlist": ["/bin", "/sbin", "/usr/bin", "/usr/sbin"],
		"security_policy": SecurityPolicy.ALLOWLIST_STRICT,
		"expect": "string",
	},
	"29: /usr/local/bin/ssh [fallback=[\"testpaths/ssh\"], ALLOWLIST_RELAXED] (secure_which)": {
		"path": FilePath("/usr/local/bin/ssh"),
		"test": test_secure_which,
		"fallback_allowlist": [f"{TEST_DIR}/ssh"],
		"security_policy": SecurityPolicy.ALLOWLIST_RELAXED,
		"expect": FileNotFoundError,
	},
	"30: /usr/local/bin/ssh [fallback=[\"/bin\", \"/sbin\", \"/usr/bin\", \"/usr/sbin\", \"testpaths/ssh\"], ALLOWLIST_RELAXED] (secure_which)": {
		"path": FilePath("/usr/local/bin/ssh"),
		"test": test_secure_which,
		"fallback_allowlist": ["/bin", "/sbin", "/usr/bin", "/usr/sbin", f"{TEST_DIR}/ssh"],
		"security_policy": SecurityPolicy.ALLOWLIST_RELAXED,
		"expect": "string",
	},
	# This is not meant as a test; it prepares for the next test
	"--: Deleting testdir as preparation (secure_rmdir)": {
		"path": FilePath(f"{TEST_DIR}/testdir"),
		"test": test_secure_rmdir,
		"expect": None,
	},
	"31: Deleting non-empty directory (secure_rmdir)": {
		"path": FilePath(f"{TEST_DIR}/13-correct_directory"),
		"test": test_secure_rmdir,
		"expect": {"SecurityStatus.DIR_NOT_EMPTY"},
	},
	"32: Deleting non-directory (secure_rmdir)": {
		"path": FilePath(f"{TEST_DIR}/08-not_utf8.txt"),
		"test": test_secure_rmdir,
		"expect": {"SecurityStatus.IS_NOT_DIR"},
	},
	"33: Creating testdir; exist_ok = True (secure_mkdir)": {
		"path": FilePath(f"{TEST_DIR}/testdir"),
		"test": test_secure_mkdir,
		"exist_ok": True,
		"permissions": 0o700,
		"expect": set(),
	},
	"34: Creating testdir; exist_ok = False (secure_mkdir)": {
		"path": FilePath(f"{TEST_DIR}/testdir"),
		"test": test_secure_mkdir,
		"exist_ok": False,
		"permissions": 0o700,
		"expect": {SecurityStatus.EXISTS},
	},
	"35: Deleting testdir (secure_rmdir)": {
		"path": FilePath(f"{TEST_DIR}/testdir"),
		"test": test_secure_rmdir,
		"expect": None,
	},
	# This is not meant as a test; it prepares for the next test
	"--: Deleting testfile as preparation (secure_rm)": {
		"path": FilePath(f"{TEST_DIR}/testfile.txt"),
		"test": test_secure_rm,
		"expect": None,
	},
	# This is not meant as a test; it prepares for the next test
	"--: Deleting testfile.yaml as preparation (secure_rm)": {
		"path": FilePath(f"{TEST_DIR}/testfile.yaml"),
		"test": test_secure_rm,
		"expect": None,
	},
	"36: Deleting directory (secure_rm)": {
		"path": FilePath(f"{TEST_DIR}/13-correct_directory"),
		"test": test_secure_rm,
		"expect": {"SecurityStatus.IS_NOT_FILE"},
	},
	"37: Writing text to a file (secure_write_string)": {
		"path": FilePath(f"{TEST_DIR}/testfile.txt"),
		"test": test_secure_write_string,
		"permissions": 0o600,
		"expect": {"SecurityStatus.OK"},
	},
	"38: Appending text to a file (secure_write_string)": {
		"path": FilePath(f"{TEST_DIR}/testfile.txt"),
		"test": test_secure_write_string,
		"write_mode": "a",
		"permissions": 0o600,
		"expect": {"SecurityStatus.OK"},
	},
	"39: Writing string to existing file (secure_write_string)": {
		"path": FilePath(f"{TEST_DIR}/testfile.txt"),
		"test": test_secure_write_string,
		"write_mode": "x",
		"permissions": 0o600,
		"expect": {"SecurityStatus.EXISTS"},
	},
	"40: Writing YAML to a file (secure_write_yaml)": {
		"path": FilePath(f"{TEST_DIR}/testfile.yaml"),
		"test": test_secure_write_yaml,
		"permissions": 0o600,
		"expect": {"SecurityStatus.OK"},
	},
	"41: Deleting testfile (secure_rm)": {
		"path": FilePath(f"{TEST_DIR}/testfile.txt"),
		"test": test_secure_rm,
		"expect": {SecurityStatus.OK},
	},
	"42: Deleting testfile.yaml (secure_rm)": {
		"path": FilePath(f"{TEST_DIR}/testfile.yaml"),
		"test": test_secure_rm,
		"expect": {SecurityStatus.OK},
	},
	"43: Copying valid file to valid destination (secure_copy)": {
		"src": FilePath(f"{TEST_DIR}/10-valid_yaml_for_load_all.yaml"),
		"path": FilePath(f"{TEST_DIR}/testfile.yaml"),
		"test": test_secure_copy,
		"permissions": 0o600,
		"expect": {SecurityStatus.OK},
	},
	"44: Copying valid file to non-valid destination (secure_copy)": {
		"src": FilePath(f"{TEST_DIR}/10-valid_yaml_for_load_all.yaml"),
		"path": FilePath(f"{TEST_DIR}/testfile.yaml"),
		"test": test_secure_copy,
		"permissions": 0o600,
		"expect": {SecurityStatus.EXISTS},
	},
	"--: Deleting testfile.yaml (secure_rm)": {
		"path": FilePath(f"{TEST_DIR}/testfile.yaml"),
		"test": test_secure_rm,
		"expect": None,
	},
	"45: Copying symlinked file (secure_copy)": {
		"src": FilePath(f"{TEST_DIR}/02-symlink"),
		"path": FilePath(f"{TEST_DIR}/testfile.yaml"),
		"test": test_secure_copy,
		"permissions": 0o600,
		"expect": {SecurityStatus.DOES_NOT_EXIST, SecurityStatus.PATH_NOT_RESOLVING_TO_SELF},
	},
	"46: Copying file to symlinked directory (secure_copy)": {
		"src": FilePath(f"{TEST_DIR}/15-symlink_directory/16-correct_file_in_correct_permission_directory"),
		"path": FilePath(f"{TEST_DIR}/testfile.yaml"),
		"test": test_secure_copy,
		"permissions": 0o600,
		"expect": {SecurityStatus.DOES_NOT_EXIST, SecurityStatus.PARENT_PATH_NOT_RESOLVING_TO_SELF},
	},
	"47: verify_checksum() (MD5)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "md5",
		"test": test_verify_checksum,
		# A warning about weak checksum is also expected
		"expect": True,
	},
	"48: verify_checksum() (SHA)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "sha",
		"test": test_verify_checksum,
		# A warning about weak checksum is also expected
		"expect": True,
	},
	"49: verify_checksum() (SHA1)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "sha1",
		"test": test_verify_checksum,
		# A warning about weak checksum is also expected
		"expect": True,
	},
	"50: verify_checksum() (SHA224)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "sha224",
		"test": test_verify_checksum,
		"expect": True,
	},
	"51: verify_checksum() (SHA256)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "sha256",
		"test": test_verify_checksum,
		"expect": True,
	},
	"52: verify_checksum() (SHA384)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "sha384",
		"test": test_verify_checksum,
		"expect": True,
	},
	"53: verify_checksum() (SHA512)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "sha512",
		"test": test_verify_checksum,
		"expect": True,
	},
	"54: verify_checksum() (Blake 2B)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "blake2b",
		"test": test_verify_checksum,
		"expect": True,
	},
	"55: verify_checksum() (Blake 2S)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "blake2s",
		"test": test_verify_checksum,
		"expect": True,
	},
	"56: verify_checksum() (SHA3-224)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "sha3_224",
		"test": test_verify_checksum,
		"expect": True,
	},
	"57: verify_checksum() (SHA3-256)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "sha3_256",
		"test": test_verify_checksum,
		"expect": True,
	},
	"58: verify_checksum() (SHA3-384)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "sha3_384",
		"test": test_verify_checksum,
		"expect": True,
	},
	"59: verify_checksum() (SHA3-512)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "sha3_512",
		"test": test_verify_checksum,
		"expect": True,
	},
	"60: verify_checksum() (Shake-128)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "shake_128",
		"test": test_verify_checksum,
		"expect": True,
	},
	"61: verify_checksum() (Shake-256)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase.txt"),
		"hash": "shake_256",
		"test": test_verify_checksum,
		"expect": True,
	},
	"62: verify_checksum()--invalid (MD5)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "md5",
		"test": test_verify_checksum,
		# A warning about weak checksum is also expected
		"expect": False,
	},
	"63: verify_checksum()--invalid (SHA)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "sha",
		"test": test_verify_checksum,
		# A warning about weak checksum is also expected
		"expect": False,
	},
	"64: verify_checksum()--invalid (SHA1)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "sha1",
		"test": test_verify_checksum,
		# A warning about weak checksum is also expected
		"expect": False,
	},
	"65: verify_checksum()--invalid (SHA224)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "sha224",
		"test": test_verify_checksum,
		"expect": False,
	},
	"66: verify_checksum()--invalid (SHA256)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "sha256",
		"test": test_verify_checksum,
		"expect": False,
	},
	"67: verify_checksum()--invalid (SHA384)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "sha384",
		"test": test_verify_checksum,
		"expect": False,
	},
	"68: verify_checksum()--invalid (SHA512)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "sha512",
		"test": test_verify_checksum,
		"expect": False,
	},
	"69: verify_checksum()--invalid (Blake 2B)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "blake2b",
		"test": test_verify_checksum,
		"expect": False,
	},
	"70: verify_checksum()--invalid (Blake 2S)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "blake2s",
		"test": test_verify_checksum,
		"expect": False,
	},
	"71: verify_checksum()--invalid (SHA3-224)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "sha3_224",
		"test": test_verify_checksum,
		"expect": False,
	},
	"72: verify_checksum()--invalid (SHA3-256)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "sha3_256",
		"test": test_verify_checksum,
		"expect": False,
	},
	"73: verify_checksum()--invalid (SHA3-384)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "sha3_384",
		"test": test_verify_checksum,
		"expect": False,
	},
	"74: verify_checksum()--invalid (SHA3-512)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "sha3_512",
		"test": test_verify_checksum,
		"expect": False,
	},
	"75: verify_checksum()--invalid (Shake-128)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "shake_128",
		"test": test_verify_checksum,
		"expect": False,
	},
	"76: verify_checksum()--invalid (Shake-256)": {
		"path": FilePath(f"{CHECKSUMS_DIR}/testcase2.txt"),
		"hash": "shake_256",
		"test": test_verify_checksum,
		"expect": False,
	},
	"77: Symlink valid source, valid destination, replace = True (secure_symlink)": {
		"src": FilePath(f"{TEST_DIR}/05-not_executable.sh"),
		"path": FilePath(f"{TEST_DIR}/test_symlink"),
		"replace": True,
		"test": test_secure_symlink,
		"expect": {SecurityStatus.OK},
	},
	"78: Symlink valid source, valid destination, replace = False (secure_symlink)": {
		"src": FilePath(f"{TEST_DIR}/05-not_executable.sh"),
		"path": FilePath(f"{TEST_DIR}/test_symlink"),
		"replace": False,
		"test": test_secure_symlink,
		"expect": {SecurityStatus.EXISTS},
	},
	"79: Symlink non-existing source parent, valid destination (secure_symlink)": {
		"src": FilePath(f"{TEST_DIR}/this path does not exist/not this either"),
		"path": FilePath(f"{TEST_DIR}/test_symlink"),
		"replace": True,
		"test": test_secure_symlink,
		"expect": {SecurityStatus.PARENT_DOES_NOT_EXIST},
	},
	"80: Symlink source with parent path resolution issues, valid destination (secure_symlink)": {
		"src": FilePath(f"{TEST_DIR}/15-symlink_directory/16-correct_file_in_correct_permission_directory"),
		"path": FilePath(f"{TEST_DIR}/test_symlink"),
		"replace": True,
		"test": test_secure_symlink,
		"expect": {SecurityStatus.PARENT_PATH_NOT_RESOLVING_TO_SELF},
	},
	"--: Writing text to a file as preparation (secure_write_string)": {
		"path": FilePath(f"{TEST_DIR}/testfile.txt"),
		"test": test_secure_write_string,
		"permissions": 0o600,
		"expect": None,
	},
	"81: Symlink valid source, non-symlink destination, replace = True (secure_symlink)": {
		"src": FilePath(f"{TEST_DIR}/05-not_executable.sh"),
		"path": FilePath(f"{TEST_DIR}/testfile.txt"),
		"replace": True,
		"test": test_secure_symlink,
		"expect": {SecurityStatus.EXISTS},
	},
	"82: Symlink valid source, non-symlink destination, replace = False (secure_symlink)": {
		"src": FilePath(f"{TEST_DIR}/13-correct_directory/16-correct_file_in_correct_permission_directory"),
		"path": FilePath(f"{TEST_DIR}/testfile.txt"),
		"replace": False,
		"test": test_secure_symlink,
		"expect": {SecurityStatus.EXISTS},
	},
}

def main() -> int:
	"""
	Main function for the program

		Returns:
			retval (int): number of failed tests
	"""

	fail = 0
	success = 0
	failed_testcases = []

	for testcase, testcase_data in testcases.items():
		test = deep_get(testcase_data, DictPath("test"))
		failed, msg = test(testcase, testcase_data)
		if failed == 1:
			fail += 1
			failed_testcases.append(testcase)
			iktprint([ANSIThemeString(f"FAIL", "error"),
				  ANSIThemeString(f": Testcase: {testcase}; {msg}", "default")])
		else:
			iktprint([ANSIThemeString(f"PASS", "success"),
				  ANSIThemeString(f": Testcase: {testcase}", "default")])
			if not testcase.startswith("--"):
				success += 1

	iktprint([ANSIThemeString("\nSummary:", "header")])
	iktprint([ANSIThemeString(f"  FAIL: {fail}", "error")])
	iktprint([ANSIThemeString(f"  PASS: {success}", "success")])

	if fail > 0:
		iktprint([ANSIThemeString("\nFailed testcases:", "header")])
		for testcase in failed_testcases:
			iktprint([ANSIThemeString("  • ", "separator"),
				  ANSIThemeString(testcase, "default")], stderr = True)

	return fail

if __name__ == "__main__":
	init_iktprint(themefile = None)
	main()
