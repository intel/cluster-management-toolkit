#! /bin/sh
# vim: ts=4 filetype=python expandtab shiftwidth=4 softtabstop=4 syntax=python
# pylint: disable-next=anomalous-backslash-in-string
''''eval version=$( ls /usr/bin/python3.* | \
    grep '.*[0-9]$' | sort -nr -k2 -t. | head -n1 ) && \
    version=${version##/usr/bin/python3.} && [ ${version} ] && \
    [ ${version} -ge 8 ] && exec /usr/bin/python3.${version} "$0" "$@" || \
    exec /usr/bin/env python3 "$0" "$@"' #'''
# The above hack is to handle distros where /usr/bin/python3
# doesn't point to the latest version of python3 they provide
# Requires: python3 (>= 3.8)
#
# Copyright the Cluster Management Toolkit for Kubernetes contributors.
# SPDX-License-Identifier: MIT

# pylint: disable=too-many-lines,missing-function-docstring,line-too-long

import builtins
from datetime import datetime
import importlib
import sys
from typing import Any, Callable, Dict, List, Tuple
from unittest import mock
import yaml

from clustermanagementtoolkit.cmttypes import deep_get, DictPath, LogLevel, ProgrammingError

from clustermanagementtoolkit.ansithemeprint import ANSIThemeStr
from clustermanagementtoolkit.ansithemeprint import ansithemeprint, init_ansithemeprint

from clustermanagementtoolkit import logparser as logparsers

from clustermanagementtoolkit.curses_helper import ThemeStr, ThemeAttr, ThemeRef

real_import = None  # pylint: disable=invalid-name

import_override = {}


def override_import(name: str, *args: List[Any], **kwargs: Any):
    retval, exception = import_override.get(name, (None, None))
    if exception:
        raise exception
    if retval:
        return retval
    return real_import(name, *args, **kwargs)


def yaml_dump(data: Dict, base_indent: int = 4) -> str:
    result = ""
    dump = yaml.dump(data)
    for line in dump.splitlines():
        result += f"{' '.ljust(base_indent)}{line}\n"
    return result


# pylint: disable-next=unused-argument
def test_json_ujson(verbose: bool = False) -> Tuple[str, bool]:
    global import_override  # pylint: disable=global-statement

    message = ""
    result = True
    testobj = {"foo": "bar"}
    fun = logparsers.json_dumps

    if result:
        import_override = {"ujson": (None, ModuleNotFoundError)}
        try:
            with mock.patch("builtins.__import__", side_effect=override_import):
                importlib.reload(logparsers)
                _tmp = logparsers.json_dumps(testobj)
        except Exception as e:  # pylint: disable=broad-except
            message = f"overriding import ujson or {fun.__name__} failed; exception {e}"
            result = False

    if result:
        import_override = {"ujson": (None, None)}
        try:
            with mock.patch("builtins.__import__", side_effect=override_import):
                importlib.reload(logparsers)
                _tmp = logparsers.json_dumps(testobj)
        except Exception as e:  # pylint: disable=broad-except
            message = f"overriding import ujson or {fun.__name__} failed; exception {e}"
            result = False

    import_override = {}
    return message, result


# pylint: disable-next=unused-argument
def test_import_validators(verbose: bool = False) -> Tuple[str, bool]:
    global import_override  # pylint: disable=global-statement

    message = ""
    result = True

    if result:
        import_override = {"validators": (None, ModuleNotFoundError)}
        try:
            with mock.patch("builtins.__import__", side_effect=override_import):
                importlib.reload(logparsers)
        except Exception as e:  # pylint: disable=broad-except
            message = f"Overriding import validators failed; exception {e}"
            result = False

    if result:
        import_override = {"validators": (None, None)}
        try:
            with mock.patch("builtins.__import__", side_effect=override_import):
                importlib.reload(logparsers)
        except Exception as e:  # pylint: disable=broad-except
            message = f"Overriding import validators failed; exception {e}"
            result = False

    import_override = {}
    return message, result


# pylint: disable-next=unused-argument
def test_get_loglevel_names_and_name_to_loglevel(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True
    loglevels: List[str] = []

    fun = logparsers.get_loglevel_names
    tmp = fun()
    if verbose:
        print(f"  loglevel_names: {tmp}")

    if tmp is None:
        message = f"{fun.__name__}() returned None"
        result = False
    elif not isinstance(tmp, list):
        message = f"{fun.__name__}() returned wrong type ({type(tmp)}), expected list"
        result = False
    elif not tmp:
        message = "{fun.__name__}() returned an empty list"
        result = False
    else:
        loglevels = tmp
        fun = logparsers.name_to_loglevel
        for indata in loglevels:
            tmp = fun(indata)
            if tmp is None:
                message = f"{fun.__name__}() returned None for valid indata {indata}"
            elif not isinstance(tmp, LogLevel):
                message = f"{fun.__name__}() returned wrong type ({type(tmp)}) " \
                          f"with valid indata {indata}, expected LogLevel"
                result = False
                break
            if verbose:
                print(f"  <{tmp}>: {indata}")

    if result:
        try:
            indata = "NOT A LOGLEVEL"
            fun(indata)
            message = f"{fun.__name__}() silently accepted invalid indata {indata}"
            result = False
        except ProgrammingError:
            pass

    return message, result


# pylint: disable-next=unused-argument
def test_month_to_numerical(verbose: bool = False) -> Tuple[str, bool]:
    verbose = False
    message = ""
    result = True

    for indata in ("jan", "feb", "mar", "apr", "may", "jun",
                   "jul", "aug", "sep", "oct", "nov", "dec"):
        fun = logparsers.month_to_numerical
        tmp = fun(indata)
        if tmp is None:
            message = f"{fun.__name__}() returned None with valid indata {indata}"
            result = False
        elif not isinstance(tmp, str):
            message = f"{fun.__name__}() returned wrong type ({type(tmp)}) " \
                      f"with valid indata {indata}, expected str"
            result = False
        else:
            if verbose:
                print(f"{tmp}: {indata.capitalize()}")

    if result:
        try:
            indata = "NOT A MONTH"
            fun(indata)
            message = f"{fun.__name__}() silently accepted invalid indata ({indata})"
            result = False
        except ValueError:
            pass

    return message, result


# pylint: disable-next=unused-argument
def generic_str_to_severity(valid_indata: Tuple[str], fun: Callable,
                            verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    for indata in valid_indata:
        tmp = fun(indata)
        if tmp is None:
            message = f"{fun.__name__}() returned None with valid indata {indata}"
            result = False
        elif not isinstance(tmp, LogLevel):
            message = f"{fun.__name__}() returned wrong type ({type(tmp)}) " \
                      f"for valid indata {indata}, expected LogLevel"
            result = False
        else:
            if verbose:
                print(f"<{indata}>: {fun(indata)}")

    if result:
        # If we don't pass a default we should get None
        indata = "#"
        tmp = fun(indata)
        if tmp is not None:
            message = f"{fun.__name__}(default = None) returned {tmp} with " \
                      f"invalid indata ({indata}), expected None"
            result = False

    if result:
        # If we pass a default we should get that default back if the severity is invalid
        tmp = fun(indata, default=LogLevel.NOTICE)
        if tmp is None:
            message = f"{fun.__name__}(default = LogLevel.NOTICE) returned None with " \
                      f"invalid indata ({indata}), expected LogLevel.NOTICE"
            result = False
        elif not isinstance(tmp, LogLevel):
            message = f"{fun.__name__}(default = LogLevel.NOTICE) returned wrong type " \
                      f"({type(tmp)}) with invalid indata {indata} with " \
                      "default = LogLevel.NOTICE, expected LogLevel"
            result = False
        elif tmp != LogLevel.NOTICE:
            message = f"{fun.__name__}(default = LogLevel.NOTICE) returned value ({repr(tmp)}) " \
                      f"with invalid indata {indata} with default = LogLevel.NOTICE, " \
                      "expected LogLevel.NOTICE"
            result = False

    return message, result


# pylint: disable-next=unused-argument
def test_letter_to_severity(verbose: bool = False) -> Tuple[str, bool]:
    return generic_str_to_severity(valid_indata=("F", "E", "W", "N", "C", "I", "D"),
                                   fun=logparsers.letter_to_severity)


# pylint: disable-next=unused-argument
def test_str_3letter_to_severity(verbose: bool = False) -> Tuple[str, bool]:
    return generic_str_to_severity(valid_indata=("ERR", "WRN", "INF"),
                                   fun=logparsers.str_3letter_to_severity)


# pylint: disable-next=unused-argument
def test_str_4letter_to_severity(verbose: bool = False) -> Tuple[str, bool]:
    return generic_str_to_severity(valid_indata=("CRIT", "FATA", "ERRO", "WARN",
                                                 "NOTI", "SUCC", "INFO", "DEBU"),
                                   fun=logparsers.str_4letter_to_severity)


# pylint: disable-next=unused-argument
def test_str_to_severity(verbose: bool = False) -> Tuple[str, bool]:
    return generic_str_to_severity(valid_indata=("fatal", "error", "eror", "warning", "warn",
                                                 "notice", "noti", "info", "debug", "debu"),
                                   fun=logparsers.str_to_severity)


# pylint: disable-next=unused-argument
def generic_lvl_to_severity(valid_indata: Tuple[LogLevel], fun: Callable,
                            verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    for indata in valid_indata:
        tmp = fun(indata)
        if tmp is None:
            message = f"{fun.__name__}() returned None with valid indata {indata}"
            result = False
        elif not isinstance(tmp, str):
            message = f"{fun.__name__}() returned wrong type ({type(tmp)}) for " \
                      f"valid indata {indata}, expected str"
            result = False
        else:
            if verbose:
                print(f"<{indata}>: {fun(indata)}")

    if result:
        indata = -42
        tmp = fun(indata)
        if tmp is None:
            message = f"{fun.__name__}() returned None for invalid indata {indata}, " \
                      f"expected !ERROR IN LOGPARSER!"
            result = False
        elif tmp != "!ERROR IN LOGPARSER!":
            message = f"{fun.__name__}() returned {tmp} for invalid indata {indata}, " \
                      f"expected !ERROR IN LOGPARSER!"
            result = False

    return message, result


# pylint: disable-next=unused-argument
def test_lvl_to_letter_severity(verbose: bool = False) -> Tuple[str, bool]:
    return generic_lvl_to_severity(valid_indata=(LogLevel.CRIT, LogLevel.ERR, LogLevel.WARNING,
                                                 LogLevel.NOTICE, LogLevel.INFO, LogLevel.DEBUG),
                                   fun=logparsers.lvl_to_letter_severity)


# pylint: disable-next=unused-argument
def test_lvl_to_4letter_severity(verbose: bool = False) -> Tuple[str, bool]:
    return generic_lvl_to_severity(valid_indata=(LogLevel.CRIT, LogLevel.ERR, LogLevel.WARNING,
                                                 LogLevel.NOTICE, LogLevel.INFO, LogLevel.DEBUG),
                                   fun=logparsers.lvl_to_4letter_severity)


# pylint: disable-next=unused-argument
def test_lvl_to_word_severity(verbose: bool = False) -> Tuple[str, bool]:
    return generic_lvl_to_severity(valid_indata=(LogLevel.CRIT, LogLevel.ERR, LogLevel.WARNING,
                                                 LogLevel.NOTICE, LogLevel.INFO, LogLevel.DEBUG),
                                   fun=logparsers.lvl_to_word_severity)


# pylint: disable-next=unused-argument
def generic_split_severity(valid_indata: Tuple[str], fun: Callable,
                           verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True
    default = LogLevel.INFO

    for indata in valid_indata:
        # indata is just a prefix; we want to test with a string prefixed by that prefix"
        indata = f"{indata} something or another"
        tmp = fun(indata, default=default)
        if tmp is None:
            message = f"{fun.__name__}() returned None with valid indata {indata}"
            result = False
        elif not isinstance(tmp, tuple):
            message = f"{fun.__name__}() returned wrong type ({type(tmp)}) for valid indata " \
                      f"{indata}, expected (str, LogLevel)"
            result = False
        elif len(tmp) != 2:
            message = f"{fun.__name__}() return-value has length {len(tmp)} for valid indata " \
                      f"{indata}, expected 2"
            result = False
        elif not isinstance(tmp[0], str) or not isinstance(tmp[1], LogLevel):
            message = f"{fun.__name__}() returned wrong type ({type(tmp[0])}, {type(tmp[1])}) " \
                      f"for valid indata {indata}, expected (str, LogLevel)"
            result = False
        else:
            if verbose:
                print(f"<{indata}, default = {default}>: {fun(indata, default = default)}")

    if result:
        indata = "NOT A VALID PREFIX"
        tmp = fun(indata, default=default)
        if tmp is None:
            message = f"{fun.__name__}() returned None for invalid indata {indata}, " \
                      f"expected ({indata}, {default})"
            result = False
        elif not isinstance(tmp, tuple):
            message = f"{fun.__name__}() returned wrong type ({type(tmp)}) for invalid indata " \
                      f"{indata}, expected tuple"
            result = False
        elif len(tmp) != 2:
            message = f"{fun.__name__}() return-value has length {len(tmp)} for invalid indata " \
                      f"{indata}, expected 2"
            result = False
        elif not isinstance(tmp[0], str) or not isinstance(tmp[1], LogLevel):
            message = f"{fun.__name__}() returned wrong type ({type(tmp[0])}, {type(tmp[1])}) " \
                      f"for invalid indata {indata}, expected (str, LogLevel)"
            result = False
        elif tmp[0] != indata or tmp[1] != default:
            message = f"{fun.__name__}() returned wrong result ({tmp}) for invalid indata " \
                      f"{indata}, expected ({indata}, {default})"
            result = False

    return message, result


# pylint: disable-next=unused-argument
def test_split_bracketed_severity(verbose: bool = False) -> Tuple[str, bool]:
    return generic_split_severity(valid_indata=("[fatal]", "[alert]", "[error]", "[err]",
                                                "[warning]", "[warn]", "[notice]", "[info]",
                                                "[system]", "[note]", "[debug]",
                                                "[notavalidseverity]"),
                                  fun=logparsers.split_bracketed_severity, verbose=verbose)


# pylint: disable-next=unused-argument
def test_split_colon_severity(verbose: bool = False) -> Tuple[str, bool]:
    return generic_split_severity(valid_indata=("CRITICAL:", "ERROR:", "WARNING:", "NOTICE:",
                                                "NOTE:", "INFO:", "DEBUG:", "NOTAVALIDSEVERITY:"),
                                  fun=logparsers.split_colon_severity, verbose=verbose)


# pylint: disable-next=unused-argument
def test_substitute_bullets(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = logparsers.substitute_bullets

    if result:
        testdata = (
            # Indata format:
            # (string, prefix, expected_result, expected_exception)
            ("*Bulleted message", "* ", "*Bulleted message", None),
            ("*Bulleted message", "*", "•Bulleted message", None),
            ("* Bulleted message", "* ", "• Bulleted message", None),
            ("* * Bulleted message", "* ", "• * Bulleted message", None),
            ("Non-Bulleted message", "* ", "Non-Bulleted message", None),
            ("Bullet * inside * message", "* ", "Bullet * inside * message", None),
        )

        for indata, prefix, expected_result, expected_exception in testdata:
            try:
                if (tmp := fun(indata, prefix)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {indata}\n" \
                              f"         prefix: {prefix}\n" \
                              f"         output: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:  # pylint: disable=broad-except
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"          input: {indata}\n" \
                                  f"         prefix: {prefix}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {indata}\n" \
                              f"         prefix: {prefix}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break

    return message, result


# pylint: disable-next=unused-argument
def test_is_timestamp(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    valid_indata = (
        "1.677757754464991e+09",
        "2020-02-20 13:47:41",
        "2020-02-20 13.47.41",
        "2020-02-20 13:47:41Z",
        "2020-02-20 13.47.41Z",
        "2020-02-20 13:47:41.224Z",
        "2020-02-20 13:47:41,224Z",
        "2020-02-20 13.47.41.224Z",
        "2020-02-20 13.47.41,224Z",
        "2020-02-20 13:47:41.22422424 +03:00",
        "2020-02-20 13:47:41,22422424 +03:00",
        "2020-02-20 13.47.41.22422424 +03:00",
        "2020-02-20 13.47.41,22422424 +03:00",
        "2020-02-20 13:47:41.22422424 -03:00",
        "2020-02-20 13:47:41,22422424 -03:00",
        "2020-02-20 13.47.41.22422424 -03:00",
        "2020-02-20 13.47.41,22422424 -03:00",
        "2020-02-20 13:47:41.22422424 +03.00",
        "2020-02-20 13:47:41,22422424 +03.00",
        "2020-02-20 13.47.41.22422424 +03.00",
        "2020-02-20 13.47.41,22422424 +03.00",
        "2020-02-20 13:47:41.22422424 -03.00",
        "2020-02-20 13:47:41,22422424 -03.00",
        "2020-02-20 13.47.41.22422424 -03.00",
        "2020-02-20 13.47.41,22422424 -03.00",
        "2020-02-20 13:47:41.224224 +03:00",
        "2020-02-20 13:47:41,224224 +03:00",
        "2020-02-20 13.47.41.224224 +03:00",
        "2020-02-20 13.47.41,224224 +03:00",
        "2020-02-20 13:47:41.224224 -03:00",
        "2020-02-20 13:47:41,224224 -03:00",
        "2020-02-20 13.47.41.224224 -03:00",
        "2020-02-20 13.47.41,224224 -03:00",
        "2020-02-20 13:47:41.224224 +03.00",
        "2020-02-20 13:47:41,224224 +03.00",
        "2020-02-20 13.47.41.224224 +03.00",
        "2020-02-20 13.47.41,224224 +03.00",
        "2020-02-20 13:47:41.224224 -03.00",
        "2020-02-20 13:47:41,224224 -03.00",
        "2020-02-20 13.47.41.224224 -03.00",
        "2020-02-20 13.47.41,224224 -03.00",
        "2020-02-20 13:47:41.224 +03:00",
        "2020-02-20 13:47:41,224 +03:00",
        "2020-02-20 13.47.41.224 +03:00",
        "2020-02-20 13.47.41,224 +03:00",
        "2020-02-20 13:47:41.224 -03:00",
        "2020-02-20 13:47:41,224 -03:00",
        "2020-02-20 13.47.41.224 -03:00",
        "2020-02-20 13.47.41,224 -03:00",
        "2020-02-20 13:47:41.224 +03.00",
        "2020-02-20 13:47:41,224 +03.00",
        "2020-02-20 13.47.41.224 +03.00",
        "2020-02-20 13.47.41,224 +03.00",
        "2020-02-20 13:47:41.224 -03.00",
        "2020-02-20 13:47:41,224 -03.00",
        "2020-02-20 13.47.41.224 -03.00",
        "2020-02-20 13.47.41,224 -03.00",
        "2020-02-20 13:47:41.224233",
        "2020-02-20 13:47:41,224233",
        "2020-02-20 13:47:41.224233Z",
        "2020-02-20 13:47:41,224233Z",
        "2020-02-20 13:47:41.22423343",
        "2020-02-20 13:47:41,22423343",
        "2020-02-20 13:47:41.22423343Z",
        "2020-02-20 13:47:41,22423343Z",
    )

    invalid_indata = (
        "2020%02%20 13:47:41",
        "2020-02-20 113.47.41",
    )

    fun = logparsers.is_timestamp

    for indata in valid_indata:
        tmp = fun(indata)
        if not tmp:
            message = f"{fun.__name__}() returned False with valid indata {indata}"
            result = False
            break

    for indata in invalid_indata:
        tmp = fun(indata)
        if tmp:
            message = f"{fun.__name__}() returned True with invalid indata {indata}"
            result = False
            break

    return message, result


# pylint: disable-next=unused-argument
def test_split_iso_timestamp(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    valid_indata = (
        "[2020-02-07 13:12:24.224]",
        "[2020-02-07 13:12:24,224]",
        "2020-02-07T13:12:24.224Z",
        "2020-02-13T12:06:18.011345 +03:00",
        "2020-02-13T12:06:18.011345 -03:00",
        "2020-09-23T17:12:32.18396709+03:00",
        "2020-02-13T12:06:18.011345 +03:00",
        "2020-02-13T12:06:18.011345 -03:00",
        "2020-09-23T17:12:32.183967091+03:00",
        "2020-09-23T17:12:32.183967091-03:00",
        "2020-02-13 12:06:18+03:00",
        "2020-02-13 12:06:18-03:00",
        "[2020-02-13 12:06:18 +03:00]",
        "[2020-02-13 12:06:18 -03:00]",
        "2020-02-13T12:06:18+0300",
        "2020-02-13T12:06:18-0300",
        "2020-02-20 13:47:41.008416",
        "2020-02-20 13:47:41.008416:",
        "2020/02/20 13:47:41.008416",
        "2020-02-20 13:47:41.008416Z",
        "[2021-12-18T20:15:36Z]",
        "2021-12-18T20:15:36Z",
        "2020-02-20 13:47:41",
        "2020/02/20 13:47:41",
    )

    timestamp = datetime.now()
    fun = logparsers.split_iso_timestamp

    for indata in valid_indata:
        # indata is just a prefix; we want to test with a string prefixed by that prefix"
        indata = f"{indata} something or another"
        tmp = fun(indata, timestamp=timestamp)
        if tmp == (indata, timestamp):
            message = f"{fun.__name__} failed to split timestamp from valid indata {indata}"
            result = False
            break

    if result:
        indata = "something or another"
        tmp = fun(indata, timestamp=timestamp)
        if tmp != (indata, timestamp):
            message = f"{fun.__name__} did not return the indata {indata} unmodified"
            result = False

    return message, result


# pylint: disable-next=unused-argument
def test_strip_iso_timestamp(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    valid_indata = (
        "[2020-02-07 13:12:24.224]",
        "[2020-02-07 13:12:24,224]",
        "2020-02-07T13:12:24.224Z",
        "2020-02-13T12:06:18.011345 +03:00",
        "2020-02-13T12:06:18.011345 -03:00",
        "2020-09-23T17:12:32.18396709+03:00",
        "2020-02-13T12:06:18.011345 +03:00",
        "2020-02-13T12:06:18.011345 -03:00",
        "2020-09-23T17:12:32.183967091+03:00",
        "2020-09-23T17:12:32.183967091-03:00",
        "2020-02-13 12:06:18+03:00",
        "2020-02-13 12:06:18-03:00",
        "[2020-02-13 12:06:18 +03:00]",
        "[2020-02-13 12:06:18 -03:00]",
        "2020-02-13T12:06:18+0300",
        "2020-02-13T12:06:18-0300",
        "2020-02-20 13:47:41.008416",
        "2020-02-20 13:47:41.008416:",
        "2020/02/20 13:47:41.008416",
        "2020-02-20 13:47:41.008416Z",
        "[2021-12-18T20:15:36Z]",
        "2021-12-18T20:15:36Z",
        "2020-02-20 13:47:41",
        "2020/02/20 13:47:41",
    )

    fun = logparsers.strip_iso_timestamp

    for indata in valid_indata:
        # indata is just a prefix; we want to test with a string prefixed by that prefix"
        indata = f"{indata} something or another"
        tmp = fun(indata)
        if tmp == indata:
            message = f"{fun.__name__} failed to strip timestamp from valid indata {indata}"
            result = False
            break

    return message, result


# pylint: disable-next=unused-argument
def test_strip_iso_timestamp_with_tz(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = logparsers.strip_iso_timestamp_with_tz

    if result:
        testdata = (
            # Indata format:
            # (string, expected_result, expected_exception)
            ("2020-02-20 13:47:01.531 GMT", "", None),
            ("2020-02-20 13:47:01.531 GMT with some other data", "with some other data", None),
            ("2020-02-20 13:47:01.531", "2020-02-20 13:47:01.531", None),
        )

        for string, expected_result, expected_exception in testdata:
            try:
                if (tmp := fun(string)) != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {string}\n" \
                              f"         output: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:  # pylint: disable=broad-except
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"          input: {string}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {string}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break

    return message, result


# pylint: disable-next=unused-argument,too-many-locals
def test_iptables(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = logparsers.iptables

    if result:
        testdata = (
            # Indata format:
            # (string, fold_msg, remnants, expected_result, expected_remnants, expected_exception)
            ("/sbin/iptables", [], False,
             [ThemeStr('/sbin/iptables',
                       ThemeAttr('types', 'iptables_programname'), False)], [], None),
            ("# Generated by iptables-save v1.8.7 on Wed Feb 28 15:20:53 2024", [], False,
             [ThemeStr('# Generated by iptables-save v1.8.7 on Wed Feb 28 15:20:53 2024',
              ThemeAttr('types', 'iptables_comment'), False)], [], None),
            ("*filter", [], False,
             [ThemeStr('*filter', ThemeAttr('types', 'iptables_table'), False)], [], None),
            ("*filter # Trailing comment", [], False,
             [ThemeStr('*filter', ThemeAttr('types', 'iptables_table'), False),
              ThemeStr(' ', ThemeAttr('types', 'iptables_comment'), False),
              ThemeStr('', ThemeAttr('types', 'iptables_comment'), False)], [], None),
            (":INPUT ACCEPT [402864269:151316188286]", [], False,
             [ThemeStr(':INPUT', ThemeAttr('types', 'iptables_chain'), False),
              ThemeStr(' ACCEPT', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' [402864269:151316188286]',
                       ThemeAttr('types', 'iptables_argument'), False)], [], None),
            ("COMMIT", [], False,
             [ThemeStr('COMMIT', ThemeAttr('types', 'iptables_command'), False)], [], None),
            ("-A DOCKER -i docker0 -j RETURN", [], False,
             [ThemeStr(' DOCKER', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' -i', ThemeAttr('types', 'iptables_option'), False),
              ThemeStr(' docker0', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' -j', ThemeAttr('types', 'iptables_option'), False),
              ThemeStr(' RETURN', ThemeAttr('types', 'iptables_argument'), False)], [], None),
            ("-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE", [], False,
             [ThemeStr(' POSTROUTING', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' -s', ThemeAttr('types', 'iptables_option'), False),
              ThemeStr(' 172.17.0.0/16', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' !', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' -o', ThemeAttr('types', 'iptables_option'), False),
              ThemeStr(' docker0', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' -j', ThemeAttr('types', 'iptables_option'), False),
              ThemeStr(' MASQUERADE', ThemeAttr('types', 'iptables_argument'), False)], [], None),
            ("-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER", [], False,
             [ThemeStr(' OUTPUT', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' !', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' -d', ThemeAttr('types', 'iptables_option'), False),
              ThemeStr(' 127.0.0.0/8', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' -m', ThemeAttr('types', 'iptables_option'), False),
              ThemeStr(' addrtype', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' --dst-type', ThemeAttr('types', 'iptables_option'), False),
              ThemeStr(' LOCAL', ThemeAttr('types', 'iptables_argument'), False),
              ThemeStr(' -j', ThemeAttr('types', 'iptables_option'), False),
              ThemeStr(' DOCKER', ThemeAttr('types', 'iptables_argument'), False)], [], None),
        )

        for string, _remnants, fold_msg, expected_result, \
                _expected_remnants, expected_exception in testdata:
            try:
                tmp, _loglevel, _facility, _remnants = fun(string, [], fold_msg=fold_msg)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {string}\n" \
                              f"         output: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:  # pylint: disable=broad-except
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"          input: {string}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {string}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break

    return message, result


# pylint: disable-next=unused-argument
def test_http(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = logparsers.http

    if result:
        testdata = (
            # Indata format:
            # (string, fold_msg, expected_result, expected_remnants, expected_exception)
            ('::ffff:10.217.0.1 - - [06/May/2022 18:50:45] "GET / HTTP/1.1" 200 -',
             LogLevel.INFO, "", True, {},
             [ThemeStr('::ffff:10.217.0.1', ThemeAttr('logview', 'hostname'), False),
              ThemeStr(' - - ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('[06/May/2022:18:50:45]', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr(' "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('200', ThemeAttr('logview', 'severity_notice'), False),
              ThemeStr(' -', ThemeAttr('logview', 'severity_info'), False)], None),
            ('::ffff:10.217.0.1 - - [06/May/2022 18:50:45] "GET / HTTP/1.1" 400 -',
             LogLevel.INFO, "", True, {},
             [ThemeStr('::ffff:10.217.0.1', ThemeAttr('logview', 'hostname'), False),
              ThemeStr(' - - ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('[06/May/2022:18:50:45]', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr(' "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('400', ThemeAttr('logview', 'severity_error'), False),
              ThemeStr(' -', ThemeAttr('logview', 'severity_info'), False)], None),
            ('::ffff:10.217.0.1 - - [06/May/2022 18:50:45] "GET / HTTP/1.1" 300 -',
             LogLevel.INFO, "", True, {},
             [ThemeStr('::ffff:10.217.0.1', ThemeAttr('logview', 'hostname'), False),
              ThemeStr(' - - ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('[06/May/2022:18:50:45]', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr(' "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('300', ThemeAttr('logview', 'severity_warning'), False),
              ThemeStr(' -', ThemeAttr('logview', 'severity_info'), False)], None),
            ('10.32.0.1 - - [20/Mar/2023:11:38:13 +0000] '
             '"GET /api/v1/series?match%5B%5D=collectd_gpu_sysman_frequency_mhz'
             '&start=1679311983&end=1679312283 HTTP/1.1" 404 528 "-" "Grafana/8.3.10" '
             '368 0.002 [monitoring-prometheus-k8s-9090] [] 10.40.0.30:9090 528 0.004 '
             '200 5997e385f9f1e248446d28a810c4',
             LogLevel.INFO, "", True, {"reformat_timestamps": True},
             [ThemeStr('10.32.0.1', ThemeAttr('logview', 'hostname'), False),
              ThemeStr(' - - ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('[2023-02-20 11:38:13 +0000]', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr(' "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/api/v1/series?match%5B%5D=collectd_gpu_sysman_frequency_mhz'
                       '&start=1679311983&end=1679312283', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('404', ThemeAttr('logview', 'severity_error'), False),
              ThemeStr(' 528 "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('-', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('Grafana/8.3.10', ThemeAttr('logview', 'url'), False),
              ThemeStr('"', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' 368 0.002 [monitoring-prometheus-k8s-9090] [] 10.40.0.30:9090 528 '
                       '0.004 200 5997e385f9f1e248446d28a810c4',
                       ThemeAttr('types', 'generic'), False)], None),
            ('::ffff:10.217.0.1 - - [06/May/2022 18:50:45] "GET / HTTP/1.1" 200 -',
             LogLevel.INFO, "", True, {"reformat_timestamps": True},
             [ThemeStr('::ffff:10.217.0.1', ThemeAttr('logview', 'hostname'), False),
              ThemeStr(' - - ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('[2022-04-06 18:50:45]', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr(' "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('200', ThemeAttr('logview', 'severity_notice'), False),
              ThemeStr(' -', ThemeAttr('logview', 'severity_info'), False)], None),
            ('10.244.0.1 - - [29/Jan/2022:10:34:20 +0000] "GET /v0/healthz HTTP/1.1" '
             '301 178 "-" "kube-probe/1.23"',
             LogLevel.INFO, "", True, {"reformat_timestamps": True},
             [ThemeStr('10.244.0.1', ThemeAttr('logview', 'hostname'), False),
              ThemeStr(' - - ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('[2022-00-29 10:34:20 +0000]', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr(' "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/v0/healthz', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('301', ThemeAttr('logview', 'severity_warning'), False),
              ThemeStr(' 178 "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('-', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('kube-probe/1.23', ThemeAttr('logview', 'url'), False),
              ThemeStr('"', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('', ThemeAttr('types', 'generic'), False)], None),
            ('[2022-12-17T21:59:10.447Z] "GET /ready HTTP/1.1" 200 - 0 5 0 - "-" '
             '"kube-probe/1.25" "0823108e-89da-41f6-9663-ff0e7003f098" "internalkourier" "-""',
             LogLevel.INFO, "", True, {},
             [ThemeStr('[2022-12-17T21:59:10.447Z] ', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr('"', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/ready', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('200', ThemeAttr('logview', 'severity_notice'), False),
              ThemeStr(' -', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' 0', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' 5', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' 0', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' - "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('-', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('kube-probe/1.25', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('0823108e-89da-41f6-9663-ff0e7003f098', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('internalkourier', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('-', ThemeAttr('logview', 'url'), False),
              ThemeStr('"', ThemeAttr('logview', 'severity_info'), False)], None),
            ('[2022-12-17T21:59:10.447Z] "GET /ready HTTP/1.1" 300 - 0 5 0 - "-" '
             '"kube-probe/1.25" "0823108e-89da-41f6-9663-ff0e7003f098" "internalkourier" "-""',
             LogLevel.INFO, "", True, {},
             [ThemeStr('[2022-12-17T21:59:10.447Z] ', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr('"', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/ready', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('300', ThemeAttr('logview', 'severity_warning'), False),
              ThemeStr(' -', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' 0', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' 5', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' 0', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' - "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('-', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('kube-probe/1.25', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('0823108e-89da-41f6-9663-ff0e7003f098', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('internalkourier', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('-', ThemeAttr('logview', 'url'), False),
              ThemeStr('"', ThemeAttr('logview', 'severity_info'), False)], None),
            ('[2022-12-17T21:59:10.447Z] "GET /ready HTTP/1.1" 404 - 0 5 0 - "-" '
             '"kube-probe/1.25" "0823108e-89da-41f6-9663-ff0e7003f098" "internalkourier" "-""',
             LogLevel.INFO, "", True, {},
             [ThemeStr('[2022-12-17T21:59:10.447Z] ', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr('"', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/ready', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('404', ThemeAttr('logview', 'severity_error'), False),
              ThemeStr(' -', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' 0', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' 5', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' 0', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' - "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('-', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('kube-probe/1.25', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('0823108e-89da-41f6-9663-ff0e7003f098', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('internalkourier', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('-', ThemeAttr('logview', 'url'), False),
              ThemeStr('"', ThemeAttr('logview', 'severity_info'), False)], None),
            ('10.245.0.1 - - [01/Mar/2024:14:04:03 +0000] "GET /api/v1/status/buildinfo '
             'HTTP/1.1" 200 186 "-" "Grafana/8.5.27" 128 0.002 [monitoring-prometheus-k8s-9090] '
             '[] 10.245.96.3:9090 186 0.002 200 6931ce1fdbb3b5708d29add993693d80',
             LogLevel.INFO, "", True, {},
             [ThemeStr('10.245.0.1', ThemeAttr('logview', 'hostname'), False),
              ThemeStr(' - - ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('[01/Mar/2024:14:04:03 +0000]', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr(' "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/api/v1/status/buildinfo', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('200', ThemeAttr('logview', 'severity_notice'), False),
              ThemeStr(' 186 "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('-', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('Grafana/8.5.27', ThemeAttr('logview', 'url'), False),
              ThemeStr('"', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' 128 0.002 [monitoring-prometheus-k8s-9090] [] 10.245.96.3:9090 186 '
                       '0.002 200 6931ce1fdbb3b5708d29add993693d80',
                       ThemeAttr('types', 'generic'), False)], None),
            ('10.245.96.15 - - [28/Feb/2024:16:25:59 +0000] "GET '
             '/sd-shared-gpu-7b5548d864-pz77r.png HTTP/1.1" 304 0 '
             '"http://sd-preview.val.cluster:27080/" "Mozilla/5.0 (X11; Linux x86_64; rv:123.0) '
             'Gecko/20100101 Firefox/123.0" "10.245.0.1"',
             LogLevel.INFO, "", True, {},
             [ThemeStr('10.245.96.15', ThemeAttr('logview', 'hostname'), False),
              ThemeStr(' - - ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('[28/Feb/2024:16:25:59 +0000]', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr(' "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/sd-shared-gpu-7b5548d864-pz77r.png', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('304', ThemeAttr('logview', 'severity_warning'), False),
              ThemeStr(' 0 "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('http://sd-preview.val.cluster:27080/', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('Mozilla/5.0 (X11; Linux x86_64; rv:123.0) Gecko/20100101 Firefox/123.0',
                       ThemeAttr('logview', 'url'), False),
              ThemeStr('"', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' "10.245.0.1"', ThemeAttr('types', 'generic'), False)], None),
            ('10.245.96.15 - - [28/Feb/2024:16:29:57 +0000] "GET / HTTP/1.1" 200 1026 "-" '
             '"Mozilla/5.0 (X11; Linux x86_64; rv:123.0) Gecko/20100101 Firefox/123.0" '
             '"10.245.0.1"',
             LogLevel.INFO, "", True, {},
             [ThemeStr('10.245.96.15', ThemeAttr('logview', 'hostname'), False),
              ThemeStr(' - - ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('[28/Feb/2024:16:29:57 +0000]', ThemeAttr('logview', 'timestamp'), False),
              ThemeStr(' "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('GET ', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('/', ThemeAttr('logview', 'url'), False),
              ThemeStr(' HTTP/1.1', ThemeAttr('logview', 'protocol'), False),
              ThemeStr('" ', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('200', ThemeAttr('logview', 'severity_notice'), False),
              ThemeStr(' 1026 "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('-', ThemeAttr('logview', 'url'), False),
              ThemeStr('" "', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr('Mozilla/5.0 (X11; Linux x86_64; rv:123.0) Gecko/20100101 Firefox/123.0',
                       ThemeAttr('logview', 'url'), False),
              ThemeStr('"', ThemeAttr('logview', 'severity_info'), False),
              ThemeStr(' "10.245.0.1"', ThemeAttr('types', 'generic'), False)], None),
        )

        for string, severity, facility, fold_msg, \
                options, expected_result, expected_exception in testdata:
            try:
                tmp, severity, facility = fun(string, severity=severity, facility=facility,
                                              fold_msg=fold_msg, options=options)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {string}\n" \
                              f"         output: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:  # pylint: disable=broad-except
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"          input: {string}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {string}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break

    return message, result


# pylint: disable-next=unused-argument
def test_split_glog(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = logparsers.split_glog

    if result:
        testdata = (
            # Indata format:
            # (string, fold_msg, expected_result, expected_remnants, expected_exception)
            ('E0514 09:01:55.108028382       1 server_chttp2.cc:40] foo',
             LogLevel.INFO, "",
             ("foo", LogLevel.ERR, "server_chttp2.cc:40", [], True), None),
            ('I0511 14:31:10.500543       1 start.go:76] bar',
             LogLevel.INFO, "",
             ("bar", LogLevel.INFO, "start.go:76", [], True), None),
            ('I0511 14:31:10.500543       1 start.go:76]',
             LogLevel.INFO, "",
             ("", LogLevel.INFO, "start.go:76", [], True), None),
            ('I0417 09:32:43.32022-04-17T09:32:43.343052189Z 41605       1 tlsconfig.go:178] buggy',
             LogLevel.INFO, "",
             ("buggy", LogLevel.INFO, "tlsconfig.go:178", [], True), None),
            ('Not a match',
             LogLevel.INFO, "",
             ("Not a match", LogLevel.INFO, "", [], False), None),
            ('Not a match',
             None, "",
             ("Not a match", LogLevel.INFO, "", [], False), None),
            ('ERROR: logging before flag.Parse: E0514 09:01:55.108028382       '
             '1 server_chttp2.cc:40] foo',
             LogLevel.INFO, "",
             ("ERROR: logging before flag.Parse", LogLevel.ERR, "server_chttp2.cc:40",
              [([ThemeStr('foo', ThemeAttr('logview', 'severity_error'), False)],
                LogLevel.ERR)], True), None),
        )

        for string, severity, facility, expected_result, expected_exception in testdata:
            try:
                tmp = fun(string, severity=severity, facility=facility)
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {string}\n" \
                              f"         output: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:  # pylint: disable=broad-except
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"          input: {string}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {string}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break

    return message, result


# pylint: disable-next=unused-argument
def test_tab_separated(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = logparsers.tab_separated

    if result:
        # 2022-12-13T22:23:45.808Z\tINFO\tcontroller-runtime.metrics\tMetrics server is starting to listen\t{"addr": ":8080"}  # noqa: E501
        # 2022-12-13T22:23:45.808Z\tINFO\tsetup\tstarting manager
        # 1.677757754464991e+09\tINFO\tcontroller-runtime.metrics\tMetrics server is starting to listen\t{"addr": ":8080"}  # noqa: E501
        # Assumption: datetime\tSEVERITY\t{facility if lowercase, else message}[\tjson]
        # or
        #             secondssinceepoch\tSEVERITY\t{facility if lowercase, else message}[\tjson]
        testdata = (
            # Indata format:
            # (string, severity, facility, fold_msg, options, expected_result, expected_exception)
            ('2022-12-13T22:23:45.808Z\tINFO\tcontroller-runtime.metrics\t'
             'Metrics server is starting to listen\t{"addr": ":8080"}',
             LogLevel.INFO, "",
             False, {},
             ('Metrics server is starting to listen',
              LogLevel.INFO, "controller-runtime.metrics",
              [([ThemeStr('{', ThemeAttr('types', 'yaml_value'), False)], LogLevel.INFO),
               ([ThemeStr('  "addr"', ThemeAttr('types', 'yaml_key'), False),
                 ThemeStr(': ', ThemeAttr('types', 'yaml_separator'), False),
                 ThemeStr('":8080"', ThemeAttr('types', 'yaml_value'), False)], LogLevel.INFO),
               ([ThemeStr('}', ThemeAttr('types', 'yaml_value'), False)], LogLevel.INFO)]),
             None),
            ('1.677757754464991e+09\tINFO\tcontroller-runtime.metrics\tMetrics server is starting '
             'to listen\t{"addr": ":8080"}',
             LogLevel.INFO, "",
             False, {},
             ('Metrics server is starting to listen',
              LogLevel.INFO, "controller-runtime.metrics",
              [([ThemeStr('{', ThemeAttr('types', 'yaml_value'), False)], LogLevel.INFO),
               ([ThemeStr('  "addr"', ThemeAttr('types', 'yaml_key'), False),
                 ThemeStr(': ', ThemeAttr('types', 'yaml_separator'), False),
                 ThemeStr('":8080"', ThemeAttr('types', 'yaml_value'), False)], LogLevel.INFO),
               ([ThemeStr('}', ThemeAttr('types', 'yaml_value'), False)], LogLevel.INFO)]),
             None),
            ('2022-12-13T22:23:45.808Z\tINFO\tsetup\tstarting manager',
             LogLevel.INFO, "",
             False, {},
             ('starting manager',
              LogLevel.INFO, "setup",
              [
              ]),
             None),
            ('2022-12-13T22:23:45.808Z\tINFO\tsetup\tfoo\t{"version": "v1.0"}',
             LogLevel.INFO, "",
             False, {"versions": ["version"]},
             ('foo',
              LogLevel.INFO, "setup",
              [([ThemeStr('{', ThemeAttr('types', 'yaml_value'), False)], LogLevel.INFO),
               ([ThemeStr('  "version"', ThemeAttr('types', 'yaml_key'), False),
                 ThemeStr(': ', ThemeAttr('types', 'yaml_separator'), False),
                 ThemeStr('"v1.0"',
                          ThemeAttr('logview', 'severity_notice'), False)], LogLevel.INFO),
               ([ThemeStr('}', ThemeAttr('types', 'yaml_value'), False)], LogLevel.INFO)]),
             None),
            ('2022-12-13T22:23:45.808Z\tINFO\tsetup\tfoo\t{"version: "v1.0"}',
             LogLevel.INFO, "",
             False, {"versions": ["version"]},
             ('foo {"version: "v1.0"}',
              LogLevel.INFO, "setup",
              [
              ]),
             None),
            ('2022-12-13T22:23:45.808Z\tnot-severity\tsetup\tstarting manager',
             None, "",
             False, {},
             ('starting manager',
              LogLevel.INFO, "setup",
              [
              ]),
             None),
            ('2022-12-13T22:23:45.808Z\tINFO\tSETUP\tstarting manager',
             LogLevel.INFO, "",
             False, {},
             ('SETUP starting manager',
              LogLevel.INFO, "",
              [
              ]),
             None),
            ('INFO\tsetup\tstarting manager',
             LogLevel.INFO, "",
             False, {},
             ('INFO\tsetup\tstarting manager',
              LogLevel.INFO, "",
              [
              ]),
             None),
        )

        for string, severity, facility, fold_msg, options, \
                expected_result, expected_exception in testdata:
            try:
                tmp = fun(string, severity=severity, facility=facility,
                          fold_msg=fold_msg, options=options)
                if tmp[0] != expected_result[0] \
                        or tmp[1] != expected_result[1] \
                        or tmp[2] != expected_result[2] or tmp[3] != expected_result[3]:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {string}\n" \
                              f"         output: {tmp}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break
            except Exception as e:  # pylint: disable=broad-except
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"          input: {string}\n" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                        break
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {string}\n" \
                              f"      exception: {type(e)}\n" \
                              f"       expected: {expected_result}"
                    result = False
                    break

    return message, result


# pylint: disable-next=unused-argument
def test___split_severity_facility_style(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    # fun = logparsers.__split_severity_facility_style
    # \tINFO\tcontrollers.Reaper\tstarting reconciliation\t{"reaper": "default/k8ssandra-cluster-a-reaper-k8ssandra"}  # noqa: E501

    message = "[TEST NOT IMPLEMENTED]"

    return message, result


# pylint: disable-next=unused-argument
def test_split_json_style(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    # fun = logparsers.split_json_style

    message = "[TEST NOT IMPLEMENTED]"

    return message, result


# pylint: disable-next=unused-argument
def test_merge_message(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    # fun = logparsers.merge_message

    message = "[TEST NOT IMPLEMENTED]"

    return message, result


# pylint: disable-next=unused-argument
def test_split_json_style_raw(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    # fun = logparsers.split_json_style_raw

    message = "[TEST NOT IMPLEMENTED]"

    return message, result


# pylint: disable-next=unused-argument
def test_json_event(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    # fun = logparsers.json_event

    message = "[TEST NOT IMPLEMENTED]"

    return message, result


# pylint: disable-next=unused-argument
def test_modinfo(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = logparsers.modinfo

    if result:
        testdata = (
            ('filename:       '
             '/lib/modules/6.7.9-amd64/kernel/drivers/net/ethernet/intel/igc/igc.ko.xz', [
                 ThemeStr('filename', ThemeAttr('types', 'key'), False),
                 ThemeRef('separators', 'keyvalue', False),
                 ThemeStr('       ', ThemeAttr('types', 'generic'), False),
                 ThemeStr('/lib/modules/6.7.9-amd64/kernel/drivers/net/ethernet/'
                          'intel/igc/igc.ko.xz', ThemeAttr('types', 'value'), False)], None),
            ('license:        GPL v2', [
                ThemeStr('license', ThemeAttr('types', 'key'), False),
                ThemeRef('separators', 'keyvalue', False),
                ThemeStr('        ', ThemeAttr('types', 'generic'), False),
                ThemeStr('GPL v2', ThemeAttr('types', 'value'), False)], None),
            ('author:         Intel Corporation, <linux.nics@intel.com>', [
                ThemeStr('author', ThemeAttr('types', 'key'), False),
                ThemeRef('separators', 'keyvalue', False),
                ThemeStr('         ', ThemeAttr('types', 'generic'), False),
                ThemeStr('Intel Corporation, <linux.nics@intel.com>',
                         ThemeAttr('types', 'value'), False)], None),
            ('		EB:2E:B6:75:F9:B7:A2:4B:CA:DE:76:C3:76:6D:2D:CD:57:71:26:B6:',
             '\t\tEB:2E:B6:75:F9:B7:A2:4B:CA:DE:76:C3:76:6D:2D:CD:57:71:26:B6:', None),
            ('parm:           debug:Debug level (0=none,...,16=all) (int)', [
                ThemeStr('parm', ThemeAttr('types', 'key'), False),
                ThemeRef('separators', 'keyvalue', False),
                ThemeStr('           ', ThemeAttr('types', 'generic'), False),
                ThemeStr('debug:Debug level (0=none,...,16=all) (int)',
                         ThemeAttr('types', 'value'), False)], None),
        )

        for indata, expected_result, expected_exception in testdata:
            try:
                _facility, _severity, themearray, _remnants = fun(indata)
                if themearray != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {indata}\n" \
                              f"         output:\n" \
                              f"{yaml_dump(themearray, base_indent = 17)}\n" \
                              f"       expected:\n" \
                              f"{yaml_dump(expected_result, base_indent = 17)}"
                    result = False
            except Exception as e:  # pylint: disable=broad-except
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"          input:\n" \
                                  f"{indata}" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input:\n" \
                              f"{indata}" \
                              f"      exception: {type(e)}\n" \
                              f"       expected:\n" \
                              f"{yaml_dump(expected_result, base_indent = 17)}"
                    result = False

    return message, result


# pylint: disable-next=unused-argument
def test_directory(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = logparsers.directory

    if result:
        testdata = (
            ('drwx------  13 root root        4096 Mar 13 02:22 ./',
             LogLevel.INFO, "",
             ("", LogLevel.INFO,
              [ThemeStr('d', ThemeAttr('types', 'dir_type'), False),
               ThemeStr('rwx------', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('13', ThemeAttr('types', 'dir_linkcount'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_owner'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_group'), False),
               ThemeStr('        ', ThemeAttr('types', 'generic'), False),
               ThemeStr('4096', ThemeAttr('types', 'dir_size'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('Mar', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('13', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('02:22', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('.', ThemeAttr('types', 'dir_dir'), False),
               ThemeStr('/', ThemeAttr('types', 'dir_suffix'), False)],
              []), None),
            ('lrwxrwxrwx   1 root root          12 Mar 13 12:32 initctl -> /run/initctl|',
             LogLevel.INFO, "",
             ("", LogLevel.INFO,
              [ThemeStr('l', ThemeAttr('types', 'dir_type'), False),
               ThemeStr('rwxrwxrwx', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr('  ', ThemeAttr('types', 'generic'), False),
               ThemeStr('1', ThemeAttr('types', 'dir_linkcount'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_owner'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_group'), False),
               ThemeStr('          ', ThemeAttr('types', 'generic'), False),
               ThemeStr('12', ThemeAttr('types', 'dir_size'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('Mar', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('13', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('12:32', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('initctl', ThemeAttr('types', 'dir_symlink_name'), False),
               ThemeStr(' -> ', ThemeAttr('types', 'dir_symlink_link'), False),
               ThemeStr('/run/initctl', ThemeAttr('types', 'dir_pipe'), False),
               ThemeStr('|', ThemeAttr('types', 'dir_suffix'), False)],
              []), None),
            ('lrwxrwxrwx   1 root root          28 Mar 13 12:32 log '
             '-> /run/systemd/journal/dev-log=',
             LogLevel.INFO, "",
             ("", LogLevel.INFO,
              [ThemeStr('l', ThemeAttr('types', 'dir_type'), False),
               ThemeStr('rwxrwxrwx', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr('  ', ThemeAttr('types', 'generic'), False),
               ThemeStr('1', ThemeAttr('types', 'dir_linkcount'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_owner'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_group'), False),
               ThemeStr('          ', ThemeAttr('types', 'generic'), False),
               ThemeStr('28', ThemeAttr('types', 'dir_size'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('Mar', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('13', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('12:32', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('log', ThemeAttr('types', 'dir_symlink_name'), False),
               ThemeStr(' -> ', ThemeAttr('types', 'dir_symlink_link'), False),
               ThemeStr('/run/systemd/journal/dev-log', ThemeAttr('types', 'dir_socket'), False),
               ThemeStr('=', ThemeAttr('types', 'dir_suffix'), False)],
              []), None),
            ('brw-rw----   1 root disk      7,   0 Mar 13 12:32 loop0',
             LogLevel.INFO, "",
             ("", LogLevel.INFO,
              [ThemeStr('b', ThemeAttr('types', 'dir_type'), False),
               ThemeStr('rw-rw----', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr('  ', ThemeAttr('types', 'generic'), False),
               ThemeStr('1', ThemeAttr('types', 'dir_linkcount'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_owner'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('disk', ThemeAttr('types', 'dir_group'), False),
               ThemeStr('      ', ThemeAttr('types', 'generic'), False),
               ThemeStr('7,   0', ThemeAttr('types', 'dir_size'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('Mar', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('13', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('12:32', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('loop0', ThemeAttr('types', 'dir_dev'), False)],
              []), None),
            ('crw-r-----   1 root kmem      1,   4 Mar 13 12:32 port',
             LogLevel.INFO, "",
             ("", LogLevel.INFO,
              [ThemeStr('c', ThemeAttr('types', 'dir_type'), False),
               ThemeStr('rw-r-----', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr('  ', ThemeAttr('types', 'generic'), False),
               ThemeStr('1', ThemeAttr('types', 'dir_linkcount'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_owner'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('kmem', ThemeAttr('types', 'dir_group'), False),
               ThemeStr('      ', ThemeAttr('types', 'generic'), False),
               ThemeStr('1,   4', ThemeAttr('types', 'dir_size'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('Mar', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('13', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('12:32', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('port', ThemeAttr('types', 'dir_dev'), False)],
              []), None),
            ('lrwxrwxrwx   1 root root           4 Mar 13 12:32 rtc -> rtc0',
             LogLevel.INFO, "",
             ("", LogLevel.INFO,
              [ThemeStr('l', ThemeAttr('types', 'dir_type'), False),
               ThemeStr('rwxrwxrwx', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr('  ', ThemeAttr('types', 'generic'), False),
               ThemeStr('1', ThemeAttr('types', 'dir_linkcount'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_owner'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_group'), False),
               ThemeStr('           ', ThemeAttr('types', 'generic'), False),
               ThemeStr('4', ThemeAttr('types', 'dir_size'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('Mar', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('13', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('12:32', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('rtc', ThemeAttr('types', 'dir_symlink_name'), False),
               ThemeStr(' -> ', ThemeAttr('types', 'dir_symlink_link'), False),
               ThemeStr('rtc0', ThemeAttr('types', 'dir_file'), False)],
              []), None),
            ('drwxrwxrwt   2 root root          40 Mar 16 22:00 shm',
             LogLevel.INFO, "",
             ("", LogLevel.INFO,
              [ThemeStr('d', ThemeAttr('types', 'dir_type'), False),
               ThemeStr('rwxrwxrwt', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr('  ', ThemeAttr('types', 'generic'), False),
               ThemeStr('2', ThemeAttr('types', 'dir_linkcount'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_owner'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_group'), False),
               ThemeStr('          ', ThemeAttr('types', 'generic'), False),
               ThemeStr('40', ThemeAttr('types', 'dir_size'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('Mar', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('16', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('22:00', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('shm', ThemeAttr('types', 'dir_sticky'), False)],
              []), None),
            ('-rwxr-sr-x   1 root shadow     80376 Feb  4 22:28 chage',
             LogLevel.INFO, "",
             ("", LogLevel.INFO,
              [ThemeStr('-', ThemeAttr('types', 'dir_type'), False),
               ThemeStr('rwxr-sr-x', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr('  ', ThemeAttr('types', 'generic'), False),
               ThemeStr('1', ThemeAttr('types', 'dir_linkcount'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_owner'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('shadow', ThemeAttr('types', 'dir_group'), False),
               ThemeStr('     ', ThemeAttr('types', 'generic'), False),
               ThemeStr('80376', ThemeAttr('types', 'dir_size'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('Feb', ThemeAttr('types', 'dir_date'), False),
               ThemeStr('  ', ThemeAttr('types', 'generic'), False),
               ThemeStr('4', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('22:28', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('chage', ThemeAttr('types', 'dir_file'), False)],
              []), None),
            ('prw-------   1 root              root           0 Mar 13 12:32 dmeventd-client',
             LogLevel.INFO, "",
             ("", LogLevel.INFO,
              [ThemeStr('p', ThemeAttr('types', 'dir_type'), False),
               ThemeStr('rw-------', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr('  ', ThemeAttr('types', 'generic'), False),
               ThemeStr('1', ThemeAttr('types', 'dir_linkcount'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_owner'), False),
               ThemeStr('              ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_group'), False),
               ThemeStr('           ', ThemeAttr('types', 'generic'), False),
               ThemeStr('0', ThemeAttr('types', 'dir_size'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('Mar', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('13', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('12:32', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('dmeventd-client', ThemeAttr('types', 'dir_pipe'), False)],
              []), None),
            ('srw-rw-rw-   1 root              root           0 Mar 13 12:32 rpcbind.sock=',
             LogLevel.INFO, "",
             ("", LogLevel.INFO,
              [ThemeStr('s', ThemeAttr('types', 'dir_type'), False),
               ThemeStr('rw-rw-rw-', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr('  ', ThemeAttr('types', 'generic'), False),
               ThemeStr('1', ThemeAttr('types', 'dir_linkcount'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_owner'), False),
               ThemeStr('              ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_group'), False),
               ThemeStr('           ', ThemeAttr('types', 'generic'), False),
               ThemeStr('0', ThemeAttr('types', 'dir_size'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('Mar', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('13', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('12:32', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('rpcbind.sock', ThemeAttr('types', 'dir_socket'), False),
               ThemeStr('=', ThemeAttr('types', 'dir_suffix'), False)],
              []), None),
            ('lrwxrwxrwx   1 root root          13 Mar 13 12:32 fd -> /proc/self/fd/',
             LogLevel.INFO, "",
             ("", LogLevel.INFO,
              [ThemeStr('l', ThemeAttr('types', 'dir_type'), False),
               ThemeStr('rwxrwxrwx', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr(' ', ThemeAttr('types', 'dir_permissions'), False),
               ThemeStr('  ', ThemeAttr('types', 'generic'), False),
               ThemeStr('1', ThemeAttr('types', 'dir_linkcount'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_owner'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('root', ThemeAttr('types', 'dir_group'), False),
               ThemeStr('          ', ThemeAttr('types', 'generic'), False),
               ThemeStr('13', ThemeAttr('types', 'dir_size'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('Mar', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('13', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('12:32', ThemeAttr('types', 'dir_date'), False),
               ThemeStr(' ', ThemeAttr('types', 'generic'), False),
               ThemeStr('fd', ThemeAttr('types', 'dir_symlink_name'), False),
               ThemeStr(' -> ', ThemeAttr('types', 'dir_symlink_link'), False),
               ThemeStr('/proc/self/fd', ThemeAttr('types', 'dir_dir'), False),
               ThemeStr('/', ThemeAttr('types', 'dir_suffix'), False)],
              []), None),
            ('THIS IS NOT A DIR ENTRY',
             LogLevel.INFO, "",
             ("", LogLevel.INFO, "THIS IS NOT A DIR ENTRY", []), None),
        )

        for indata, severity, facility, expected_result, expected_exception in testdata:
            expected_severity, expected_facility, expected_themearray, expected_remnants = \
                expected_result
            try:
                tmp = fun(indata, severity=severity, facility=facility)
                print(indata)
                severity_result, facility_result, themearray, remnants_result = tmp
                if tmp != expected_result:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input: {indata}\n" \
                              f"         output: {themearray}\n" \
                              f"       expected: {expected_themearray}"
                    result = False
            except Exception as e:  # pylint: disable=broad-except
                if expected_exception is not None:
                    if isinstance(e, expected_exception):
                        pass
                    else:
                        message = f"{fun.__name__}() did not yield expected result:\n" \
                                  f"          input:\n" \
                                  f"{indata}" \
                                  f"      exception: {type(e)}\n" \
                                  f"       expected: {expected_exception}"
                        result = False
                else:
                    message = f"{fun.__name__}() did not yield expected result:\n" \
                              f"          input:\n" \
                              f"{indata}" \
                              f"      exception: {type(e)}\n" \
                              f"       expected:\n" \
                              f"{yaml_dump(expected_result, base_indent = 17)}"
                    result = False

    return message, result


# pylint: disable-next=unused-argument
def test_parser_list(verbose: bool = False) -> Tuple[str, bool]:
    message = ""
    result = True

    fun = logparsers.init_parser_list

    if result:
        try:
            fun()
        except Exception as e:  # pylint: disable=broad-except
            message = f"{fun.__name__}() did not yield expected result:\n" \
                      f"      exception: {type(e)}\n"
            result = False

    fun = logparsers.get_parser_list

    if result:
        try:
            tmp = fun()
            if not isinstance(tmp, set) or not tmp or len(tmp) <= 2:
                message = f"{fun.__name__}() did not yield expected result:\n" \
                          f"           type: {type(tmp)}\n" \
                          f"  expected type: {set}\n" \
                          f"            len: {len(tmp)}\n" \
                          f"       expected: > 2\n"
                result = False
        except Exception as e:  # pylint: disable=broad-except
            message = f"{fun.__name__}() did not yield expected result:\n" \
                      f"      exception: {type(e)}\n"
            result = False

    return message, result


tests: Dict = {
    ("json_ujson",): {
        "callable": test_json_ujson,
        "result": None,
    },
    ("import_validators",): {
        "callable": test_import_validators,
        "result": None,
    },
    ("get_loglevel_names()", "name_to_loglevel()"): {
        "callable": test_get_loglevel_names_and_name_to_loglevel,
        "result": None,
    },
    ("month_to_numerical()",): {
        "callable": test_month_to_numerical,
        "result": None,
    },
    ("letter_to_severity",): {
        "callable": test_letter_to_severity,
        "result": None,
    },
    ("str_3letter_to_severity",): {
        "callable": test_str_3letter_to_severity,
        "result": None,
    },
    ("str_4letter_to_severity",): {
        "callable": test_str_4letter_to_severity,
        "result": None,
    },
    ("str_to_severity",): {
        "callable": test_str_to_severity,
        "result": None,
    },
    ("lvl_to_letter_severity",): {
        "callable": test_lvl_to_letter_severity,
        "result": None,
    },
    ("lvl_to_4letter_severity",): {
        "callable": test_lvl_to_4letter_severity,
        "result": None,
    },
    ("lvl_to_word_severity",): {
        "callable": test_lvl_to_word_severity,
        "result": None,
    },
    ("split_bracketed_severity",): {
        "callable": test_split_bracketed_severity,
        "result": None,
    },
    ("split_colon_severity",): {
        "callable": test_split_colon_severity,
        "result": None,
    },
    ("substitute_bullets",): {
        "callable": test_substitute_bullets,
        "result": None,
    },
    ("is_timestamp",): {
        "callable": test_is_timestamp,
        "result": None,
    },
    ("test_split_iso_timestamp",): {
        "callable": test_split_iso_timestamp,
        "result": None,
    },
    ("test_strip_iso_timestamp",): {
        "callable": test_strip_iso_timestamp,
        "result": None,
    },
    ("test_strip_iso_timestamp_with_tz",): {
        "callable": test_strip_iso_timestamp_with_tz,
        "result": None,
    },
    ("test_iptables",): {
        "callable": test_iptables,
        "result": None,
    },
    ("test_http",): {
        "callable": test_http,
        "result": None,
    },
    ("test_split_glog",): {
        "callable": test_split_glog,
        "result": None,
    },
    ("test_tab_separated",): {
        "callable": test_tab_separated,
        "result": None,
    },
    ("test___split_severity_facility_style",): {
        "callable": test___split_severity_facility_style,
        "result": None,
    },
    ("test_split_json_style",): {
        "callable": test_split_json_style,
        "result": None,
    },
    ("test_merge_message",): {
        "callable": test_merge_message,
        "result": None,
    },
    ("test_split_json_style_raw",): {
        "callable": test_split_json_style_raw,
        "result": None,
    },
    ("test_json_event",): {
        "callable": test_json_event,
        "result": None,
    },
    ("test_modinfo",): {
        "callable": test_modinfo,
        "result": None,
    },
    ("test_directory",): {
        "callable": test_directory,
        "result": None,
    },
    ("test_parser_list",): {
        "callable": test_parser_list,
        "result": None,
    },
}


def main() -> int:
    global real_import  # pylint: disable=global-statement
    real_import = builtins.__import__

    fail = 0
    success = 0
    verbose = False
    failed_testcases = []

    init_ansithemeprint(themefile=None)

    # How many non-prepare testcases do we have?
    # pylint: disable-next=consider-using-dict-items
    testcount = sum(1 for i in tests if not deep_get(tests[i], DictPath("prepare"), False))

    for i, test in enumerate(tests):
        ansithemeprint([ANSIThemeStr(f"[{i:03}/{testcount - 1:03}]", "emphasis"),
                        ANSIThemeStr(f" {', '.join(test)}:", "default")])
        message, result = tests[test]["callable"](verbose=verbose)
        if not result:
            ansithemeprint([ANSIThemeStr("  FAIL", "error"),
                            ANSIThemeStr(f": {message}", "default")])
        else:
            if message:
                ansithemeprint([ANSIThemeStr("  WARN", "warning"),
                                ANSIThemeStr(f": {message}", "default")])
            else:
                ansithemeprint([ANSIThemeStr("  PASS", "success")])
            success += 1
        tests[test]["result"] = result
        if not result:
            fail += 1
            failed_testcases.append(f"{i}: {', '.join(test)}")

    ansithemeprint([ANSIThemeStr("\nSummary:", "header")])
    if fail:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "error")])
    else:
        ansithemeprint([ANSIThemeStr(f"  FAIL: {fail}", "unknown")])
    ansithemeprint([ANSIThemeStr(f"  PASS: {success}", "success")])

    if fail:
        ansithemeprint([ANSIThemeStr("\nFailed testcases:", "header")])
        for testcase in failed_testcases:
            ansithemeprint([ANSIThemeStr("  • ", "separator"),
                            ANSIThemeStr(testcase, "default")], stderr=True)
        sys.exit(fail)

    return 0


if __name__ == "__main__":
    main()
